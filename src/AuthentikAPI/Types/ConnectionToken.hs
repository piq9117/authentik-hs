{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema ConnectionToken
module AuthentikAPI.Types.ConnectionToken where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.AuthModeEnum
import {-# SOURCE #-} AuthentikAPI.Types.Endpoint
import {-# SOURCE #-} AuthentikAPI.Types.GroupMember
import {-# SOURCE #-} AuthentikAPI.Types.ProtocolEnum
import {-# SOURCE #-} AuthentikAPI.Types.RACProvider
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.ConnectionToken@ in the specification.
--
-- ConnectionToken Serializer
data ConnectionToken = ConnectionToken
  { -- | endpoint
    connectionTokenEndpoint :: Data.Text.Internal.Text,
    -- | endpoint_obj
    connectionTokenEndpointObj :: ConnectionTokenEndpointObj',
    -- | pk
    connectionTokenPk :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | provider
    connectionTokenProvider :: GHC.Types.Int,
    -- | provider_obj
    connectionTokenProviderObj :: ConnectionTokenProviderObj',
    -- | user
    connectionTokenUser :: ConnectionTokenUser'
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON ConnectionToken where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["endpoint" Data.Aeson.Types.ToJSON..= connectionTokenEndpoint obj] : ["endpoint_obj" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pk" Data.Aeson.Types.ToJSON..=)) (connectionTokenPk obj) : ["provider" Data.Aeson.Types.ToJSON..= connectionTokenProvider obj] : ["provider_obj" Data.Aeson.Types.ToJSON..= connectionTokenProviderObj obj] : ["user" Data.Aeson.Types.ToJSON..= connectionTokenUser obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["endpoint" Data.Aeson.Types.ToJSON..= connectionTokenEndpoint obj] : ["endpoint_obj" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pk" Data.Aeson.Types.ToJSON..=)) (connectionTokenPk obj) : ["provider" Data.Aeson.Types.ToJSON..= connectionTokenProvider obj] : ["provider_obj" Data.Aeson.Types.ToJSON..= connectionTokenProviderObj obj] : ["user" Data.Aeson.Types.ToJSON..= connectionTokenUser obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON ConnectionToken where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "ConnectionToken" (\obj -> (((((GHC.Base.pure ConnectionToken GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "endpoint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "endpoint_obj")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "provider")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "provider_obj")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "user"))

-- | Create a new 'ConnectionToken' with all required fields.
mkConnectionToken ::
  -- | 'connectionTokenEndpoint'
  Data.Text.Internal.Text ->
  -- | 'connectionTokenEndpointObj'
  ConnectionTokenEndpointObj' ->
  -- | 'connectionTokenProvider'
  GHC.Types.Int ->
  -- | 'connectionTokenProviderObj'
  ConnectionTokenProviderObj' ->
  -- | 'connectionTokenUser'
  ConnectionTokenUser' ->
  ConnectionToken
mkConnectionToken connectionTokenEndpoint connectionTokenEndpointObj connectionTokenProvider connectionTokenProviderObj connectionTokenUser =
  ConnectionToken
    { connectionTokenEndpoint = connectionTokenEndpoint,
      connectionTokenEndpointObj = connectionTokenEndpointObj,
      connectionTokenPk = GHC.Maybe.Nothing,
      connectionTokenProvider = connectionTokenProvider,
      connectionTokenProviderObj = connectionTokenProviderObj,
      connectionTokenUser = connectionTokenUser
    }

-- | Defines the object schema located at @components.schemas.ConnectionToken.properties.endpoint_obj.allOf@ in the specification.
data ConnectionTokenEndpointObj' = ConnectionTokenEndpointObj'
  { -- | auth_mode
    connectionTokenEndpointObj'AuthMode :: AuthModeEnum,
    -- | host
    connectionTokenEndpointObj'Host :: Data.Text.Internal.Text,
    -- | launch_url: Build actual launch URL (the provider itself does not have one, just
    -- individual endpoints)
    connectionTokenEndpointObj'LaunchUrl :: (AuthentikAPI.Common.Nullable Data.Text.Internal.Text),
    -- | maximum_connections
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of -2.1474836e9
    connectionTokenEndpointObj'MaximumConnections :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | name
    connectionTokenEndpointObj'Name :: Data.Text.Internal.Text,
    -- | pk
    connectionTokenEndpointObj'Pk :: Data.Text.Internal.Text,
    -- | property_mappings
    connectionTokenEndpointObj'PropertyMappings :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | protocol
    connectionTokenEndpointObj'Protocol :: ProtocolEnum,
    -- | provider
    connectionTokenEndpointObj'Provider :: GHC.Types.Int,
    -- | provider_obj
    connectionTokenEndpointObj'ProviderObj :: ConnectionTokenEndpointObj'ProviderObj',
    -- | settings
    connectionTokenEndpointObj'Settings :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON ConnectionTokenEndpointObj' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["auth_mode" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj'AuthMode obj] : ["host" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj'Host obj] : ["launch_url" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj'LaunchUrl obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("maximum_connections" Data.Aeson.Types.ToJSON..=)) (connectionTokenEndpointObj'MaximumConnections obj) : ["name" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj'Name obj] : ["pk" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj'Pk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings" Data.Aeson.Types.ToJSON..=)) (connectionTokenEndpointObj'PropertyMappings obj) : ["protocol" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj'Protocol obj] : ["provider" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj'Provider obj] : ["provider_obj" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj'ProviderObj obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("settings" Data.Aeson.Types.ToJSON..=)) (connectionTokenEndpointObj'Settings obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["auth_mode" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj'AuthMode obj] : ["host" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj'Host obj] : ["launch_url" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj'LaunchUrl obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("maximum_connections" Data.Aeson.Types.ToJSON..=)) (connectionTokenEndpointObj'MaximumConnections obj) : ["name" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj'Name obj] : ["pk" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj'Pk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings" Data.Aeson.Types.ToJSON..=)) (connectionTokenEndpointObj'PropertyMappings obj) : ["protocol" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj'Protocol obj] : ["provider" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj'Provider obj] : ["provider_obj" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj'ProviderObj obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("settings" Data.Aeson.Types.ToJSON..=)) (connectionTokenEndpointObj'Settings obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON ConnectionTokenEndpointObj' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "ConnectionTokenEndpointObj'" (\obj -> ((((((((((GHC.Base.pure ConnectionTokenEndpointObj' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "auth_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "host")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "launch_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "maximum_connections")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "property_mappings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "protocol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "provider")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "provider_obj")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "settings"))

-- | Create a new 'ConnectionTokenEndpointObj'' with all required fields.
mkConnectionTokenEndpointObj' ::
  -- | 'connectionTokenEndpointObj'AuthMode'
  AuthModeEnum ->
  -- | 'connectionTokenEndpointObj'Host'
  Data.Text.Internal.Text ->
  -- | 'connectionTokenEndpointObj'LaunchUrl'
  AuthentikAPI.Common.Nullable Data.Text.Internal.Text ->
  -- | 'connectionTokenEndpointObj'Name'
  Data.Text.Internal.Text ->
  -- | 'connectionTokenEndpointObj'Pk'
  Data.Text.Internal.Text ->
  -- | 'connectionTokenEndpointObj'Protocol'
  ProtocolEnum ->
  -- | 'connectionTokenEndpointObj'Provider'
  GHC.Types.Int ->
  -- | 'connectionTokenEndpointObj'ProviderObj'
  ConnectionTokenEndpointObj'ProviderObj' ->
  ConnectionTokenEndpointObj'
mkConnectionTokenEndpointObj' connectionTokenEndpointObj'AuthMode connectionTokenEndpointObj'Host connectionTokenEndpointObj'LaunchUrl connectionTokenEndpointObj'Name connectionTokenEndpointObj'Pk connectionTokenEndpointObj'Protocol connectionTokenEndpointObj'Provider connectionTokenEndpointObj'ProviderObj =
  ConnectionTokenEndpointObj'
    { connectionTokenEndpointObj'AuthMode = connectionTokenEndpointObj'AuthMode,
      connectionTokenEndpointObj'Host = connectionTokenEndpointObj'Host,
      connectionTokenEndpointObj'LaunchUrl = connectionTokenEndpointObj'LaunchUrl,
      connectionTokenEndpointObj'MaximumConnections = GHC.Maybe.Nothing,
      connectionTokenEndpointObj'Name = connectionTokenEndpointObj'Name,
      connectionTokenEndpointObj'Pk = connectionTokenEndpointObj'Pk,
      connectionTokenEndpointObj'PropertyMappings = GHC.Maybe.Nothing,
      connectionTokenEndpointObj'Protocol = connectionTokenEndpointObj'Protocol,
      connectionTokenEndpointObj'Provider = connectionTokenEndpointObj'Provider,
      connectionTokenEndpointObj'ProviderObj = connectionTokenEndpointObj'ProviderObj,
      connectionTokenEndpointObj'Settings = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.ConnectionToken.properties.endpoint_obj.allOf.properties.provider_obj.allOf@ in the specification.
data ConnectionTokenEndpointObj'ProviderObj' = ConnectionTokenEndpointObj'ProviderObj'
  { -- | assigned_application_name: Application\'s display Name.
    connectionTokenEndpointObj'ProviderObj'AssignedApplicationName :: Data.Text.Internal.Text,
    -- | assigned_application_slug: Internal application name, used in URLs.
    connectionTokenEndpointObj'ProviderObj'AssignedApplicationSlug :: Data.Text.Internal.Text,
    -- | assigned_backchannel_application_name: Application\'s display Name.
    connectionTokenEndpointObj'ProviderObj'AssignedBackchannelApplicationName :: Data.Text.Internal.Text,
    -- | assigned_backchannel_application_slug: Internal application name, used in URLs.
    connectionTokenEndpointObj'ProviderObj'AssignedBackchannelApplicationSlug :: Data.Text.Internal.Text,
    -- | authentication_flow: Flow used for authentication when the associated application is accessed by an un-authenticated user.
    connectionTokenEndpointObj'ProviderObj'AuthenticationFlow :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | authorization_flow: Flow used when authorizing this provider.
    connectionTokenEndpointObj'ProviderObj'AuthorizationFlow :: Data.Text.Internal.Text,
    -- | component: Get object component so that we know how to edit the object
    connectionTokenEndpointObj'ProviderObj'Component :: Data.Text.Internal.Text,
    -- | connection_expiry: Determines how long a session lasts. Default of 0 means that the sessions lasts until the browser is closed. (Format: hours=-1;minutes=-2;seconds=-3)
    connectionTokenEndpointObj'ProviderObj'ConnectionExpiry :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | delete_token_on_disconnect: When set to true, connection tokens will be deleted upon disconnect.
    connectionTokenEndpointObj'ProviderObj'DeleteTokenOnDisconnect :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | meta_model_name: Return internal model name
    connectionTokenEndpointObj'ProviderObj'MetaModelName :: Data.Text.Internal.Text,
    -- | name
    connectionTokenEndpointObj'ProviderObj'Name :: Data.Text.Internal.Text,
    -- | outpost_set
    connectionTokenEndpointObj'ProviderObj'OutpostSet :: [Data.Text.Internal.Text],
    -- | pk
    connectionTokenEndpointObj'ProviderObj'Pk :: GHC.Types.Int,
    -- | property_mappings
    connectionTokenEndpointObj'ProviderObj'PropertyMappings :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | settings
    connectionTokenEndpointObj'ProviderObj'Settings :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | verbose_name: Return object\'s verbose_name
    connectionTokenEndpointObj'ProviderObj'VerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    connectionTokenEndpointObj'ProviderObj'VerboseNamePlural :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON ConnectionTokenEndpointObj'ProviderObj' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["assigned_application_name" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj'ProviderObj'AssignedApplicationName obj] : ["assigned_application_slug" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj'ProviderObj'AssignedApplicationSlug obj] : ["assigned_backchannel_application_name" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj'ProviderObj'AssignedBackchannelApplicationName obj] : ["assigned_backchannel_application_slug" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj'ProviderObj'AssignedBackchannelApplicationSlug obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication_flow" Data.Aeson.Types.ToJSON..=)) (connectionTokenEndpointObj'ProviderObj'AuthenticationFlow obj) : ["authorization_flow" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj'ProviderObj'AuthorizationFlow obj] : ["component" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj'ProviderObj'Component obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("connection_expiry" Data.Aeson.Types.ToJSON..=)) (connectionTokenEndpointObj'ProviderObj'ConnectionExpiry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delete_token_on_disconnect" Data.Aeson.Types.ToJSON..=)) (connectionTokenEndpointObj'ProviderObj'DeleteTokenOnDisconnect obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj'ProviderObj'MetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj'ProviderObj'Name obj] : ["outpost_set" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj'ProviderObj'OutpostSet obj] : ["pk" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj'ProviderObj'Pk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings" Data.Aeson.Types.ToJSON..=)) (connectionTokenEndpointObj'ProviderObj'PropertyMappings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("settings" Data.Aeson.Types.ToJSON..=)) (connectionTokenEndpointObj'ProviderObj'Settings obj) : ["verbose_name" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj'ProviderObj'VerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj'ProviderObj'VerboseNamePlural obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["assigned_application_name" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj'ProviderObj'AssignedApplicationName obj] : ["assigned_application_slug" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj'ProviderObj'AssignedApplicationSlug obj] : ["assigned_backchannel_application_name" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj'ProviderObj'AssignedBackchannelApplicationName obj] : ["assigned_backchannel_application_slug" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj'ProviderObj'AssignedBackchannelApplicationSlug obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication_flow" Data.Aeson.Types.ToJSON..=)) (connectionTokenEndpointObj'ProviderObj'AuthenticationFlow obj) : ["authorization_flow" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj'ProviderObj'AuthorizationFlow obj] : ["component" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj'ProviderObj'Component obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("connection_expiry" Data.Aeson.Types.ToJSON..=)) (connectionTokenEndpointObj'ProviderObj'ConnectionExpiry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delete_token_on_disconnect" Data.Aeson.Types.ToJSON..=)) (connectionTokenEndpointObj'ProviderObj'DeleteTokenOnDisconnect obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj'ProviderObj'MetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj'ProviderObj'Name obj] : ["outpost_set" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj'ProviderObj'OutpostSet obj] : ["pk" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj'ProviderObj'Pk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings" Data.Aeson.Types.ToJSON..=)) (connectionTokenEndpointObj'ProviderObj'PropertyMappings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("settings" Data.Aeson.Types.ToJSON..=)) (connectionTokenEndpointObj'ProviderObj'Settings obj) : ["verbose_name" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj'ProviderObj'VerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= connectionTokenEndpointObj'ProviderObj'VerboseNamePlural obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON ConnectionTokenEndpointObj'ProviderObj' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "ConnectionTokenEndpointObj'ProviderObj'" (\obj -> ((((((((((((((((GHC.Base.pure ConnectionTokenEndpointObj'ProviderObj' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assigned_application_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assigned_application_slug")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assigned_backchannel_application_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assigned_backchannel_application_slug")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "authentication_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "authorization_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "connection_expiry")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "delete_token_on_disconnect")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "outpost_set")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "property_mappings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "settings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural"))

-- | Create a new 'ConnectionTokenEndpointObj'ProviderObj'' with all required fields.
mkConnectionTokenEndpointObj'ProviderObj' ::
  -- | 'connectionTokenEndpointObj'ProviderObj'AssignedApplicationName'
  Data.Text.Internal.Text ->
  -- | 'connectionTokenEndpointObj'ProviderObj'AssignedApplicationSlug'
  Data.Text.Internal.Text ->
  -- | 'connectionTokenEndpointObj'ProviderObj'AssignedBackchannelApplicationName'
  Data.Text.Internal.Text ->
  -- | 'connectionTokenEndpointObj'ProviderObj'AssignedBackchannelApplicationSlug'
  Data.Text.Internal.Text ->
  -- | 'connectionTokenEndpointObj'ProviderObj'AuthorizationFlow'
  Data.Text.Internal.Text ->
  -- | 'connectionTokenEndpointObj'ProviderObj'Component'
  Data.Text.Internal.Text ->
  -- | 'connectionTokenEndpointObj'ProviderObj'MetaModelName'
  Data.Text.Internal.Text ->
  -- | 'connectionTokenEndpointObj'ProviderObj'Name'
  Data.Text.Internal.Text ->
  -- | 'connectionTokenEndpointObj'ProviderObj'OutpostSet'
  [Data.Text.Internal.Text] ->
  -- | 'connectionTokenEndpointObj'ProviderObj'Pk'
  GHC.Types.Int ->
  -- | 'connectionTokenEndpointObj'ProviderObj'VerboseName'
  Data.Text.Internal.Text ->
  -- | 'connectionTokenEndpointObj'ProviderObj'VerboseNamePlural'
  Data.Text.Internal.Text ->
  ConnectionTokenEndpointObj'ProviderObj'
mkConnectionTokenEndpointObj'ProviderObj' connectionTokenEndpointObj'ProviderObj'AssignedApplicationName connectionTokenEndpointObj'ProviderObj'AssignedApplicationSlug connectionTokenEndpointObj'ProviderObj'AssignedBackchannelApplicationName connectionTokenEndpointObj'ProviderObj'AssignedBackchannelApplicationSlug connectionTokenEndpointObj'ProviderObj'AuthorizationFlow connectionTokenEndpointObj'ProviderObj'Component connectionTokenEndpointObj'ProviderObj'MetaModelName connectionTokenEndpointObj'ProviderObj'Name connectionTokenEndpointObj'ProviderObj'OutpostSet connectionTokenEndpointObj'ProviderObj'Pk connectionTokenEndpointObj'ProviderObj'VerboseName connectionTokenEndpointObj'ProviderObj'VerboseNamePlural =
  ConnectionTokenEndpointObj'ProviderObj'
    { connectionTokenEndpointObj'ProviderObj'AssignedApplicationName = connectionTokenEndpointObj'ProviderObj'AssignedApplicationName,
      connectionTokenEndpointObj'ProviderObj'AssignedApplicationSlug = connectionTokenEndpointObj'ProviderObj'AssignedApplicationSlug,
      connectionTokenEndpointObj'ProviderObj'AssignedBackchannelApplicationName = connectionTokenEndpointObj'ProviderObj'AssignedBackchannelApplicationName,
      connectionTokenEndpointObj'ProviderObj'AssignedBackchannelApplicationSlug = connectionTokenEndpointObj'ProviderObj'AssignedBackchannelApplicationSlug,
      connectionTokenEndpointObj'ProviderObj'AuthenticationFlow = GHC.Maybe.Nothing,
      connectionTokenEndpointObj'ProviderObj'AuthorizationFlow = connectionTokenEndpointObj'ProviderObj'AuthorizationFlow,
      connectionTokenEndpointObj'ProviderObj'Component = connectionTokenEndpointObj'ProviderObj'Component,
      connectionTokenEndpointObj'ProviderObj'ConnectionExpiry = GHC.Maybe.Nothing,
      connectionTokenEndpointObj'ProviderObj'DeleteTokenOnDisconnect = GHC.Maybe.Nothing,
      connectionTokenEndpointObj'ProviderObj'MetaModelName = connectionTokenEndpointObj'ProviderObj'MetaModelName,
      connectionTokenEndpointObj'ProviderObj'Name = connectionTokenEndpointObj'ProviderObj'Name,
      connectionTokenEndpointObj'ProviderObj'OutpostSet = connectionTokenEndpointObj'ProviderObj'OutpostSet,
      connectionTokenEndpointObj'ProviderObj'Pk = connectionTokenEndpointObj'ProviderObj'Pk,
      connectionTokenEndpointObj'ProviderObj'PropertyMappings = GHC.Maybe.Nothing,
      connectionTokenEndpointObj'ProviderObj'Settings = GHC.Maybe.Nothing,
      connectionTokenEndpointObj'ProviderObj'VerboseName = connectionTokenEndpointObj'ProviderObj'VerboseName,
      connectionTokenEndpointObj'ProviderObj'VerboseNamePlural = connectionTokenEndpointObj'ProviderObj'VerboseNamePlural
    }

-- | Defines the object schema located at @components.schemas.ConnectionToken.properties.provider_obj.allOf@ in the specification.
data ConnectionTokenProviderObj' = ConnectionTokenProviderObj'
  { -- | assigned_application_name: Application\'s display Name.
    connectionTokenProviderObj'AssignedApplicationName :: Data.Text.Internal.Text,
    -- | assigned_application_slug: Internal application name, used in URLs.
    connectionTokenProviderObj'AssignedApplicationSlug :: Data.Text.Internal.Text,
    -- | assigned_backchannel_application_name: Application\'s display Name.
    connectionTokenProviderObj'AssignedBackchannelApplicationName :: Data.Text.Internal.Text,
    -- | assigned_backchannel_application_slug: Internal application name, used in URLs.
    connectionTokenProviderObj'AssignedBackchannelApplicationSlug :: Data.Text.Internal.Text,
    -- | authentication_flow: Flow used for authentication when the associated application is accessed by an un-authenticated user.
    connectionTokenProviderObj'AuthenticationFlow :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | authorization_flow: Flow used when authorizing this provider.
    connectionTokenProviderObj'AuthorizationFlow :: Data.Text.Internal.Text,
    -- | component: Get object component so that we know how to edit the object
    connectionTokenProviderObj'Component :: Data.Text.Internal.Text,
    -- | connection_expiry: Determines how long a session lasts. Default of 0 means that the sessions lasts until the browser is closed. (Format: hours=-1;minutes=-2;seconds=-3)
    connectionTokenProviderObj'ConnectionExpiry :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | delete_token_on_disconnect: When set to true, connection tokens will be deleted upon disconnect.
    connectionTokenProviderObj'DeleteTokenOnDisconnect :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | meta_model_name: Return internal model name
    connectionTokenProviderObj'MetaModelName :: Data.Text.Internal.Text,
    -- | name
    connectionTokenProviderObj'Name :: Data.Text.Internal.Text,
    -- | outpost_set
    connectionTokenProviderObj'OutpostSet :: [Data.Text.Internal.Text],
    -- | pk
    connectionTokenProviderObj'Pk :: GHC.Types.Int,
    -- | property_mappings
    connectionTokenProviderObj'PropertyMappings :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | settings
    connectionTokenProviderObj'Settings :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | verbose_name: Return object\'s verbose_name
    connectionTokenProviderObj'VerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    connectionTokenProviderObj'VerboseNamePlural :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON ConnectionTokenProviderObj' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["assigned_application_name" Data.Aeson.Types.ToJSON..= connectionTokenProviderObj'AssignedApplicationName obj] : ["assigned_application_slug" Data.Aeson.Types.ToJSON..= connectionTokenProviderObj'AssignedApplicationSlug obj] : ["assigned_backchannel_application_name" Data.Aeson.Types.ToJSON..= connectionTokenProviderObj'AssignedBackchannelApplicationName obj] : ["assigned_backchannel_application_slug" Data.Aeson.Types.ToJSON..= connectionTokenProviderObj'AssignedBackchannelApplicationSlug obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication_flow" Data.Aeson.Types.ToJSON..=)) (connectionTokenProviderObj'AuthenticationFlow obj) : ["authorization_flow" Data.Aeson.Types.ToJSON..= connectionTokenProviderObj'AuthorizationFlow obj] : ["component" Data.Aeson.Types.ToJSON..= connectionTokenProviderObj'Component obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("connection_expiry" Data.Aeson.Types.ToJSON..=)) (connectionTokenProviderObj'ConnectionExpiry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delete_token_on_disconnect" Data.Aeson.Types.ToJSON..=)) (connectionTokenProviderObj'DeleteTokenOnDisconnect obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= connectionTokenProviderObj'MetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= connectionTokenProviderObj'Name obj] : ["outpost_set" Data.Aeson.Types.ToJSON..= connectionTokenProviderObj'OutpostSet obj] : ["pk" Data.Aeson.Types.ToJSON..= connectionTokenProviderObj'Pk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings" Data.Aeson.Types.ToJSON..=)) (connectionTokenProviderObj'PropertyMappings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("settings" Data.Aeson.Types.ToJSON..=)) (connectionTokenProviderObj'Settings obj) : ["verbose_name" Data.Aeson.Types.ToJSON..= connectionTokenProviderObj'VerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= connectionTokenProviderObj'VerboseNamePlural obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["assigned_application_name" Data.Aeson.Types.ToJSON..= connectionTokenProviderObj'AssignedApplicationName obj] : ["assigned_application_slug" Data.Aeson.Types.ToJSON..= connectionTokenProviderObj'AssignedApplicationSlug obj] : ["assigned_backchannel_application_name" Data.Aeson.Types.ToJSON..= connectionTokenProviderObj'AssignedBackchannelApplicationName obj] : ["assigned_backchannel_application_slug" Data.Aeson.Types.ToJSON..= connectionTokenProviderObj'AssignedBackchannelApplicationSlug obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication_flow" Data.Aeson.Types.ToJSON..=)) (connectionTokenProviderObj'AuthenticationFlow obj) : ["authorization_flow" Data.Aeson.Types.ToJSON..= connectionTokenProviderObj'AuthorizationFlow obj] : ["component" Data.Aeson.Types.ToJSON..= connectionTokenProviderObj'Component obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("connection_expiry" Data.Aeson.Types.ToJSON..=)) (connectionTokenProviderObj'ConnectionExpiry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delete_token_on_disconnect" Data.Aeson.Types.ToJSON..=)) (connectionTokenProviderObj'DeleteTokenOnDisconnect obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= connectionTokenProviderObj'MetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= connectionTokenProviderObj'Name obj] : ["outpost_set" Data.Aeson.Types.ToJSON..= connectionTokenProviderObj'OutpostSet obj] : ["pk" Data.Aeson.Types.ToJSON..= connectionTokenProviderObj'Pk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings" Data.Aeson.Types.ToJSON..=)) (connectionTokenProviderObj'PropertyMappings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("settings" Data.Aeson.Types.ToJSON..=)) (connectionTokenProviderObj'Settings obj) : ["verbose_name" Data.Aeson.Types.ToJSON..= connectionTokenProviderObj'VerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= connectionTokenProviderObj'VerboseNamePlural obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON ConnectionTokenProviderObj' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "ConnectionTokenProviderObj'" (\obj -> ((((((((((((((((GHC.Base.pure ConnectionTokenProviderObj' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assigned_application_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assigned_application_slug")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assigned_backchannel_application_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assigned_backchannel_application_slug")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "authentication_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "authorization_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "connection_expiry")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "delete_token_on_disconnect")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "outpost_set")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "property_mappings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "settings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural"))

-- | Create a new 'ConnectionTokenProviderObj'' with all required fields.
mkConnectionTokenProviderObj' ::
  -- | 'connectionTokenProviderObj'AssignedApplicationName'
  Data.Text.Internal.Text ->
  -- | 'connectionTokenProviderObj'AssignedApplicationSlug'
  Data.Text.Internal.Text ->
  -- | 'connectionTokenProviderObj'AssignedBackchannelApplicationName'
  Data.Text.Internal.Text ->
  -- | 'connectionTokenProviderObj'AssignedBackchannelApplicationSlug'
  Data.Text.Internal.Text ->
  -- | 'connectionTokenProviderObj'AuthorizationFlow'
  Data.Text.Internal.Text ->
  -- | 'connectionTokenProviderObj'Component'
  Data.Text.Internal.Text ->
  -- | 'connectionTokenProviderObj'MetaModelName'
  Data.Text.Internal.Text ->
  -- | 'connectionTokenProviderObj'Name'
  Data.Text.Internal.Text ->
  -- | 'connectionTokenProviderObj'OutpostSet'
  [Data.Text.Internal.Text] ->
  -- | 'connectionTokenProviderObj'Pk'
  GHC.Types.Int ->
  -- | 'connectionTokenProviderObj'VerboseName'
  Data.Text.Internal.Text ->
  -- | 'connectionTokenProviderObj'VerboseNamePlural'
  Data.Text.Internal.Text ->
  ConnectionTokenProviderObj'
mkConnectionTokenProviderObj' connectionTokenProviderObj'AssignedApplicationName connectionTokenProviderObj'AssignedApplicationSlug connectionTokenProviderObj'AssignedBackchannelApplicationName connectionTokenProviderObj'AssignedBackchannelApplicationSlug connectionTokenProviderObj'AuthorizationFlow connectionTokenProviderObj'Component connectionTokenProviderObj'MetaModelName connectionTokenProviderObj'Name connectionTokenProviderObj'OutpostSet connectionTokenProviderObj'Pk connectionTokenProviderObj'VerboseName connectionTokenProviderObj'VerboseNamePlural =
  ConnectionTokenProviderObj'
    { connectionTokenProviderObj'AssignedApplicationName = connectionTokenProviderObj'AssignedApplicationName,
      connectionTokenProviderObj'AssignedApplicationSlug = connectionTokenProviderObj'AssignedApplicationSlug,
      connectionTokenProviderObj'AssignedBackchannelApplicationName = connectionTokenProviderObj'AssignedBackchannelApplicationName,
      connectionTokenProviderObj'AssignedBackchannelApplicationSlug = connectionTokenProviderObj'AssignedBackchannelApplicationSlug,
      connectionTokenProviderObj'AuthenticationFlow = GHC.Maybe.Nothing,
      connectionTokenProviderObj'AuthorizationFlow = connectionTokenProviderObj'AuthorizationFlow,
      connectionTokenProviderObj'Component = connectionTokenProviderObj'Component,
      connectionTokenProviderObj'ConnectionExpiry = GHC.Maybe.Nothing,
      connectionTokenProviderObj'DeleteTokenOnDisconnect = GHC.Maybe.Nothing,
      connectionTokenProviderObj'MetaModelName = connectionTokenProviderObj'MetaModelName,
      connectionTokenProviderObj'Name = connectionTokenProviderObj'Name,
      connectionTokenProviderObj'OutpostSet = connectionTokenProviderObj'OutpostSet,
      connectionTokenProviderObj'Pk = connectionTokenProviderObj'Pk,
      connectionTokenProviderObj'PropertyMappings = GHC.Maybe.Nothing,
      connectionTokenProviderObj'Settings = GHC.Maybe.Nothing,
      connectionTokenProviderObj'VerboseName = connectionTokenProviderObj'VerboseName,
      connectionTokenProviderObj'VerboseNamePlural = connectionTokenProviderObj'VerboseNamePlural
    }

-- | Defines the object schema located at @components.schemas.ConnectionToken.properties.user.allOf@ in the specification.
data ConnectionTokenUser' = ConnectionTokenUser'
  { -- | attributes
    connectionTokenUser'Attributes :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | email
    --
    -- Constraints:
    --
    -- * Maximum length of 254
    connectionTokenUser'Email :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | is_active: Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
    connectionTokenUser'IsActive :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | last_login
    connectionTokenUser'LastLogin :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | name: User\'s display name.
    connectionTokenUser'Name :: Data.Text.Internal.Text,
    -- | pk
    connectionTokenUser'Pk :: GHC.Types.Int,
    -- | uid
    connectionTokenUser'Uid :: Data.Text.Internal.Text,
    -- | username: Required. 150 characters or fewer. Letters, digits and \@\/.\/+\/-\/_ only.
    --
    -- Constraints:
    --
    -- * Maximum length of 150
    -- * Must match pattern \'^[\\w.\@+-]+\$\'
    connectionTokenUser'Username :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON ConnectionTokenUser' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (connectionTokenUser'Attributes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (connectionTokenUser'Email obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_active" Data.Aeson.Types.ToJSON..=)) (connectionTokenUser'IsActive obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_login" Data.Aeson.Types.ToJSON..=)) (connectionTokenUser'LastLogin obj) : ["name" Data.Aeson.Types.ToJSON..= connectionTokenUser'Name obj] : ["pk" Data.Aeson.Types.ToJSON..= connectionTokenUser'Pk obj] : ["uid" Data.Aeson.Types.ToJSON..= connectionTokenUser'Uid obj] : ["username" Data.Aeson.Types.ToJSON..= connectionTokenUser'Username obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (connectionTokenUser'Attributes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (connectionTokenUser'Email obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_active" Data.Aeson.Types.ToJSON..=)) (connectionTokenUser'IsActive obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_login" Data.Aeson.Types.ToJSON..=)) (connectionTokenUser'LastLogin obj) : ["name" Data.Aeson.Types.ToJSON..= connectionTokenUser'Name obj] : ["pk" Data.Aeson.Types.ToJSON..= connectionTokenUser'Pk obj] : ["uid" Data.Aeson.Types.ToJSON..= connectionTokenUser'Uid obj] : ["username" Data.Aeson.Types.ToJSON..= connectionTokenUser'Username obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON ConnectionTokenUser' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "ConnectionTokenUser'" (\obj -> (((((((GHC.Base.pure ConnectionTokenUser' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "attributes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "is_active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "last_login")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "uid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "username"))

-- | Create a new 'ConnectionTokenUser'' with all required fields.
mkConnectionTokenUser' ::
  -- | 'connectionTokenUser'Name'
  Data.Text.Internal.Text ->
  -- | 'connectionTokenUser'Pk'
  GHC.Types.Int ->
  -- | 'connectionTokenUser'Uid'
  Data.Text.Internal.Text ->
  -- | 'connectionTokenUser'Username'
  Data.Text.Internal.Text ->
  ConnectionTokenUser'
mkConnectionTokenUser' connectionTokenUser'Name connectionTokenUser'Pk connectionTokenUser'Uid connectionTokenUser'Username =
  ConnectionTokenUser'
    { connectionTokenUser'Attributes = GHC.Maybe.Nothing,
      connectionTokenUser'Email = GHC.Maybe.Nothing,
      connectionTokenUser'IsActive = GHC.Maybe.Nothing,
      connectionTokenUser'LastLogin = GHC.Maybe.Nothing,
      connectionTokenUser'Name = connectionTokenUser'Name,
      connectionTokenUser'Pk = connectionTokenUser'Pk,
      connectionTokenUser'Uid = connectionTokenUser'Uid,
      connectionTokenUser'Username = connectionTokenUser'Username
    }

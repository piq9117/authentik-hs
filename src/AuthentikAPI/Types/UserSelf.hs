{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema UserSelf
module AuthentikAPI.Types.UserSelf where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.UserSelfGroups
import {-# SOURCE #-} AuthentikAPI.Types.UserTypeEnum
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.UserSelf@ in the specification.
--
-- User Serializer for information a user can retrieve about themselves
data UserSelf = UserSelf
  { -- | avatar: User\'s avatar, either a http\/https URL or a data URI
    userSelfAvatar :: Data.Text.Internal.Text,
    -- | email
    --
    -- Constraints:
    --
    -- * Maximum length of 254
    userSelfEmail :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | groups
    userSelfGroups :: [UserSelfGroups],
    -- | is_active: Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
    userSelfIsActive :: GHC.Types.Bool,
    -- | is_superuser
    userSelfIsSuperuser :: GHC.Types.Bool,
    -- | name: User\'s display name.
    userSelfName :: Data.Text.Internal.Text,
    -- | pk
    userSelfPk :: GHC.Types.Int,
    -- | settings: Get user settings with brand and group settings applied
    userSelfSettings :: Data.Aeson.Types.Internal.Object,
    -- | system_permissions: Get all system permissions assigned to the user
    userSelfSystemPermissions :: [Data.Text.Internal.Text],
    -- | type
    userSelfType :: (GHC.Maybe.Maybe UserTypeEnum),
    -- | uid
    userSelfUid :: Data.Text.Internal.Text,
    -- | username: Required. 150 characters or fewer. Letters, digits and \@\/.\/+\/-\/_ only.
    --
    -- Constraints:
    --
    -- * Maximum length of 150
    -- * Must match pattern \'^[\\w.\@+-]+\$\'
    userSelfUsername :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON UserSelf where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["avatar" Data.Aeson.Types.ToJSON..= userSelfAvatar obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (userSelfEmail obj) : ["groups" Data.Aeson.Types.ToJSON..= userSelfGroups obj] : ["is_active" Data.Aeson.Types.ToJSON..= userSelfIsActive obj] : ["is_superuser" Data.Aeson.Types.ToJSON..= userSelfIsSuperuser obj] : ["name" Data.Aeson.Types.ToJSON..= userSelfName obj] : ["pk" Data.Aeson.Types.ToJSON..= userSelfPk obj] : ["settings" Data.Aeson.Types.ToJSON..= userSelfSettings obj] : ["system_permissions" Data.Aeson.Types.ToJSON..= userSelfSystemPermissions obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (userSelfType obj) : ["uid" Data.Aeson.Types.ToJSON..= userSelfUid obj] : ["username" Data.Aeson.Types.ToJSON..= userSelfUsername obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["avatar" Data.Aeson.Types.ToJSON..= userSelfAvatar obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (userSelfEmail obj) : ["groups" Data.Aeson.Types.ToJSON..= userSelfGroups obj] : ["is_active" Data.Aeson.Types.ToJSON..= userSelfIsActive obj] : ["is_superuser" Data.Aeson.Types.ToJSON..= userSelfIsSuperuser obj] : ["name" Data.Aeson.Types.ToJSON..= userSelfName obj] : ["pk" Data.Aeson.Types.ToJSON..= userSelfPk obj] : ["settings" Data.Aeson.Types.ToJSON..= userSelfSettings obj] : ["system_permissions" Data.Aeson.Types.ToJSON..= userSelfSystemPermissions obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (userSelfType obj) : ["uid" Data.Aeson.Types.ToJSON..= userSelfUid obj] : ["username" Data.Aeson.Types.ToJSON..= userSelfUsername obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON UserSelf where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "UserSelf" (\obj -> (((((((((((GHC.Base.pure UserSelf GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "avatar")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "groups")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "is_active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "is_superuser")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "settings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "system_permissions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "uid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "username"))

-- | Create a new 'UserSelf' with all required fields.
mkUserSelf ::
  -- | 'userSelfAvatar'
  Data.Text.Internal.Text ->
  -- | 'userSelfGroups'
  [UserSelfGroups] ->
  -- | 'userSelfIsActive'
  GHC.Types.Bool ->
  -- | 'userSelfIsSuperuser'
  GHC.Types.Bool ->
  -- | 'userSelfName'
  Data.Text.Internal.Text ->
  -- | 'userSelfPk'
  GHC.Types.Int ->
  -- | 'userSelfSettings'
  Data.Aeson.Types.Internal.Object ->
  -- | 'userSelfSystemPermissions'
  [Data.Text.Internal.Text] ->
  -- | 'userSelfUid'
  Data.Text.Internal.Text ->
  -- | 'userSelfUsername'
  Data.Text.Internal.Text ->
  UserSelf
mkUserSelf userSelfAvatar userSelfGroups userSelfIsActive userSelfIsSuperuser userSelfName userSelfPk userSelfSettings userSelfSystemPermissions userSelfUid userSelfUsername =
  UserSelf
    { userSelfAvatar = userSelfAvatar,
      userSelfEmail = GHC.Maybe.Nothing,
      userSelfGroups = userSelfGroups,
      userSelfIsActive = userSelfIsActive,
      userSelfIsSuperuser = userSelfIsSuperuser,
      userSelfName = userSelfName,
      userSelfPk = userSelfPk,
      userSelfSettings = userSelfSettings,
      userSelfSystemPermissions = userSelfSystemPermissions,
      userSelfType = GHC.Maybe.Nothing,
      userSelfUid = userSelfUid,
      userSelfUsername = userSelfUsername
    }

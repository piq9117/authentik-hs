{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema IdentificationChallenge
module AuthentikAPI.Types.IdentificationChallenge where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.CaptchaChallenge
import {-# SOURCE #-} AuthentikAPI.Types.ContextualFlowInfo
import {-# SOURCE #-} AuthentikAPI.Types.FlowDesignationEnum
import {-# SOURCE #-} AuthentikAPI.Types.LoginSource
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.IdentificationChallenge@ in the specification.
--
-- Identification challenges with all UI elements
data IdentificationChallenge = IdentificationChallenge
  { -- | allow_show_password
    identificationChallengeAllowShowPassword :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | application_pre
    identificationChallengeApplicationPre :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | captcha_stage
    identificationChallengeCaptchaStage :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable IdentificationChallengeCaptchaStage'NonNullable)),
    -- | component
    identificationChallengeComponent :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | enable_remember_me
    identificationChallengeEnableRememberMe :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | enroll_url
    identificationChallengeEnrollUrl :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | flow_designation
    identificationChallengeFlowDesignation :: FlowDesignationEnum,
    -- | flow_info: Contextual flow information for a challenge
    identificationChallengeFlowInfo :: (GHC.Maybe.Maybe ContextualFlowInfo),
    -- | password_fields
    identificationChallengePasswordFields :: GHC.Types.Bool,
    -- | passwordless_url
    identificationChallengePasswordlessUrl :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | primary_action
    identificationChallengePrimaryAction :: Data.Text.Internal.Text,
    -- | recovery_url
    identificationChallengeRecoveryUrl :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | response_errors
    identificationChallengeResponseErrors :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | show_source_labels
    identificationChallengeShowSourceLabels :: GHC.Types.Bool,
    -- | sources
    identificationChallengeSources :: (GHC.Maybe.Maybe [LoginSource]),
    -- | user_fields
    identificationChallengeUserFields :: (AuthentikAPI.Common.Nullable [Data.Text.Internal.Text])
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IdentificationChallenge where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allow_show_password" Data.Aeson.Types.ToJSON..=)) (identificationChallengeAllowShowPassword obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("application_pre" Data.Aeson.Types.ToJSON..=)) (identificationChallengeApplicationPre obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("captcha_stage" Data.Aeson.Types.ToJSON..=)) (identificationChallengeCaptchaStage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("component" Data.Aeson.Types.ToJSON..=)) (identificationChallengeComponent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enable_remember_me" Data.Aeson.Types.ToJSON..=)) (identificationChallengeEnableRememberMe obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enroll_url" Data.Aeson.Types.ToJSON..=)) (identificationChallengeEnrollUrl obj) : ["flow_designation" Data.Aeson.Types.ToJSON..= identificationChallengeFlowDesignation obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_info" Data.Aeson.Types.ToJSON..=)) (identificationChallengeFlowInfo obj) : ["password_fields" Data.Aeson.Types.ToJSON..= identificationChallengePasswordFields obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("passwordless_url" Data.Aeson.Types.ToJSON..=)) (identificationChallengePasswordlessUrl obj) : ["primary_action" Data.Aeson.Types.ToJSON..= identificationChallengePrimaryAction obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("recovery_url" Data.Aeson.Types.ToJSON..=)) (identificationChallengeRecoveryUrl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("response_errors" Data.Aeson.Types.ToJSON..=)) (identificationChallengeResponseErrors obj) : ["show_source_labels" Data.Aeson.Types.ToJSON..= identificationChallengeShowSourceLabels obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sources" Data.Aeson.Types.ToJSON..=)) (identificationChallengeSources obj) : ["user_fields" Data.Aeson.Types.ToJSON..= identificationChallengeUserFields obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allow_show_password" Data.Aeson.Types.ToJSON..=)) (identificationChallengeAllowShowPassword obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("application_pre" Data.Aeson.Types.ToJSON..=)) (identificationChallengeApplicationPre obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("captcha_stage" Data.Aeson.Types.ToJSON..=)) (identificationChallengeCaptchaStage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("component" Data.Aeson.Types.ToJSON..=)) (identificationChallengeComponent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enable_remember_me" Data.Aeson.Types.ToJSON..=)) (identificationChallengeEnableRememberMe obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enroll_url" Data.Aeson.Types.ToJSON..=)) (identificationChallengeEnrollUrl obj) : ["flow_designation" Data.Aeson.Types.ToJSON..= identificationChallengeFlowDesignation obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_info" Data.Aeson.Types.ToJSON..=)) (identificationChallengeFlowInfo obj) : ["password_fields" Data.Aeson.Types.ToJSON..= identificationChallengePasswordFields obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("passwordless_url" Data.Aeson.Types.ToJSON..=)) (identificationChallengePasswordlessUrl obj) : ["primary_action" Data.Aeson.Types.ToJSON..= identificationChallengePrimaryAction obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("recovery_url" Data.Aeson.Types.ToJSON..=)) (identificationChallengeRecoveryUrl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("response_errors" Data.Aeson.Types.ToJSON..=)) (identificationChallengeResponseErrors obj) : ["show_source_labels" Data.Aeson.Types.ToJSON..= identificationChallengeShowSourceLabels obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sources" Data.Aeson.Types.ToJSON..=)) (identificationChallengeSources obj) : ["user_fields" Data.Aeson.Types.ToJSON..= identificationChallengeUserFields obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON IdentificationChallenge where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IdentificationChallenge" (\obj -> (((((((((((((((GHC.Base.pure IdentificationChallenge GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "allow_show_password")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "application_pre")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "captcha_stage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "enable_remember_me")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "enroll_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "flow_designation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_info")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "password_fields")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "passwordless_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "primary_action")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "recovery_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "response_errors")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "show_source_labels")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "user_fields"))

-- | Create a new 'IdentificationChallenge' with all required fields.
mkIdentificationChallenge ::
  -- | 'identificationChallengeFlowDesignation'
  FlowDesignationEnum ->
  -- | 'identificationChallengePasswordFields'
  GHC.Types.Bool ->
  -- | 'identificationChallengePrimaryAction'
  Data.Text.Internal.Text ->
  -- | 'identificationChallengeShowSourceLabels'
  GHC.Types.Bool ->
  -- | 'identificationChallengeUserFields'
  AuthentikAPI.Common.Nullable [Data.Text.Internal.Text] ->
  IdentificationChallenge
mkIdentificationChallenge identificationChallengeFlowDesignation identificationChallengePasswordFields identificationChallengePrimaryAction identificationChallengeShowSourceLabels identificationChallengeUserFields =
  IdentificationChallenge
    { identificationChallengeAllowShowPassword = GHC.Maybe.Nothing,
      identificationChallengeApplicationPre = GHC.Maybe.Nothing,
      identificationChallengeCaptchaStage = GHC.Maybe.Nothing,
      identificationChallengeComponent = GHC.Maybe.Nothing,
      identificationChallengeEnableRememberMe = GHC.Maybe.Nothing,
      identificationChallengeEnrollUrl = GHC.Maybe.Nothing,
      identificationChallengeFlowDesignation = identificationChallengeFlowDesignation,
      identificationChallengeFlowInfo = GHC.Maybe.Nothing,
      identificationChallengePasswordFields = identificationChallengePasswordFields,
      identificationChallengePasswordlessUrl = GHC.Maybe.Nothing,
      identificationChallengePrimaryAction = identificationChallengePrimaryAction,
      identificationChallengeRecoveryUrl = GHC.Maybe.Nothing,
      identificationChallengeResponseErrors = GHC.Maybe.Nothing,
      identificationChallengeShowSourceLabels = identificationChallengeShowSourceLabels,
      identificationChallengeSources = GHC.Maybe.Nothing,
      identificationChallengeUserFields = identificationChallengeUserFields
    }

-- | Defines the object schema located at @components.schemas.IdentificationChallenge.properties.captcha_stage.allOf@ in the specification.
data IdentificationChallengeCaptchaStage'NonNullable = IdentificationChallengeCaptchaStage'NonNullable
  { -- | component
    identificationChallengeCaptchaStage'NonNullableComponent :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | flow_info: Contextual flow information for a challenge
    identificationChallengeCaptchaStage'NonNullableFlowInfo :: (GHC.Maybe.Maybe ContextualFlowInfo),
    -- | interactive
    identificationChallengeCaptchaStage'NonNullableInteractive :: GHC.Types.Bool,
    -- | js_url
    identificationChallengeCaptchaStage'NonNullableJsUrl :: Data.Text.Internal.Text,
    -- | pending_user
    identificationChallengeCaptchaStage'NonNullablePendingUser :: Data.Text.Internal.Text,
    -- | pending_user_avatar
    identificationChallengeCaptchaStage'NonNullablePendingUserAvatar :: Data.Text.Internal.Text,
    -- | response_errors
    identificationChallengeCaptchaStage'NonNullableResponseErrors :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | site_key
    identificationChallengeCaptchaStage'NonNullableSiteKey :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IdentificationChallengeCaptchaStage'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("component" Data.Aeson.Types.ToJSON..=)) (identificationChallengeCaptchaStage'NonNullableComponent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_info" Data.Aeson.Types.ToJSON..=)) (identificationChallengeCaptchaStage'NonNullableFlowInfo obj) : ["interactive" Data.Aeson.Types.ToJSON..= identificationChallengeCaptchaStage'NonNullableInteractive obj] : ["js_url" Data.Aeson.Types.ToJSON..= identificationChallengeCaptchaStage'NonNullableJsUrl obj] : ["pending_user" Data.Aeson.Types.ToJSON..= identificationChallengeCaptchaStage'NonNullablePendingUser obj] : ["pending_user_avatar" Data.Aeson.Types.ToJSON..= identificationChallengeCaptchaStage'NonNullablePendingUserAvatar obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("response_errors" Data.Aeson.Types.ToJSON..=)) (identificationChallengeCaptchaStage'NonNullableResponseErrors obj) : ["site_key" Data.Aeson.Types.ToJSON..= identificationChallengeCaptchaStage'NonNullableSiteKey obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("component" Data.Aeson.Types.ToJSON..=)) (identificationChallengeCaptchaStage'NonNullableComponent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_info" Data.Aeson.Types.ToJSON..=)) (identificationChallengeCaptchaStage'NonNullableFlowInfo obj) : ["interactive" Data.Aeson.Types.ToJSON..= identificationChallengeCaptchaStage'NonNullableInteractive obj] : ["js_url" Data.Aeson.Types.ToJSON..= identificationChallengeCaptchaStage'NonNullableJsUrl obj] : ["pending_user" Data.Aeson.Types.ToJSON..= identificationChallengeCaptchaStage'NonNullablePendingUser obj] : ["pending_user_avatar" Data.Aeson.Types.ToJSON..= identificationChallengeCaptchaStage'NonNullablePendingUserAvatar obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("response_errors" Data.Aeson.Types.ToJSON..=)) (identificationChallengeCaptchaStage'NonNullableResponseErrors obj) : ["site_key" Data.Aeson.Types.ToJSON..= identificationChallengeCaptchaStage'NonNullableSiteKey obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON IdentificationChallengeCaptchaStage'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IdentificationChallengeCaptchaStage'NonNullable" (\obj -> (((((((GHC.Base.pure IdentificationChallengeCaptchaStage'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_info")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "interactive")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "js_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pending_user")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pending_user_avatar")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "response_errors")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "site_key"))

-- | Create a new 'IdentificationChallengeCaptchaStage'NonNullable' with all required fields.
mkIdentificationChallengeCaptchaStage'NonNullable ::
  -- | 'identificationChallengeCaptchaStage'NonNullableInteractive'
  GHC.Types.Bool ->
  -- | 'identificationChallengeCaptchaStage'NonNullableJsUrl'
  Data.Text.Internal.Text ->
  -- | 'identificationChallengeCaptchaStage'NonNullablePendingUser'
  Data.Text.Internal.Text ->
  -- | 'identificationChallengeCaptchaStage'NonNullablePendingUserAvatar'
  Data.Text.Internal.Text ->
  -- | 'identificationChallengeCaptchaStage'NonNullableSiteKey'
  Data.Text.Internal.Text ->
  IdentificationChallengeCaptchaStage'NonNullable
mkIdentificationChallengeCaptchaStage'NonNullable identificationChallengeCaptchaStage'NonNullableInteractive identificationChallengeCaptchaStage'NonNullableJsUrl identificationChallengeCaptchaStage'NonNullablePendingUser identificationChallengeCaptchaStage'NonNullablePendingUserAvatar identificationChallengeCaptchaStage'NonNullableSiteKey =
  IdentificationChallengeCaptchaStage'NonNullable
    { identificationChallengeCaptchaStage'NonNullableComponent = GHC.Maybe.Nothing,
      identificationChallengeCaptchaStage'NonNullableFlowInfo = GHC.Maybe.Nothing,
      identificationChallengeCaptchaStage'NonNullableInteractive = identificationChallengeCaptchaStage'NonNullableInteractive,
      identificationChallengeCaptchaStage'NonNullableJsUrl = identificationChallengeCaptchaStage'NonNullableJsUrl,
      identificationChallengeCaptchaStage'NonNullablePendingUser = identificationChallengeCaptchaStage'NonNullablePendingUser,
      identificationChallengeCaptchaStage'NonNullablePendingUserAvatar = identificationChallengeCaptchaStage'NonNullablePendingUserAvatar,
      identificationChallengeCaptchaStage'NonNullableResponseErrors = GHC.Maybe.Nothing,
      identificationChallengeCaptchaStage'NonNullableSiteKey = identificationChallengeCaptchaStage'NonNullableSiteKey
    }

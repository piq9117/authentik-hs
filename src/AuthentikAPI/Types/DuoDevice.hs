{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema DuoDevice
module AuthentikAPI.Types.DuoDevice where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.GroupMember
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.DuoDevice@ in the specification.
--
-- Serializer for Duo authenticator devices
data DuoDevice = DuoDevice
  { -- | name: The human-readable name of this device.
    --
    -- Constraints:
    --
    -- * Maximum length of 64
    duoDeviceName :: Data.Text.Internal.Text,
    -- | pk
    duoDevicePk :: GHC.Types.Int,
    -- | user
    duoDeviceUser :: DuoDeviceUser'
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DuoDevice where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["name" Data.Aeson.Types.ToJSON..= duoDeviceName obj] : ["pk" Data.Aeson.Types.ToJSON..= duoDevicePk obj] : ["user" Data.Aeson.Types.ToJSON..= duoDeviceUser obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["name" Data.Aeson.Types.ToJSON..= duoDeviceName obj] : ["pk" Data.Aeson.Types.ToJSON..= duoDevicePk obj] : ["user" Data.Aeson.Types.ToJSON..= duoDeviceUser obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON DuoDevice where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DuoDevice" (\obj -> ((GHC.Base.pure DuoDevice GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "user"))

-- | Create a new 'DuoDevice' with all required fields.
mkDuoDevice ::
  -- | 'duoDeviceName'
  Data.Text.Internal.Text ->
  -- | 'duoDevicePk'
  GHC.Types.Int ->
  -- | 'duoDeviceUser'
  DuoDeviceUser' ->
  DuoDevice
mkDuoDevice duoDeviceName duoDevicePk duoDeviceUser =
  DuoDevice
    { duoDeviceName = duoDeviceName,
      duoDevicePk = duoDevicePk,
      duoDeviceUser = duoDeviceUser
    }

-- | Defines the object schema located at @components.schemas.DuoDevice.properties.user.allOf@ in the specification.
data DuoDeviceUser' = DuoDeviceUser'
  { -- | attributes
    duoDeviceUser'Attributes :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | email
    --
    -- Constraints:
    --
    -- * Maximum length of 254
    duoDeviceUser'Email :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | is_active: Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
    duoDeviceUser'IsActive :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | last_login
    duoDeviceUser'LastLogin :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | name: User\'s display name.
    duoDeviceUser'Name :: Data.Text.Internal.Text,
    -- | pk
    duoDeviceUser'Pk :: GHC.Types.Int,
    -- | uid
    duoDeviceUser'Uid :: Data.Text.Internal.Text,
    -- | username: Required. 150 characters or fewer. Letters, digits and \@\/.\/+\/-\/_ only.
    --
    -- Constraints:
    --
    -- * Maximum length of 150
    -- * Must match pattern \'^[\\w.\@+-]+\$\'
    duoDeviceUser'Username :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DuoDeviceUser' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (duoDeviceUser'Attributes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (duoDeviceUser'Email obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_active" Data.Aeson.Types.ToJSON..=)) (duoDeviceUser'IsActive obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_login" Data.Aeson.Types.ToJSON..=)) (duoDeviceUser'LastLogin obj) : ["name" Data.Aeson.Types.ToJSON..= duoDeviceUser'Name obj] : ["pk" Data.Aeson.Types.ToJSON..= duoDeviceUser'Pk obj] : ["uid" Data.Aeson.Types.ToJSON..= duoDeviceUser'Uid obj] : ["username" Data.Aeson.Types.ToJSON..= duoDeviceUser'Username obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (duoDeviceUser'Attributes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (duoDeviceUser'Email obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_active" Data.Aeson.Types.ToJSON..=)) (duoDeviceUser'IsActive obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_login" Data.Aeson.Types.ToJSON..=)) (duoDeviceUser'LastLogin obj) : ["name" Data.Aeson.Types.ToJSON..= duoDeviceUser'Name obj] : ["pk" Data.Aeson.Types.ToJSON..= duoDeviceUser'Pk obj] : ["uid" Data.Aeson.Types.ToJSON..= duoDeviceUser'Uid obj] : ["username" Data.Aeson.Types.ToJSON..= duoDeviceUser'Username obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON DuoDeviceUser' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DuoDeviceUser'" (\obj -> (((((((GHC.Base.pure DuoDeviceUser' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "attributes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "is_active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "last_login")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "uid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "username"))

-- | Create a new 'DuoDeviceUser'' with all required fields.
mkDuoDeviceUser' ::
  -- | 'duoDeviceUser'Name'
  Data.Text.Internal.Text ->
  -- | 'duoDeviceUser'Pk'
  GHC.Types.Int ->
  -- | 'duoDeviceUser'Uid'
  Data.Text.Internal.Text ->
  -- | 'duoDeviceUser'Username'
  Data.Text.Internal.Text ->
  DuoDeviceUser'
mkDuoDeviceUser' duoDeviceUser'Name duoDeviceUser'Pk duoDeviceUser'Uid duoDeviceUser'Username =
  DuoDeviceUser'
    { duoDeviceUser'Attributes = GHC.Maybe.Nothing,
      duoDeviceUser'Email = GHC.Maybe.Nothing,
      duoDeviceUser'IsActive = GHC.Maybe.Nothing,
      duoDeviceUser'LastLogin = GHC.Maybe.Nothing,
      duoDeviceUser'Name = duoDeviceUser'Name,
      duoDeviceUser'Pk = duoDeviceUser'Pk,
      duoDeviceUser'Uid = duoDeviceUser'Uid,
      duoDeviceUser'Username = duoDeviceUser'Username
    }

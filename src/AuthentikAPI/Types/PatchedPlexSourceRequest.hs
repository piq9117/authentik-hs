{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PatchedPlexSourceRequest
module AuthentikAPI.Types.PatchedPlexSourceRequest where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.PolicyEngineMode
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.PatchedPlexSourceRequest@ in the specification.
--
-- Plex Source Serializer
data PatchedPlexSourceRequest = PatchedPlexSourceRequest
  { -- | allow_friends: Allow friends to authenticate, even if you don\'t share a server.
    patchedPlexSourceRequestAllowFriends :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | allowed_servers: Which servers a user has to be a member of to be granted access. Empty list allows every server.
    patchedPlexSourceRequestAllowedServers :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | authentication_flow: Flow to use when authenticating existing users.
    patchedPlexSourceRequestAuthenticationFlow :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | client_id: Client identifier used to talk to Plex.
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedPlexSourceRequestClientId :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | enabled
    patchedPlexSourceRequestEnabled :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | enrollment_flow: Flow to use when enrolling new users.
    patchedPlexSourceRequestEnrollmentFlow :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | group_matching_mode: How the source determines if an existing group should be used or a new group created.
    patchedPlexSourceRequestGroupMatchingMode :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | group_property_mappings
    patchedPlexSourceRequestGroupPropertyMappings :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | name: Source\'s display Name.
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedPlexSourceRequestName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | plex_token: Plex token used to check friends
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedPlexSourceRequestPlexToken :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | policy_engine_mode
    patchedPlexSourceRequestPolicyEngineMode :: (GHC.Maybe.Maybe PolicyEngineMode),
    -- | slug: Internal source name, used in URLs.
    --
    -- Constraints:
    --
    -- * Maximum length of 50
    -- * Minimum length of 1
    -- * Must match pattern \'^[-a-zA-Z0-9_]+\$\'
    patchedPlexSourceRequestSlug :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | user_matching_mode: How the source determines if an existing user should be authenticated or a new user enrolled.
    patchedPlexSourceRequestUserMatchingMode :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | user_path_template
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedPlexSourceRequestUserPathTemplate :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | user_property_mappings
    patchedPlexSourceRequestUserPropertyMappings :: (GHC.Maybe.Maybe [Data.Text.Internal.Text])
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PatchedPlexSourceRequest where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allow_friends" Data.Aeson.Types.ToJSON..=)) (patchedPlexSourceRequestAllowFriends obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allowed_servers" Data.Aeson.Types.ToJSON..=)) (patchedPlexSourceRequestAllowedServers obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication_flow" Data.Aeson.Types.ToJSON..=)) (patchedPlexSourceRequestAuthenticationFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("client_id" Data.Aeson.Types.ToJSON..=)) (patchedPlexSourceRequestClientId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enabled" Data.Aeson.Types.ToJSON..=)) (patchedPlexSourceRequestEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enrollment_flow" Data.Aeson.Types.ToJSON..=)) (patchedPlexSourceRequestEnrollmentFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("group_matching_mode" Data.Aeson.Types.ToJSON..=)) (patchedPlexSourceRequestGroupMatchingMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("group_property_mappings" Data.Aeson.Types.ToJSON..=)) (patchedPlexSourceRequestGroupPropertyMappings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (patchedPlexSourceRequestName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("plex_token" Data.Aeson.Types.ToJSON..=)) (patchedPlexSourceRequestPlexToken obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("policy_engine_mode" Data.Aeson.Types.ToJSON..=)) (patchedPlexSourceRequestPolicyEngineMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("slug" Data.Aeson.Types.ToJSON..=)) (patchedPlexSourceRequestSlug obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_matching_mode" Data.Aeson.Types.ToJSON..=)) (patchedPlexSourceRequestUserMatchingMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_path_template" Data.Aeson.Types.ToJSON..=)) (patchedPlexSourceRequestUserPathTemplate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_property_mappings" Data.Aeson.Types.ToJSON..=)) (patchedPlexSourceRequestUserPropertyMappings obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allow_friends" Data.Aeson.Types.ToJSON..=)) (patchedPlexSourceRequestAllowFriends obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allowed_servers" Data.Aeson.Types.ToJSON..=)) (patchedPlexSourceRequestAllowedServers obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication_flow" Data.Aeson.Types.ToJSON..=)) (patchedPlexSourceRequestAuthenticationFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("client_id" Data.Aeson.Types.ToJSON..=)) (patchedPlexSourceRequestClientId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enabled" Data.Aeson.Types.ToJSON..=)) (patchedPlexSourceRequestEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enrollment_flow" Data.Aeson.Types.ToJSON..=)) (patchedPlexSourceRequestEnrollmentFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("group_matching_mode" Data.Aeson.Types.ToJSON..=)) (patchedPlexSourceRequestGroupMatchingMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("group_property_mappings" Data.Aeson.Types.ToJSON..=)) (patchedPlexSourceRequestGroupPropertyMappings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (patchedPlexSourceRequestName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("plex_token" Data.Aeson.Types.ToJSON..=)) (patchedPlexSourceRequestPlexToken obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("policy_engine_mode" Data.Aeson.Types.ToJSON..=)) (patchedPlexSourceRequestPolicyEngineMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("slug" Data.Aeson.Types.ToJSON..=)) (patchedPlexSourceRequestSlug obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_matching_mode" Data.Aeson.Types.ToJSON..=)) (patchedPlexSourceRequestUserMatchingMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_path_template" Data.Aeson.Types.ToJSON..=)) (patchedPlexSourceRequestUserPathTemplate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_property_mappings" Data.Aeson.Types.ToJSON..=)) (patchedPlexSourceRequestUserPropertyMappings obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PatchedPlexSourceRequest where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchedPlexSourceRequest" (\obj -> ((((((((((((((GHC.Base.pure PatchedPlexSourceRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "allow_friends")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "allowed_servers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "authentication_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "client_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "enrollment_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "group_matching_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "group_property_mappings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "plex_token")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "policy_engine_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "slug")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "user_matching_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "user_path_template")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "user_property_mappings"))

-- | Create a new 'PatchedPlexSourceRequest' with all required fields.
mkPatchedPlexSourceRequest :: PatchedPlexSourceRequest
mkPatchedPlexSourceRequest =
  PatchedPlexSourceRequest
    { patchedPlexSourceRequestAllowFriends = GHC.Maybe.Nothing,
      patchedPlexSourceRequestAllowedServers = GHC.Maybe.Nothing,
      patchedPlexSourceRequestAuthenticationFlow = GHC.Maybe.Nothing,
      patchedPlexSourceRequestClientId = GHC.Maybe.Nothing,
      patchedPlexSourceRequestEnabled = GHC.Maybe.Nothing,
      patchedPlexSourceRequestEnrollmentFlow = GHC.Maybe.Nothing,
      patchedPlexSourceRequestGroupMatchingMode = GHC.Maybe.Nothing,
      patchedPlexSourceRequestGroupPropertyMappings = GHC.Maybe.Nothing,
      patchedPlexSourceRequestName = GHC.Maybe.Nothing,
      patchedPlexSourceRequestPlexToken = GHC.Maybe.Nothing,
      patchedPlexSourceRequestPolicyEngineMode = GHC.Maybe.Nothing,
      patchedPlexSourceRequestSlug = GHC.Maybe.Nothing,
      patchedPlexSourceRequestUserMatchingMode = GHC.Maybe.Nothing,
      patchedPlexSourceRequestUserPathTemplate = GHC.Maybe.Nothing,
      patchedPlexSourceRequestUserPropertyMappings = GHC.Maybe.Nothing
    }

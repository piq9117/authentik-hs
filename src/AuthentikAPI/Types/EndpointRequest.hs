{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema EndpointRequest
module AuthentikAPI.Types.EndpointRequest where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.AuthModeEnum
import {-# SOURCE #-} AuthentikAPI.Types.ProtocolEnum
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.EndpointRequest@ in the specification.
--
-- Endpoint Serializer
data EndpointRequest = EndpointRequest
  { -- | auth_mode
    endpointRequestAuthMode :: AuthModeEnum,
    -- | host
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    endpointRequestHost :: Data.Text.Internal.Text,
    -- | maximum_connections
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of -2.1474836e9
    endpointRequestMaximumConnections :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | name
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    endpointRequestName :: Data.Text.Internal.Text,
    -- | property_mappings
    endpointRequestPropertyMappings :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | protocol
    endpointRequestProtocol :: ProtocolEnum,
    -- | provider
    endpointRequestProvider :: GHC.Types.Int,
    -- | settings
    endpointRequestSettings :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON EndpointRequest where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["auth_mode" Data.Aeson.Types.ToJSON..= endpointRequestAuthMode obj] : ["host" Data.Aeson.Types.ToJSON..= endpointRequestHost obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("maximum_connections" Data.Aeson.Types.ToJSON..=)) (endpointRequestMaximumConnections obj) : ["name" Data.Aeson.Types.ToJSON..= endpointRequestName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings" Data.Aeson.Types.ToJSON..=)) (endpointRequestPropertyMappings obj) : ["protocol" Data.Aeson.Types.ToJSON..= endpointRequestProtocol obj] : ["provider" Data.Aeson.Types.ToJSON..= endpointRequestProvider obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("settings" Data.Aeson.Types.ToJSON..=)) (endpointRequestSettings obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["auth_mode" Data.Aeson.Types.ToJSON..= endpointRequestAuthMode obj] : ["host" Data.Aeson.Types.ToJSON..= endpointRequestHost obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("maximum_connections" Data.Aeson.Types.ToJSON..=)) (endpointRequestMaximumConnections obj) : ["name" Data.Aeson.Types.ToJSON..= endpointRequestName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings" Data.Aeson.Types.ToJSON..=)) (endpointRequestPropertyMappings obj) : ["protocol" Data.Aeson.Types.ToJSON..= endpointRequestProtocol obj] : ["provider" Data.Aeson.Types.ToJSON..= endpointRequestProvider obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("settings" Data.Aeson.Types.ToJSON..=)) (endpointRequestSettings obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON EndpointRequest where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "EndpointRequest" (\obj -> (((((((GHC.Base.pure EndpointRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "auth_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "host")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "maximum_connections")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "property_mappings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "protocol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "provider")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "settings"))

-- | Create a new 'EndpointRequest' with all required fields.
mkEndpointRequest ::
  -- | 'endpointRequestAuthMode'
  AuthModeEnum ->
  -- | 'endpointRequestHost'
  Data.Text.Internal.Text ->
  -- | 'endpointRequestName'
  Data.Text.Internal.Text ->
  -- | 'endpointRequestProtocol'
  ProtocolEnum ->
  -- | 'endpointRequestProvider'
  GHC.Types.Int ->
  EndpointRequest
mkEndpointRequest endpointRequestAuthMode endpointRequestHost endpointRequestName endpointRequestProtocol endpointRequestProvider =
  EndpointRequest
    { endpointRequestAuthMode = endpointRequestAuthMode,
      endpointRequestHost = endpointRequestHost,
      endpointRequestMaximumConnections = GHC.Maybe.Nothing,
      endpointRequestName = endpointRequestName,
      endpointRequestPropertyMappings = GHC.Maybe.Nothing,
      endpointRequestProtocol = endpointRequestProtocol,
      endpointRequestProvider = endpointRequestProvider,
      endpointRequestSettings = GHC.Maybe.Nothing
    }

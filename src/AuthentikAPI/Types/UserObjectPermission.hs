{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema UserObjectPermission
module AuthentikAPI.Types.UserObjectPermission where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.UserObjectPermission@ in the specification.
--
-- User-bound object level permission
data UserObjectPermission = UserObjectPermission
  { -- | app_label
    userObjectPermissionAppLabel :: Data.Text.Internal.Text,
    -- | codename
    userObjectPermissionCodename :: Data.Text.Internal.Text,
    -- | id
    userObjectPermissionId :: GHC.Types.Int,
    -- | model
    userObjectPermissionModel :: Data.Text.Internal.Text,
    -- | name
    userObjectPermissionName :: Data.Text.Internal.Text,
    -- | object_pk
    userObjectPermissionObjectPk :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON UserObjectPermission where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["app_label" Data.Aeson.Types.ToJSON..= userObjectPermissionAppLabel obj] : ["codename" Data.Aeson.Types.ToJSON..= userObjectPermissionCodename obj] : ["id" Data.Aeson.Types.ToJSON..= userObjectPermissionId obj] : ["model" Data.Aeson.Types.ToJSON..= userObjectPermissionModel obj] : ["name" Data.Aeson.Types.ToJSON..= userObjectPermissionName obj] : ["object_pk" Data.Aeson.Types.ToJSON..= userObjectPermissionObjectPk obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["app_label" Data.Aeson.Types.ToJSON..= userObjectPermissionAppLabel obj] : ["codename" Data.Aeson.Types.ToJSON..= userObjectPermissionCodename obj] : ["id" Data.Aeson.Types.ToJSON..= userObjectPermissionId obj] : ["model" Data.Aeson.Types.ToJSON..= userObjectPermissionModel obj] : ["name" Data.Aeson.Types.ToJSON..= userObjectPermissionName obj] : ["object_pk" Data.Aeson.Types.ToJSON..= userObjectPermissionObjectPk obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON UserObjectPermission where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "UserObjectPermission" (\obj -> (((((GHC.Base.pure UserObjectPermission GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "app_label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "codename")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "model")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object_pk"))

-- | Create a new 'UserObjectPermission' with all required fields.
mkUserObjectPermission ::
  -- | 'userObjectPermissionAppLabel'
  Data.Text.Internal.Text ->
  -- | 'userObjectPermissionCodename'
  Data.Text.Internal.Text ->
  -- | 'userObjectPermissionId'
  GHC.Types.Int ->
  -- | 'userObjectPermissionModel'
  Data.Text.Internal.Text ->
  -- | 'userObjectPermissionName'
  Data.Text.Internal.Text ->
  -- | 'userObjectPermissionObjectPk'
  Data.Text.Internal.Text ->
  UserObjectPermission
mkUserObjectPermission userObjectPermissionAppLabel userObjectPermissionCodename userObjectPermissionId userObjectPermissionModel userObjectPermissionName userObjectPermissionObjectPk =
  UserObjectPermission
    { userObjectPermissionAppLabel = userObjectPermissionAppLabel,
      userObjectPermissionCodename = userObjectPermissionCodename,
      userObjectPermissionId = userObjectPermissionId,
      userObjectPermissionModel = userObjectPermissionModel,
      userObjectPermissionName = userObjectPermissionName,
      userObjectPermissionObjectPk = userObjectPermissionObjectPk
    }

{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Permission
module AuthentikAPI.Types.Permission where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.Permission@ in the specification.
--
-- Global permission
data Permission = Permission
  { -- | app_label
    permissionAppLabel :: Data.Text.Internal.Text,
    -- | app_label_verbose: Human-readable app label
    permissionAppLabelVerbose :: Data.Text.Internal.Text,
    -- | codename
    --
    -- Constraints:
    --
    -- * Maximum length of 100
    permissionCodename :: Data.Text.Internal.Text,
    -- | id
    permissionId :: GHC.Types.Int,
    -- | model
    permissionModel :: Data.Text.Internal.Text,
    -- | model_verbose: Human-readable model name
    permissionModelVerbose :: Data.Text.Internal.Text,
    -- | name
    --
    -- Constraints:
    --
    -- * Maximum length of 255
    permissionName :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Permission where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["app_label" Data.Aeson.Types.ToJSON..= permissionAppLabel obj] : ["app_label_verbose" Data.Aeson.Types.ToJSON..= permissionAppLabelVerbose obj] : ["codename" Data.Aeson.Types.ToJSON..= permissionCodename obj] : ["id" Data.Aeson.Types.ToJSON..= permissionId obj] : ["model" Data.Aeson.Types.ToJSON..= permissionModel obj] : ["model_verbose" Data.Aeson.Types.ToJSON..= permissionModelVerbose obj] : ["name" Data.Aeson.Types.ToJSON..= permissionName obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["app_label" Data.Aeson.Types.ToJSON..= permissionAppLabel obj] : ["app_label_verbose" Data.Aeson.Types.ToJSON..= permissionAppLabelVerbose obj] : ["codename" Data.Aeson.Types.ToJSON..= permissionCodename obj] : ["id" Data.Aeson.Types.ToJSON..= permissionId obj] : ["model" Data.Aeson.Types.ToJSON..= permissionModel obj] : ["model_verbose" Data.Aeson.Types.ToJSON..= permissionModelVerbose obj] : ["name" Data.Aeson.Types.ToJSON..= permissionName obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Permission where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Permission" (\obj -> ((((((GHC.Base.pure Permission GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "app_label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "app_label_verbose")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "codename")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "model")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "model_verbose")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name"))

-- | Create a new 'Permission' with all required fields.
mkPermission ::
  -- | 'permissionAppLabel'
  Data.Text.Internal.Text ->
  -- | 'permissionAppLabelVerbose'
  Data.Text.Internal.Text ->
  -- | 'permissionCodename'
  Data.Text.Internal.Text ->
  -- | 'permissionId'
  GHC.Types.Int ->
  -- | 'permissionModel'
  Data.Text.Internal.Text ->
  -- | 'permissionModelVerbose'
  Data.Text.Internal.Text ->
  -- | 'permissionName'
  Data.Text.Internal.Text ->
  Permission
mkPermission permissionAppLabel permissionAppLabelVerbose permissionCodename permissionId permissionModel permissionModelVerbose permissionName =
  Permission
    { permissionAppLabel = permissionAppLabel,
      permissionAppLabelVerbose = permissionAppLabelVerbose,
      permissionCodename = permissionCodename,
      permissionId = permissionId,
      permissionModel = permissionModel,
      permissionModelVerbose = permissionModelVerbose,
      permissionName = permissionName
    }

{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PatchedSCIMProviderRequest
module AuthentikAPI.Types.PatchedSCIMProviderRequest where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.PatchedSCIMProviderRequest@ in the specification.
--
-- SCIMProvider Serializer
data PatchedSCIMProviderRequest = PatchedSCIMProviderRequest
  { -- | compatibility_mode: Alter authentik behavior for vendor-specific SCIM implementations.
    patchedSCIMProviderRequestCompatibilityMode :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | dry_run: When enabled, provider will not modify or create objects in the remote system.
    patchedSCIMProviderRequestDryRun :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | exclude_users_service_account
    patchedSCIMProviderRequestExcludeUsersServiceAccount :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | filter_group
    patchedSCIMProviderRequestFilterGroup :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | name
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedSCIMProviderRequestName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | property_mappings
    patchedSCIMProviderRequestPropertyMappings :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | property_mappings_group: Property mappings used for group creation\/updating.
    patchedSCIMProviderRequestPropertyMappingsGroup :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | token: Authentication token
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedSCIMProviderRequestToken :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | url: Base URL to SCIM requests, usually ends in \/v2
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedSCIMProviderRequestUrl :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | verify_certificates
    patchedSCIMProviderRequestVerifyCertificates :: (GHC.Maybe.Maybe GHC.Types.Bool)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PatchedSCIMProviderRequest where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("compatibility_mode" Data.Aeson.Types.ToJSON..=)) (patchedSCIMProviderRequestCompatibilityMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dry_run" Data.Aeson.Types.ToJSON..=)) (patchedSCIMProviderRequestDryRun obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exclude_users_service_account" Data.Aeson.Types.ToJSON..=)) (patchedSCIMProviderRequestExcludeUsersServiceAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("filter_group" Data.Aeson.Types.ToJSON..=)) (patchedSCIMProviderRequestFilterGroup obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (patchedSCIMProviderRequestName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings" Data.Aeson.Types.ToJSON..=)) (patchedSCIMProviderRequestPropertyMappings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings_group" Data.Aeson.Types.ToJSON..=)) (patchedSCIMProviderRequestPropertyMappingsGroup obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("token" Data.Aeson.Types.ToJSON..=)) (patchedSCIMProviderRequestToken obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("url" Data.Aeson.Types.ToJSON..=)) (patchedSCIMProviderRequestUrl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verify_certificates" Data.Aeson.Types.ToJSON..=)) (patchedSCIMProviderRequestVerifyCertificates obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("compatibility_mode" Data.Aeson.Types.ToJSON..=)) (patchedSCIMProviderRequestCompatibilityMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dry_run" Data.Aeson.Types.ToJSON..=)) (patchedSCIMProviderRequestDryRun obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exclude_users_service_account" Data.Aeson.Types.ToJSON..=)) (patchedSCIMProviderRequestExcludeUsersServiceAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("filter_group" Data.Aeson.Types.ToJSON..=)) (patchedSCIMProviderRequestFilterGroup obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (patchedSCIMProviderRequestName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings" Data.Aeson.Types.ToJSON..=)) (patchedSCIMProviderRequestPropertyMappings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings_group" Data.Aeson.Types.ToJSON..=)) (patchedSCIMProviderRequestPropertyMappingsGroup obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("token" Data.Aeson.Types.ToJSON..=)) (patchedSCIMProviderRequestToken obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("url" Data.Aeson.Types.ToJSON..=)) (patchedSCIMProviderRequestUrl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verify_certificates" Data.Aeson.Types.ToJSON..=)) (patchedSCIMProviderRequestVerifyCertificates obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PatchedSCIMProviderRequest where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchedSCIMProviderRequest" (\obj -> (((((((((GHC.Base.pure PatchedSCIMProviderRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "compatibility_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "dry_run")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "exclude_users_service_account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "filter_group")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "property_mappings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "property_mappings_group")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "token")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verify_certificates"))

-- | Create a new 'PatchedSCIMProviderRequest' with all required fields.
mkPatchedSCIMProviderRequest :: PatchedSCIMProviderRequest
mkPatchedSCIMProviderRequest =
  PatchedSCIMProviderRequest
    { patchedSCIMProviderRequestCompatibilityMode = GHC.Maybe.Nothing,
      patchedSCIMProviderRequestDryRun = GHC.Maybe.Nothing,
      patchedSCIMProviderRequestExcludeUsersServiceAccount = GHC.Maybe.Nothing,
      patchedSCIMProviderRequestFilterGroup = GHC.Maybe.Nothing,
      patchedSCIMProviderRequestName = GHC.Maybe.Nothing,
      patchedSCIMProviderRequestPropertyMappings = GHC.Maybe.Nothing,
      patchedSCIMProviderRequestPropertyMappingsGroup = GHC.Maybe.Nothing,
      patchedSCIMProviderRequestToken = GHC.Maybe.Nothing,
      patchedSCIMProviderRequestUrl = GHC.Maybe.Nothing,
      patchedSCIMProviderRequestVerifyCertificates = GHC.Maybe.Nothing
    }

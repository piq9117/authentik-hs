{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema TOTPDevice
module AuthentikAPI.Types.TOTPDevice where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.GroupMember
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.TOTPDevice@ in the specification.
--
-- Serializer for totp authenticator devices
data TOTPDevice = TOTPDevice
  { -- | name: The human-readable name of this device.
    --
    -- Constraints:
    --
    -- * Maximum length of 64
    tOTPDeviceName :: Data.Text.Internal.Text,
    -- | pk
    tOTPDevicePk :: GHC.Types.Int,
    -- | user
    tOTPDeviceUser :: TOTPDeviceUser'
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON TOTPDevice where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["name" Data.Aeson.Types.ToJSON..= tOTPDeviceName obj] : ["pk" Data.Aeson.Types.ToJSON..= tOTPDevicePk obj] : ["user" Data.Aeson.Types.ToJSON..= tOTPDeviceUser obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["name" Data.Aeson.Types.ToJSON..= tOTPDeviceName obj] : ["pk" Data.Aeson.Types.ToJSON..= tOTPDevicePk obj] : ["user" Data.Aeson.Types.ToJSON..= tOTPDeviceUser obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON TOTPDevice where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "TOTPDevice" (\obj -> ((GHC.Base.pure TOTPDevice GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "user"))

-- | Create a new 'TOTPDevice' with all required fields.
mkTOTPDevice ::
  -- | 'tOTPDeviceName'
  Data.Text.Internal.Text ->
  -- | 'tOTPDevicePk'
  GHC.Types.Int ->
  -- | 'tOTPDeviceUser'
  TOTPDeviceUser' ->
  TOTPDevice
mkTOTPDevice tOTPDeviceName tOTPDevicePk tOTPDeviceUser =
  TOTPDevice
    { tOTPDeviceName = tOTPDeviceName,
      tOTPDevicePk = tOTPDevicePk,
      tOTPDeviceUser = tOTPDeviceUser
    }

-- | Defines the object schema located at @components.schemas.TOTPDevice.properties.user.allOf@ in the specification.
data TOTPDeviceUser' = TOTPDeviceUser'
  { -- | attributes
    tOTPDeviceUser'Attributes :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | email
    --
    -- Constraints:
    --
    -- * Maximum length of 254
    tOTPDeviceUser'Email :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | is_active: Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
    tOTPDeviceUser'IsActive :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | last_login
    tOTPDeviceUser'LastLogin :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | name: User\'s display name.
    tOTPDeviceUser'Name :: Data.Text.Internal.Text,
    -- | pk
    tOTPDeviceUser'Pk :: GHC.Types.Int,
    -- | uid
    tOTPDeviceUser'Uid :: Data.Text.Internal.Text,
    -- | username: Required. 150 characters or fewer. Letters, digits and \@\/.\/+\/-\/_ only.
    --
    -- Constraints:
    --
    -- * Maximum length of 150
    -- * Must match pattern \'^[\\w.\@+-]+\$\'
    tOTPDeviceUser'Username :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON TOTPDeviceUser' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (tOTPDeviceUser'Attributes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (tOTPDeviceUser'Email obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_active" Data.Aeson.Types.ToJSON..=)) (tOTPDeviceUser'IsActive obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_login" Data.Aeson.Types.ToJSON..=)) (tOTPDeviceUser'LastLogin obj) : ["name" Data.Aeson.Types.ToJSON..= tOTPDeviceUser'Name obj] : ["pk" Data.Aeson.Types.ToJSON..= tOTPDeviceUser'Pk obj] : ["uid" Data.Aeson.Types.ToJSON..= tOTPDeviceUser'Uid obj] : ["username" Data.Aeson.Types.ToJSON..= tOTPDeviceUser'Username obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (tOTPDeviceUser'Attributes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (tOTPDeviceUser'Email obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_active" Data.Aeson.Types.ToJSON..=)) (tOTPDeviceUser'IsActive obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_login" Data.Aeson.Types.ToJSON..=)) (tOTPDeviceUser'LastLogin obj) : ["name" Data.Aeson.Types.ToJSON..= tOTPDeviceUser'Name obj] : ["pk" Data.Aeson.Types.ToJSON..= tOTPDeviceUser'Pk obj] : ["uid" Data.Aeson.Types.ToJSON..= tOTPDeviceUser'Uid obj] : ["username" Data.Aeson.Types.ToJSON..= tOTPDeviceUser'Username obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON TOTPDeviceUser' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "TOTPDeviceUser'" (\obj -> (((((((GHC.Base.pure TOTPDeviceUser' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "attributes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "is_active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "last_login")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "uid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "username"))

-- | Create a new 'TOTPDeviceUser'' with all required fields.
mkTOTPDeviceUser' ::
  -- | 'tOTPDeviceUser'Name'
  Data.Text.Internal.Text ->
  -- | 'tOTPDeviceUser'Pk'
  GHC.Types.Int ->
  -- | 'tOTPDeviceUser'Uid'
  Data.Text.Internal.Text ->
  -- | 'tOTPDeviceUser'Username'
  Data.Text.Internal.Text ->
  TOTPDeviceUser'
mkTOTPDeviceUser' tOTPDeviceUser'Name tOTPDeviceUser'Pk tOTPDeviceUser'Uid tOTPDeviceUser'Username =
  TOTPDeviceUser'
    { tOTPDeviceUser'Attributes = GHC.Maybe.Nothing,
      tOTPDeviceUser'Email = GHC.Maybe.Nothing,
      tOTPDeviceUser'IsActive = GHC.Maybe.Nothing,
      tOTPDeviceUser'LastLogin = GHC.Maybe.Nothing,
      tOTPDeviceUser'Name = tOTPDeviceUser'Name,
      tOTPDeviceUser'Pk = tOTPDeviceUser'Pk,
      tOTPDeviceUser'Uid = tOTPDeviceUser'Uid,
      tOTPDeviceUser'Username = tOTPDeviceUser'Username
    }

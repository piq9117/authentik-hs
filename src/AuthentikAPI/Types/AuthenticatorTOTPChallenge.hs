{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema AuthenticatorTOTPChallenge
module AuthentikAPI.Types.AuthenticatorTOTPChallenge where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.ContextualFlowInfo
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.AuthenticatorTOTPChallenge@ in the specification.
--
-- TOTP Setup challenge
data AuthenticatorTOTPChallenge = AuthenticatorTOTPChallenge
  { -- | component
    authenticatorTOTPChallengeComponent :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | config_url
    authenticatorTOTPChallengeConfigUrl :: Data.Text.Internal.Text,
    -- | flow_info: Contextual flow information for a challenge
    authenticatorTOTPChallengeFlowInfo :: (GHC.Maybe.Maybe ContextualFlowInfo),
    -- | pending_user
    authenticatorTOTPChallengePendingUser :: Data.Text.Internal.Text,
    -- | pending_user_avatar
    authenticatorTOTPChallengePendingUserAvatar :: Data.Text.Internal.Text,
    -- | response_errors
    authenticatorTOTPChallengeResponseErrors :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON AuthenticatorTOTPChallenge where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("component" Data.Aeson.Types.ToJSON..=)) (authenticatorTOTPChallengeComponent obj) : ["config_url" Data.Aeson.Types.ToJSON..= authenticatorTOTPChallengeConfigUrl obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_info" Data.Aeson.Types.ToJSON..=)) (authenticatorTOTPChallengeFlowInfo obj) : ["pending_user" Data.Aeson.Types.ToJSON..= authenticatorTOTPChallengePendingUser obj] : ["pending_user_avatar" Data.Aeson.Types.ToJSON..= authenticatorTOTPChallengePendingUserAvatar obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("response_errors" Data.Aeson.Types.ToJSON..=)) (authenticatorTOTPChallengeResponseErrors obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("component" Data.Aeson.Types.ToJSON..=)) (authenticatorTOTPChallengeComponent obj) : ["config_url" Data.Aeson.Types.ToJSON..= authenticatorTOTPChallengeConfigUrl obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_info" Data.Aeson.Types.ToJSON..=)) (authenticatorTOTPChallengeFlowInfo obj) : ["pending_user" Data.Aeson.Types.ToJSON..= authenticatorTOTPChallengePendingUser obj] : ["pending_user_avatar" Data.Aeson.Types.ToJSON..= authenticatorTOTPChallengePendingUserAvatar obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("response_errors" Data.Aeson.Types.ToJSON..=)) (authenticatorTOTPChallengeResponseErrors obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON AuthenticatorTOTPChallenge where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "AuthenticatorTOTPChallenge" (\obj -> (((((GHC.Base.pure AuthenticatorTOTPChallenge GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "config_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_info")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pending_user")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pending_user_avatar")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "response_errors"))

-- | Create a new 'AuthenticatorTOTPChallenge' with all required fields.
mkAuthenticatorTOTPChallenge ::
  -- | 'authenticatorTOTPChallengeConfigUrl'
  Data.Text.Internal.Text ->
  -- | 'authenticatorTOTPChallengePendingUser'
  Data.Text.Internal.Text ->
  -- | 'authenticatorTOTPChallengePendingUserAvatar'
  Data.Text.Internal.Text ->
  AuthenticatorTOTPChallenge
mkAuthenticatorTOTPChallenge authenticatorTOTPChallengeConfigUrl authenticatorTOTPChallengePendingUser authenticatorTOTPChallengePendingUserAvatar =
  AuthenticatorTOTPChallenge
    { authenticatorTOTPChallengeComponent = GHC.Maybe.Nothing,
      authenticatorTOTPChallengeConfigUrl = authenticatorTOTPChallengeConfigUrl,
      authenticatorTOTPChallengeFlowInfo = GHC.Maybe.Nothing,
      authenticatorTOTPChallengePendingUser = authenticatorTOTPChallengePendingUser,
      authenticatorTOTPChallengePendingUserAvatar = authenticatorTOTPChallengePendingUserAvatar,
      authenticatorTOTPChallengeResponseErrors = GHC.Maybe.Nothing
    }

{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema LicenseSummary
module AuthentikAPI.Types.LicenseSummary where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.LicenseFlagsEnum
import {-# SOURCE #-} AuthentikAPI.Types.LicenseSummaryStatusEnum
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.LicenseSummary@ in the specification.
--
-- Serializer for license status
data LicenseSummary = LicenseSummary
  { -- | external_users
    licenseSummaryExternalUsers :: GHC.Types.Int,
    -- | internal_users
    licenseSummaryInternalUsers :: GHC.Types.Int,
    -- | latest_valid
    licenseSummaryLatestValid :: Data.Text.Internal.Text,
    -- | license_flags
    licenseSummaryLicenseFlags :: [LicenseFlagsEnum],
    -- | status
    licenseSummaryStatus :: LicenseSummaryStatusEnum
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON LicenseSummary where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["external_users" Data.Aeson.Types.ToJSON..= licenseSummaryExternalUsers obj] : ["internal_users" Data.Aeson.Types.ToJSON..= licenseSummaryInternalUsers obj] : ["latest_valid" Data.Aeson.Types.ToJSON..= licenseSummaryLatestValid obj] : ["license_flags" Data.Aeson.Types.ToJSON..= licenseSummaryLicenseFlags obj] : ["status" Data.Aeson.Types.ToJSON..= licenseSummaryStatus obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["external_users" Data.Aeson.Types.ToJSON..= licenseSummaryExternalUsers obj] : ["internal_users" Data.Aeson.Types.ToJSON..= licenseSummaryInternalUsers obj] : ["latest_valid" Data.Aeson.Types.ToJSON..= licenseSummaryLatestValid obj] : ["license_flags" Data.Aeson.Types.ToJSON..= licenseSummaryLicenseFlags obj] : ["status" Data.Aeson.Types.ToJSON..= licenseSummaryStatus obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON LicenseSummary where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "LicenseSummary" (\obj -> ((((GHC.Base.pure LicenseSummary GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "external_users")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "internal_users")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "latest_valid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "license_flags")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))

-- | Create a new 'LicenseSummary' with all required fields.
mkLicenseSummary ::
  -- | 'licenseSummaryExternalUsers'
  GHC.Types.Int ->
  -- | 'licenseSummaryInternalUsers'
  GHC.Types.Int ->
  -- | 'licenseSummaryLatestValid'
  Data.Text.Internal.Text ->
  -- | 'licenseSummaryLicenseFlags'
  [LicenseFlagsEnum] ->
  -- | 'licenseSummaryStatus'
  LicenseSummaryStatusEnum ->
  LicenseSummary
mkLicenseSummary licenseSummaryExternalUsers licenseSummaryInternalUsers licenseSummaryLatestValid licenseSummaryLicenseFlags licenseSummaryStatus =
  LicenseSummary
    { licenseSummaryExternalUsers = licenseSummaryExternalUsers,
      licenseSummaryInternalUsers = licenseSummaryInternalUsers,
      licenseSummaryLatestValid = licenseSummaryLatestValid,
      licenseSummaryLicenseFlags = licenseSummaryLicenseFlags,
      licenseSummaryStatus = licenseSummaryStatus
    }

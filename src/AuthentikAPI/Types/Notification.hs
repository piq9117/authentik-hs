{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Notification
module AuthentikAPI.Types.Notification where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.Event
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.Notification@ in the specification.
--
-- Notification Serializer
data Notification = Notification
  { -- | body
    notificationBody :: Data.Text.Internal.Text,
    -- | created
    notificationCreated :: Data.Text.Internal.Text,
    -- | event: Event Serializer
    notificationEvent :: (GHC.Maybe.Maybe Event),
    -- | pk
    notificationPk :: Data.Text.Internal.Text,
    -- | seen
    notificationSeen :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | severity
    notificationSeverity :: Data.Aeson.Types.Internal.Object
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Notification where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["body" Data.Aeson.Types.ToJSON..= notificationBody obj] : ["created" Data.Aeson.Types.ToJSON..= notificationCreated obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("event" Data.Aeson.Types.ToJSON..=)) (notificationEvent obj) : ["pk" Data.Aeson.Types.ToJSON..= notificationPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("seen" Data.Aeson.Types.ToJSON..=)) (notificationSeen obj) : ["severity" Data.Aeson.Types.ToJSON..= notificationSeverity obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["body" Data.Aeson.Types.ToJSON..= notificationBody obj] : ["created" Data.Aeson.Types.ToJSON..= notificationCreated obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("event" Data.Aeson.Types.ToJSON..=)) (notificationEvent obj) : ["pk" Data.Aeson.Types.ToJSON..= notificationPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("seen" Data.Aeson.Types.ToJSON..=)) (notificationSeen obj) : ["severity" Data.Aeson.Types.ToJSON..= notificationSeverity obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Notification where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Notification" (\obj -> (((((GHC.Base.pure Notification GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "body")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "event")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "seen")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "severity"))

-- | Create a new 'Notification' with all required fields.
mkNotification ::
  -- | 'notificationBody'
  Data.Text.Internal.Text ->
  -- | 'notificationCreated'
  Data.Text.Internal.Text ->
  -- | 'notificationPk'
  Data.Text.Internal.Text ->
  -- | 'notificationSeverity'
  Data.Aeson.Types.Internal.Object ->
  Notification
mkNotification notificationBody notificationCreated notificationPk notificationSeverity =
  Notification
    { notificationBody = notificationBody,
      notificationCreated = notificationCreated,
      notificationEvent = GHC.Maybe.Nothing,
      notificationPk = notificationPk,
      notificationSeen = GHC.Maybe.Nothing,
      notificationSeverity = notificationSeverity
    }

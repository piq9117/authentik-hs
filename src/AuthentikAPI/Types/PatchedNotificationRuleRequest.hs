{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PatchedNotificationRuleRequest
module AuthentikAPI.Types.PatchedNotificationRuleRequest where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.PatchedNotificationRuleRequest@ in the specification.
--
-- NotificationRule Serializer
data PatchedNotificationRuleRequest = PatchedNotificationRuleRequest
  { -- | group: Define which group of users this notification should be sent and shown to. If left empty, Notification won\'t ben sent.
    patchedNotificationRuleRequestGroup :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | name
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedNotificationRuleRequestName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | severity: Controls which severity level the created notifications will have.
    patchedNotificationRuleRequestSeverity :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | transports: Select which transports should be used to notify the user. If none are selected, the notification will only be shown in the authentik UI.
    patchedNotificationRuleRequestTransports :: (GHC.Maybe.Maybe [Data.Text.Internal.Text])
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PatchedNotificationRuleRequest where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("group" Data.Aeson.Types.ToJSON..=)) (patchedNotificationRuleRequestGroup obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (patchedNotificationRuleRequestName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("severity" Data.Aeson.Types.ToJSON..=)) (patchedNotificationRuleRequestSeverity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transports" Data.Aeson.Types.ToJSON..=)) (patchedNotificationRuleRequestTransports obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("group" Data.Aeson.Types.ToJSON..=)) (patchedNotificationRuleRequestGroup obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (patchedNotificationRuleRequestName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("severity" Data.Aeson.Types.ToJSON..=)) (patchedNotificationRuleRequestSeverity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transports" Data.Aeson.Types.ToJSON..=)) (patchedNotificationRuleRequestTransports obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PatchedNotificationRuleRequest where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchedNotificationRuleRequest" (\obj -> (((GHC.Base.pure PatchedNotificationRuleRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "group")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "severity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "transports"))

-- | Create a new 'PatchedNotificationRuleRequest' with all required fields.
mkPatchedNotificationRuleRequest :: PatchedNotificationRuleRequest
mkPatchedNotificationRuleRequest =
  PatchedNotificationRuleRequest
    { patchedNotificationRuleRequestGroup = GHC.Maybe.Nothing,
      patchedNotificationRuleRequestName = GHC.Maybe.Nothing,
      patchedNotificationRuleRequestSeverity = GHC.Maybe.Nothing,
      patchedNotificationRuleRequestTransports = GHC.Maybe.Nothing
    }

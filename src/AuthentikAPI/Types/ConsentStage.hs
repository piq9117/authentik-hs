{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema ConsentStage
module AuthentikAPI.Types.ConsentStage where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.ConsentStageModeEnum
import {-# SOURCE #-} AuthentikAPI.Types.FlowSet
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.ConsentStage@ in the specification.
--
-- ConsentStage Serializer
data ConsentStage = ConsentStage
  { -- | component: Get object type so that we know how to edit the object
    consentStageComponent :: Data.Text.Internal.Text,
    -- | consent_expire_in: Offset after which consent expires. (Format: hours=1;minutes=2;seconds=3).
    consentStageConsentExpireIn :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | flow_set
    consentStageFlowSet :: (GHC.Maybe.Maybe [FlowSet]),
    -- | meta_model_name: Return internal model name
    consentStageMetaModelName :: Data.Text.Internal.Text,
    -- | mode
    consentStageMode :: (GHC.Maybe.Maybe ConsentStageModeEnum),
    -- | name
    consentStageName :: Data.Text.Internal.Text,
    -- | pk
    consentStagePk :: Data.Text.Internal.Text,
    -- | verbose_name: Return object\'s verbose_name
    consentStageVerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    consentStageVerboseNamePlural :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON ConsentStage where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["component" Data.Aeson.Types.ToJSON..= consentStageComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("consent_expire_in" Data.Aeson.Types.ToJSON..=)) (consentStageConsentExpireIn obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_set" Data.Aeson.Types.ToJSON..=)) (consentStageFlowSet obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= consentStageMetaModelName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mode" Data.Aeson.Types.ToJSON..=)) (consentStageMode obj) : ["name" Data.Aeson.Types.ToJSON..= consentStageName obj] : ["pk" Data.Aeson.Types.ToJSON..= consentStagePk obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= consentStageVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= consentStageVerboseNamePlural obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["component" Data.Aeson.Types.ToJSON..= consentStageComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("consent_expire_in" Data.Aeson.Types.ToJSON..=)) (consentStageConsentExpireIn obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_set" Data.Aeson.Types.ToJSON..=)) (consentStageFlowSet obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= consentStageMetaModelName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mode" Data.Aeson.Types.ToJSON..=)) (consentStageMode obj) : ["name" Data.Aeson.Types.ToJSON..= consentStageName obj] : ["pk" Data.Aeson.Types.ToJSON..= consentStagePk obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= consentStageVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= consentStageVerboseNamePlural obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON ConsentStage where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "ConsentStage" (\obj -> ((((((((GHC.Base.pure ConsentStage GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "consent_expire_in")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_set")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural"))

-- | Create a new 'ConsentStage' with all required fields.
mkConsentStage ::
  -- | 'consentStageComponent'
  Data.Text.Internal.Text ->
  -- | 'consentStageMetaModelName'
  Data.Text.Internal.Text ->
  -- | 'consentStageName'
  Data.Text.Internal.Text ->
  -- | 'consentStagePk'
  Data.Text.Internal.Text ->
  -- | 'consentStageVerboseName'
  Data.Text.Internal.Text ->
  -- | 'consentStageVerboseNamePlural'
  Data.Text.Internal.Text ->
  ConsentStage
mkConsentStage consentStageComponent consentStageMetaModelName consentStageName consentStagePk consentStageVerboseName consentStageVerboseNamePlural =
  ConsentStage
    { consentStageComponent = consentStageComponent,
      consentStageConsentExpireIn = GHC.Maybe.Nothing,
      consentStageFlowSet = GHC.Maybe.Nothing,
      consentStageMetaModelName = consentStageMetaModelName,
      consentStageMode = GHC.Maybe.Nothing,
      consentStageName = consentStageName,
      consentStagePk = consentStagePk,
      consentStageVerboseName = consentStageVerboseName,
      consentStageVerboseNamePlural = consentStageVerboseNamePlural
    }

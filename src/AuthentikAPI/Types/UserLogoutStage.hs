{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema UserLogoutStage
module AuthentikAPI.Types.UserLogoutStage where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.FlowSet
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.UserLogoutStage@ in the specification.
--
-- UserLogoutStage Serializer
data UserLogoutStage = UserLogoutStage
  { -- | component: Get object type so that we know how to edit the object
    userLogoutStageComponent :: Data.Text.Internal.Text,
    -- | flow_set
    userLogoutStageFlowSet :: (GHC.Maybe.Maybe [FlowSet]),
    -- | meta_model_name: Return internal model name
    userLogoutStageMetaModelName :: Data.Text.Internal.Text,
    -- | name
    userLogoutStageName :: Data.Text.Internal.Text,
    -- | pk
    userLogoutStagePk :: Data.Text.Internal.Text,
    -- | verbose_name: Return object\'s verbose_name
    userLogoutStageVerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    userLogoutStageVerboseNamePlural :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON UserLogoutStage where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["component" Data.Aeson.Types.ToJSON..= userLogoutStageComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_set" Data.Aeson.Types.ToJSON..=)) (userLogoutStageFlowSet obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= userLogoutStageMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= userLogoutStageName obj] : ["pk" Data.Aeson.Types.ToJSON..= userLogoutStagePk obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= userLogoutStageVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= userLogoutStageVerboseNamePlural obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["component" Data.Aeson.Types.ToJSON..= userLogoutStageComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_set" Data.Aeson.Types.ToJSON..=)) (userLogoutStageFlowSet obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= userLogoutStageMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= userLogoutStageName obj] : ["pk" Data.Aeson.Types.ToJSON..= userLogoutStagePk obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= userLogoutStageVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= userLogoutStageVerboseNamePlural obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON UserLogoutStage where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "UserLogoutStage" (\obj -> ((((((GHC.Base.pure UserLogoutStage GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_set")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural"))

-- | Create a new 'UserLogoutStage' with all required fields.
mkUserLogoutStage ::
  -- | 'userLogoutStageComponent'
  Data.Text.Internal.Text ->
  -- | 'userLogoutStageMetaModelName'
  Data.Text.Internal.Text ->
  -- | 'userLogoutStageName'
  Data.Text.Internal.Text ->
  -- | 'userLogoutStagePk'
  Data.Text.Internal.Text ->
  -- | 'userLogoutStageVerboseName'
  Data.Text.Internal.Text ->
  -- | 'userLogoutStageVerboseNamePlural'
  Data.Text.Internal.Text ->
  UserLogoutStage
mkUserLogoutStage userLogoutStageComponent userLogoutStageMetaModelName userLogoutStageName userLogoutStagePk userLogoutStageVerboseName userLogoutStageVerboseNamePlural =
  UserLogoutStage
    { userLogoutStageComponent = userLogoutStageComponent,
      userLogoutStageFlowSet = GHC.Maybe.Nothing,
      userLogoutStageMetaModelName = userLogoutStageMetaModelName,
      userLogoutStageName = userLogoutStageName,
      userLogoutStagePk = userLogoutStagePk,
      userLogoutStageVerboseName = userLogoutStageVerboseName,
      userLogoutStageVerboseNamePlural = userLogoutStageVerboseNamePlural
    }

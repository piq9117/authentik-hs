{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema KerberosSource
module AuthentikAPI.Types.KerberosSource where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.PolicyEngineMode
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.KerberosSource@ in the specification.
--
-- Kerberos Source Serializer
data KerberosSource = KerberosSource
  { -- | authentication_flow: Flow to use when authenticating existing users.
    kerberosSourceAuthenticationFlow :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | component: Get object component so that we know how to edit the object
    kerberosSourceComponent :: Data.Text.Internal.Text,
    -- | connectivity: Get cached source connectivity
    kerberosSourceConnectivity :: (AuthentikAPI.Common.Nullable Data.Aeson.Types.Internal.Object),
    -- | enabled
    kerberosSourceEnabled :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | enrollment_flow: Flow to use when enrolling new users.
    kerberosSourceEnrollmentFlow :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | group_matching_mode: How the source determines if an existing group should be used or a new group created.
    kerberosSourceGroupMatchingMode :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | group_property_mappings
    kerberosSourceGroupPropertyMappings :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | icon
    kerberosSourceIcon :: Data.Text.Internal.Text,
    -- | kadmin_type: KAdmin server type
    kerberosSourceKadminType :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | krb5_conf: Custom krb5.conf to use. Uses the system one by default
    kerberosSourceKrb5Conf :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | managed: Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
    kerberosSourceManaged :: (AuthentikAPI.Common.Nullable Data.Text.Internal.Text),
    -- | meta_model_name: Return internal model name
    kerberosSourceMetaModelName :: Data.Text.Internal.Text,
    -- | name: Source\'s display Name.
    kerberosSourceName :: Data.Text.Internal.Text,
    -- | password_login_update_internal_password: If enabled, the authentik-stored password will be updated upon login with the Kerberos password backend
    kerberosSourcePasswordLoginUpdateInternalPassword :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | pk
    kerberosSourcePk :: Data.Text.Internal.Text,
    -- | policy_engine_mode
    kerberosSourcePolicyEngineMode :: (GHC.Maybe.Maybe PolicyEngineMode),
    -- | realm: Kerberos realm
    kerberosSourceRealm :: Data.Text.Internal.Text,
    -- | slug: Internal source name, used in URLs.
    --
    -- Constraints:
    --
    -- * Maximum length of 50
    -- * Must match pattern \'^[-a-zA-Z0-9_]+\$\'
    kerberosSourceSlug :: Data.Text.Internal.Text,
    -- | spnego_ccache: Credential cache to use for SPNEGO in form type:residual
    kerberosSourceSpnegoCcache :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | spnego_server_name: Force the use of a specific server name for SPNEGO. Must be in the form HTTP\@hostname
    kerberosSourceSpnegoServerName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | sync_ccache: Credentials cache to authenticate to kadmin for sync. Must be in the form TYPE:residual
    kerberosSourceSyncCcache :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | sync_principal: Principal to authenticate to kadmin for sync.
    kerberosSourceSyncPrincipal :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | sync_users: Sync users from Kerberos into authentik
    kerberosSourceSyncUsers :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | sync_users_password: When a user changes their password, sync it back to Kerberos
    kerberosSourceSyncUsersPassword :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | user_matching_mode: How the source determines if an existing user should be authenticated or a new user enrolled.
    kerberosSourceUserMatchingMode :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | user_path_template
    kerberosSourceUserPathTemplate :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | user_property_mappings
    kerberosSourceUserPropertyMappings :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | verbose_name: Return object\'s verbose_name
    kerberosSourceVerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    kerberosSourceVerboseNamePlural :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON KerberosSource where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication_flow" Data.Aeson.Types.ToJSON..=)) (kerberosSourceAuthenticationFlow obj) : ["component" Data.Aeson.Types.ToJSON..= kerberosSourceComponent obj] : ["connectivity" Data.Aeson.Types.ToJSON..= kerberosSourceConnectivity obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enabled" Data.Aeson.Types.ToJSON..=)) (kerberosSourceEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enrollment_flow" Data.Aeson.Types.ToJSON..=)) (kerberosSourceEnrollmentFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("group_matching_mode" Data.Aeson.Types.ToJSON..=)) (kerberosSourceGroupMatchingMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("group_property_mappings" Data.Aeson.Types.ToJSON..=)) (kerberosSourceGroupPropertyMappings obj) : ["icon" Data.Aeson.Types.ToJSON..= kerberosSourceIcon obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("kadmin_type" Data.Aeson.Types.ToJSON..=)) (kerberosSourceKadminType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("krb5_conf" Data.Aeson.Types.ToJSON..=)) (kerberosSourceKrb5Conf obj) : ["managed" Data.Aeson.Types.ToJSON..= kerberosSourceManaged obj] : ["meta_model_name" Data.Aeson.Types.ToJSON..= kerberosSourceMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= kerberosSourceName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("password_login_update_internal_password" Data.Aeson.Types.ToJSON..=)) (kerberosSourcePasswordLoginUpdateInternalPassword obj) : ["pk" Data.Aeson.Types.ToJSON..= kerberosSourcePk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("policy_engine_mode" Data.Aeson.Types.ToJSON..=)) (kerberosSourcePolicyEngineMode obj) : ["realm" Data.Aeson.Types.ToJSON..= kerberosSourceRealm obj] : ["slug" Data.Aeson.Types.ToJSON..= kerberosSourceSlug obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("spnego_ccache" Data.Aeson.Types.ToJSON..=)) (kerberosSourceSpnegoCcache obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("spnego_server_name" Data.Aeson.Types.ToJSON..=)) (kerberosSourceSpnegoServerName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sync_ccache" Data.Aeson.Types.ToJSON..=)) (kerberosSourceSyncCcache obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sync_principal" Data.Aeson.Types.ToJSON..=)) (kerberosSourceSyncPrincipal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sync_users" Data.Aeson.Types.ToJSON..=)) (kerberosSourceSyncUsers obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sync_users_password" Data.Aeson.Types.ToJSON..=)) (kerberosSourceSyncUsersPassword obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_matching_mode" Data.Aeson.Types.ToJSON..=)) (kerberosSourceUserMatchingMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_path_template" Data.Aeson.Types.ToJSON..=)) (kerberosSourceUserPathTemplate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_property_mappings" Data.Aeson.Types.ToJSON..=)) (kerberosSourceUserPropertyMappings obj) : ["verbose_name" Data.Aeson.Types.ToJSON..= kerberosSourceVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= kerberosSourceVerboseNamePlural obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication_flow" Data.Aeson.Types.ToJSON..=)) (kerberosSourceAuthenticationFlow obj) : ["component" Data.Aeson.Types.ToJSON..= kerberosSourceComponent obj] : ["connectivity" Data.Aeson.Types.ToJSON..= kerberosSourceConnectivity obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enabled" Data.Aeson.Types.ToJSON..=)) (kerberosSourceEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enrollment_flow" Data.Aeson.Types.ToJSON..=)) (kerberosSourceEnrollmentFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("group_matching_mode" Data.Aeson.Types.ToJSON..=)) (kerberosSourceGroupMatchingMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("group_property_mappings" Data.Aeson.Types.ToJSON..=)) (kerberosSourceGroupPropertyMappings obj) : ["icon" Data.Aeson.Types.ToJSON..= kerberosSourceIcon obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("kadmin_type" Data.Aeson.Types.ToJSON..=)) (kerberosSourceKadminType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("krb5_conf" Data.Aeson.Types.ToJSON..=)) (kerberosSourceKrb5Conf obj) : ["managed" Data.Aeson.Types.ToJSON..= kerberosSourceManaged obj] : ["meta_model_name" Data.Aeson.Types.ToJSON..= kerberosSourceMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= kerberosSourceName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("password_login_update_internal_password" Data.Aeson.Types.ToJSON..=)) (kerberosSourcePasswordLoginUpdateInternalPassword obj) : ["pk" Data.Aeson.Types.ToJSON..= kerberosSourcePk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("policy_engine_mode" Data.Aeson.Types.ToJSON..=)) (kerberosSourcePolicyEngineMode obj) : ["realm" Data.Aeson.Types.ToJSON..= kerberosSourceRealm obj] : ["slug" Data.Aeson.Types.ToJSON..= kerberosSourceSlug obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("spnego_ccache" Data.Aeson.Types.ToJSON..=)) (kerberosSourceSpnegoCcache obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("spnego_server_name" Data.Aeson.Types.ToJSON..=)) (kerberosSourceSpnegoServerName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sync_ccache" Data.Aeson.Types.ToJSON..=)) (kerberosSourceSyncCcache obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sync_principal" Data.Aeson.Types.ToJSON..=)) (kerberosSourceSyncPrincipal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sync_users" Data.Aeson.Types.ToJSON..=)) (kerberosSourceSyncUsers obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sync_users_password" Data.Aeson.Types.ToJSON..=)) (kerberosSourceSyncUsersPassword obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_matching_mode" Data.Aeson.Types.ToJSON..=)) (kerberosSourceUserMatchingMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_path_template" Data.Aeson.Types.ToJSON..=)) (kerberosSourceUserPathTemplate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_property_mappings" Data.Aeson.Types.ToJSON..=)) (kerberosSourceUserPropertyMappings obj) : ["verbose_name" Data.Aeson.Types.ToJSON..= kerberosSourceVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= kerberosSourceVerboseNamePlural obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON KerberosSource where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "KerberosSource" (\obj -> ((((((((((((((((((((((((((((GHC.Base.pure KerberosSource GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "authentication_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "connectivity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "enrollment_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "group_matching_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "group_property_mappings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "icon")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "kadmin_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "krb5_conf")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "managed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "password_login_update_internal_password")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "policy_engine_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "realm")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "slug")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "spnego_ccache")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "spnego_server_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sync_ccache")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sync_principal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sync_users")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sync_users_password")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "user_matching_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "user_path_template")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "user_property_mappings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural"))

-- | Create a new 'KerberosSource' with all required fields.
mkKerberosSource ::
  -- | 'kerberosSourceComponent'
  Data.Text.Internal.Text ->
  -- | 'kerberosSourceConnectivity'
  AuthentikAPI.Common.Nullable Data.Aeson.Types.Internal.Object ->
  -- | 'kerberosSourceIcon'
  Data.Text.Internal.Text ->
  -- | 'kerberosSourceManaged'
  AuthentikAPI.Common.Nullable Data.Text.Internal.Text ->
  -- | 'kerberosSourceMetaModelName'
  Data.Text.Internal.Text ->
  -- | 'kerberosSourceName'
  Data.Text.Internal.Text ->
  -- | 'kerberosSourcePk'
  Data.Text.Internal.Text ->
  -- | 'kerberosSourceRealm'
  Data.Text.Internal.Text ->
  -- | 'kerberosSourceSlug'
  Data.Text.Internal.Text ->
  -- | 'kerberosSourceVerboseName'
  Data.Text.Internal.Text ->
  -- | 'kerberosSourceVerboseNamePlural'
  Data.Text.Internal.Text ->
  KerberosSource
mkKerberosSource kerberosSourceComponent kerberosSourceConnectivity kerberosSourceIcon kerberosSourceManaged kerberosSourceMetaModelName kerberosSourceName kerberosSourcePk kerberosSourceRealm kerberosSourceSlug kerberosSourceVerboseName kerberosSourceVerboseNamePlural =
  KerberosSource
    { kerberosSourceAuthenticationFlow = GHC.Maybe.Nothing,
      kerberosSourceComponent = kerberosSourceComponent,
      kerberosSourceConnectivity = kerberosSourceConnectivity,
      kerberosSourceEnabled = GHC.Maybe.Nothing,
      kerberosSourceEnrollmentFlow = GHC.Maybe.Nothing,
      kerberosSourceGroupMatchingMode = GHC.Maybe.Nothing,
      kerberosSourceGroupPropertyMappings = GHC.Maybe.Nothing,
      kerberosSourceIcon = kerberosSourceIcon,
      kerberosSourceKadminType = GHC.Maybe.Nothing,
      kerberosSourceKrb5Conf = GHC.Maybe.Nothing,
      kerberosSourceManaged = kerberosSourceManaged,
      kerberosSourceMetaModelName = kerberosSourceMetaModelName,
      kerberosSourceName = kerberosSourceName,
      kerberosSourcePasswordLoginUpdateInternalPassword = GHC.Maybe.Nothing,
      kerberosSourcePk = kerberosSourcePk,
      kerberosSourcePolicyEngineMode = GHC.Maybe.Nothing,
      kerberosSourceRealm = kerberosSourceRealm,
      kerberosSourceSlug = kerberosSourceSlug,
      kerberosSourceSpnegoCcache = GHC.Maybe.Nothing,
      kerberosSourceSpnegoServerName = GHC.Maybe.Nothing,
      kerberosSourceSyncCcache = GHC.Maybe.Nothing,
      kerberosSourceSyncPrincipal = GHC.Maybe.Nothing,
      kerberosSourceSyncUsers = GHC.Maybe.Nothing,
      kerberosSourceSyncUsersPassword = GHC.Maybe.Nothing,
      kerberosSourceUserMatchingMode = GHC.Maybe.Nothing,
      kerberosSourceUserPathTemplate = GHC.Maybe.Nothing,
      kerberosSourceUserPropertyMappings = GHC.Maybe.Nothing,
      kerberosSourceVerboseName = kerberosSourceVerboseName,
      kerberosSourceVerboseNamePlural = kerberosSourceVerboseNamePlural
    }

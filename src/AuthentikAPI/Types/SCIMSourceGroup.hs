{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema SCIMSourceGroup
module AuthentikAPI.Types.SCIMSourceGroup where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.UserGroup
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.SCIMSourceGroup@ in the specification.
--
-- SCIMSourceGroup Serializer
data SCIMSourceGroup = SCIMSourceGroup
  { -- | attributes
    sCIMSourceGroupAttributes :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | group
    sCIMSourceGroupGroup :: Data.Text.Internal.Text,
    -- | group_obj
    sCIMSourceGroupGroupObj :: SCIMSourceGroupGroupObj',
    -- | id
    sCIMSourceGroupId :: Data.Text.Internal.Text,
    -- | source
    sCIMSourceGroupSource :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SCIMSourceGroup where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (sCIMSourceGroupAttributes obj) : ["group" Data.Aeson.Types.ToJSON..= sCIMSourceGroupGroup obj] : ["group_obj" Data.Aeson.Types.ToJSON..= sCIMSourceGroupGroupObj obj] : ["id" Data.Aeson.Types.ToJSON..= sCIMSourceGroupId obj] : ["source" Data.Aeson.Types.ToJSON..= sCIMSourceGroupSource obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (sCIMSourceGroupAttributes obj) : ["group" Data.Aeson.Types.ToJSON..= sCIMSourceGroupGroup obj] : ["group_obj" Data.Aeson.Types.ToJSON..= sCIMSourceGroupGroupObj obj] : ["id" Data.Aeson.Types.ToJSON..= sCIMSourceGroupId obj] : ["source" Data.Aeson.Types.ToJSON..= sCIMSourceGroupSource obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SCIMSourceGroup where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SCIMSourceGroup" (\obj -> ((((GHC.Base.pure SCIMSourceGroup GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "attributes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "group")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "group_obj")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "source"))

-- | Create a new 'SCIMSourceGroup' with all required fields.
mkSCIMSourceGroup ::
  -- | 'sCIMSourceGroupGroup'
  Data.Text.Internal.Text ->
  -- | 'sCIMSourceGroupGroupObj'
  SCIMSourceGroupGroupObj' ->
  -- | 'sCIMSourceGroupId'
  Data.Text.Internal.Text ->
  -- | 'sCIMSourceGroupSource'
  Data.Text.Internal.Text ->
  SCIMSourceGroup
mkSCIMSourceGroup sCIMSourceGroupGroup sCIMSourceGroupGroupObj sCIMSourceGroupId sCIMSourceGroupSource =
  SCIMSourceGroup
    { sCIMSourceGroupAttributes = GHC.Maybe.Nothing,
      sCIMSourceGroupGroup = sCIMSourceGroupGroup,
      sCIMSourceGroupGroupObj = sCIMSourceGroupGroupObj,
      sCIMSourceGroupId = sCIMSourceGroupId,
      sCIMSourceGroupSource = sCIMSourceGroupSource
    }

-- | Defines the object schema located at @components.schemas.SCIMSourceGroup.properties.group_obj.allOf@ in the specification.
data SCIMSourceGroupGroupObj' = SCIMSourceGroupGroupObj'
  { -- | attributes
    sCIMSourceGroupGroupObj'Attributes :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | is_superuser: Users added to this group will be superusers.
    sCIMSourceGroupGroupObj'IsSuperuser :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | name
    sCIMSourceGroupGroupObj'Name :: Data.Text.Internal.Text,
    -- | num_pk: Get a numerical, int32 ID for the group
    sCIMSourceGroupGroupObj'NumPk :: GHC.Types.Int,
    -- | parent
    sCIMSourceGroupGroupObj'Parent :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | parent_name
    sCIMSourceGroupGroupObj'ParentName :: (AuthentikAPI.Common.Nullable Data.Text.Internal.Text),
    -- | pk
    sCIMSourceGroupGroupObj'Pk :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SCIMSourceGroupGroupObj' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (sCIMSourceGroupGroupObj'Attributes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_superuser" Data.Aeson.Types.ToJSON..=)) (sCIMSourceGroupGroupObj'IsSuperuser obj) : ["name" Data.Aeson.Types.ToJSON..= sCIMSourceGroupGroupObj'Name obj] : ["num_pk" Data.Aeson.Types.ToJSON..= sCIMSourceGroupGroupObj'NumPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("parent" Data.Aeson.Types.ToJSON..=)) (sCIMSourceGroupGroupObj'Parent obj) : ["parent_name" Data.Aeson.Types.ToJSON..= sCIMSourceGroupGroupObj'ParentName obj] : ["pk" Data.Aeson.Types.ToJSON..= sCIMSourceGroupGroupObj'Pk obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (sCIMSourceGroupGroupObj'Attributes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_superuser" Data.Aeson.Types.ToJSON..=)) (sCIMSourceGroupGroupObj'IsSuperuser obj) : ["name" Data.Aeson.Types.ToJSON..= sCIMSourceGroupGroupObj'Name obj] : ["num_pk" Data.Aeson.Types.ToJSON..= sCIMSourceGroupGroupObj'NumPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("parent" Data.Aeson.Types.ToJSON..=)) (sCIMSourceGroupGroupObj'Parent obj) : ["parent_name" Data.Aeson.Types.ToJSON..= sCIMSourceGroupGroupObj'ParentName obj] : ["pk" Data.Aeson.Types.ToJSON..= sCIMSourceGroupGroupObj'Pk obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SCIMSourceGroupGroupObj' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SCIMSourceGroupGroupObj'" (\obj -> ((((((GHC.Base.pure SCIMSourceGroupGroupObj' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "attributes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "is_superuser")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "num_pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "parent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "parent_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk"))

-- | Create a new 'SCIMSourceGroupGroupObj'' with all required fields.
mkSCIMSourceGroupGroupObj' ::
  -- | 'sCIMSourceGroupGroupObj'Name'
  Data.Text.Internal.Text ->
  -- | 'sCIMSourceGroupGroupObj'NumPk'
  GHC.Types.Int ->
  -- | 'sCIMSourceGroupGroupObj'ParentName'
  AuthentikAPI.Common.Nullable Data.Text.Internal.Text ->
  -- | 'sCIMSourceGroupGroupObj'Pk'
  Data.Text.Internal.Text ->
  SCIMSourceGroupGroupObj'
mkSCIMSourceGroupGroupObj' sCIMSourceGroupGroupObj'Name sCIMSourceGroupGroupObj'NumPk sCIMSourceGroupGroupObj'ParentName sCIMSourceGroupGroupObj'Pk =
  SCIMSourceGroupGroupObj'
    { sCIMSourceGroupGroupObj'Attributes = GHC.Maybe.Nothing,
      sCIMSourceGroupGroupObj'IsSuperuser = GHC.Maybe.Nothing,
      sCIMSourceGroupGroupObj'Name = sCIMSourceGroupGroupObj'Name,
      sCIMSourceGroupGroupObj'NumPk = sCIMSourceGroupGroupObj'NumPk,
      sCIMSourceGroupGroupObj'Parent = GHC.Maybe.Nothing,
      sCIMSourceGroupGroupObj'ParentName = sCIMSourceGroupGroupObj'ParentName,
      sCIMSourceGroupGroupObj'Pk = sCIMSourceGroupGroupObj'Pk
    }

{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Outpost
module AuthentikAPI.Types.Outpost where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.OutpostTypeEnum
import {-# SOURCE #-} AuthentikAPI.Types.Provider
import {-# SOURCE #-} AuthentikAPI.Types.ServiceConnection
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.Outpost@ in the specification.
--
-- Outpost Serializer
data Outpost = Outpost
  { -- | config
    outpostConfig :: Data.Aeson.Types.Internal.Object,
    -- | managed: Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
    outpostManaged :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | name
    outpostName :: Data.Text.Internal.Text,
    -- | pk
    outpostPk :: Data.Text.Internal.Text,
    -- | providers
    outpostProviders :: [GHC.Types.Int],
    -- | providers_obj
    outpostProvidersObj :: [Provider],
    -- | refresh_interval_s
    outpostRefreshIntervalS :: GHC.Types.Int,
    -- | service_connection: Select Service-Connection authentik should use to manage this outpost. Leave empty if authentik should not handle the deployment.
    outpostServiceConnection :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | service_connection_obj
    outpostServiceConnectionObj :: OutpostServiceConnectionObj',
    -- | token_identifier: Get Token identifier
    outpostTokenIdentifier :: Data.Text.Internal.Text,
    -- | type
    outpostType :: OutpostTypeEnum
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Outpost where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["config" Data.Aeson.Types.ToJSON..= outpostConfig obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("managed" Data.Aeson.Types.ToJSON..=)) (outpostManaged obj) : ["name" Data.Aeson.Types.ToJSON..= outpostName obj] : ["pk" Data.Aeson.Types.ToJSON..= outpostPk obj] : ["providers" Data.Aeson.Types.ToJSON..= outpostProviders obj] : ["providers_obj" Data.Aeson.Types.ToJSON..= outpostProvidersObj obj] : ["refresh_interval_s" Data.Aeson.Types.ToJSON..= outpostRefreshIntervalS obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("service_connection" Data.Aeson.Types.ToJSON..=)) (outpostServiceConnection obj) : ["service_connection_obj" Data.Aeson.Types.ToJSON..= outpostServiceConnectionObj obj] : ["token_identifier" Data.Aeson.Types.ToJSON..= outpostTokenIdentifier obj] : ["type" Data.Aeson.Types.ToJSON..= outpostType obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["config" Data.Aeson.Types.ToJSON..= outpostConfig obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("managed" Data.Aeson.Types.ToJSON..=)) (outpostManaged obj) : ["name" Data.Aeson.Types.ToJSON..= outpostName obj] : ["pk" Data.Aeson.Types.ToJSON..= outpostPk obj] : ["providers" Data.Aeson.Types.ToJSON..= outpostProviders obj] : ["providers_obj" Data.Aeson.Types.ToJSON..= outpostProvidersObj obj] : ["refresh_interval_s" Data.Aeson.Types.ToJSON..= outpostRefreshIntervalS obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("service_connection" Data.Aeson.Types.ToJSON..=)) (outpostServiceConnection obj) : ["service_connection_obj" Data.Aeson.Types.ToJSON..= outpostServiceConnectionObj obj] : ["token_identifier" Data.Aeson.Types.ToJSON..= outpostTokenIdentifier obj] : ["type" Data.Aeson.Types.ToJSON..= outpostType obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Outpost where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Outpost" (\obj -> ((((((((((GHC.Base.pure Outpost GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "config")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "managed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "providers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "providers_obj")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "refresh_interval_s")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "service_connection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "service_connection_obj")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "token_identifier")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))

-- | Create a new 'Outpost' with all required fields.
mkOutpost ::
  -- | 'outpostConfig'
  Data.Aeson.Types.Internal.Object ->
  -- | 'outpostName'
  Data.Text.Internal.Text ->
  -- | 'outpostPk'
  Data.Text.Internal.Text ->
  -- | 'outpostProviders'
  [GHC.Types.Int] ->
  -- | 'outpostProvidersObj'
  [Provider] ->
  -- | 'outpostRefreshIntervalS'
  GHC.Types.Int ->
  -- | 'outpostServiceConnectionObj'
  OutpostServiceConnectionObj' ->
  -- | 'outpostTokenIdentifier'
  Data.Text.Internal.Text ->
  -- | 'outpostType'
  OutpostTypeEnum ->
  Outpost
mkOutpost outpostConfig outpostName outpostPk outpostProviders outpostProvidersObj outpostRefreshIntervalS outpostServiceConnectionObj outpostTokenIdentifier outpostType =
  Outpost
    { outpostConfig = outpostConfig,
      outpostManaged = GHC.Maybe.Nothing,
      outpostName = outpostName,
      outpostPk = outpostPk,
      outpostProviders = outpostProviders,
      outpostProvidersObj = outpostProvidersObj,
      outpostRefreshIntervalS = outpostRefreshIntervalS,
      outpostServiceConnection = GHC.Maybe.Nothing,
      outpostServiceConnectionObj = outpostServiceConnectionObj,
      outpostTokenIdentifier = outpostTokenIdentifier,
      outpostType = outpostType
    }

-- | Defines the object schema located at @components.schemas.Outpost.properties.service_connection_obj.allOf@ in the specification.
data OutpostServiceConnectionObj' = OutpostServiceConnectionObj'
  { -- | component: Return component used to edit this object
    outpostServiceConnectionObj'Component :: Data.Text.Internal.Text,
    -- | local: If enabled, use the local connection. Required Docker socket\/Kubernetes Integration
    outpostServiceConnectionObj'Local :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | meta_model_name: Return internal model name
    outpostServiceConnectionObj'MetaModelName :: Data.Text.Internal.Text,
    -- | name
    outpostServiceConnectionObj'Name :: Data.Text.Internal.Text,
    -- | pk
    outpostServiceConnectionObj'Pk :: Data.Text.Internal.Text,
    -- | verbose_name: Return object\'s verbose_name
    outpostServiceConnectionObj'VerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    outpostServiceConnectionObj'VerboseNamePlural :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON OutpostServiceConnectionObj' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["component" Data.Aeson.Types.ToJSON..= outpostServiceConnectionObj'Component obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("local" Data.Aeson.Types.ToJSON..=)) (outpostServiceConnectionObj'Local obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= outpostServiceConnectionObj'MetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= outpostServiceConnectionObj'Name obj] : ["pk" Data.Aeson.Types.ToJSON..= outpostServiceConnectionObj'Pk obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= outpostServiceConnectionObj'VerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= outpostServiceConnectionObj'VerboseNamePlural obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["component" Data.Aeson.Types.ToJSON..= outpostServiceConnectionObj'Component obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("local" Data.Aeson.Types.ToJSON..=)) (outpostServiceConnectionObj'Local obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= outpostServiceConnectionObj'MetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= outpostServiceConnectionObj'Name obj] : ["pk" Data.Aeson.Types.ToJSON..= outpostServiceConnectionObj'Pk obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= outpostServiceConnectionObj'VerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= outpostServiceConnectionObj'VerboseNamePlural obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON OutpostServiceConnectionObj' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "OutpostServiceConnectionObj'" (\obj -> ((((((GHC.Base.pure OutpostServiceConnectionObj' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "local")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural"))

-- | Create a new 'OutpostServiceConnectionObj'' with all required fields.
mkOutpostServiceConnectionObj' ::
  -- | 'outpostServiceConnectionObj'Component'
  Data.Text.Internal.Text ->
  -- | 'outpostServiceConnectionObj'MetaModelName'
  Data.Text.Internal.Text ->
  -- | 'outpostServiceConnectionObj'Name'
  Data.Text.Internal.Text ->
  -- | 'outpostServiceConnectionObj'Pk'
  Data.Text.Internal.Text ->
  -- | 'outpostServiceConnectionObj'VerboseName'
  Data.Text.Internal.Text ->
  -- | 'outpostServiceConnectionObj'VerboseNamePlural'
  Data.Text.Internal.Text ->
  OutpostServiceConnectionObj'
mkOutpostServiceConnectionObj' outpostServiceConnectionObj'Component outpostServiceConnectionObj'MetaModelName outpostServiceConnectionObj'Name outpostServiceConnectionObj'Pk outpostServiceConnectionObj'VerboseName outpostServiceConnectionObj'VerboseNamePlural =
  OutpostServiceConnectionObj'
    { outpostServiceConnectionObj'Component = outpostServiceConnectionObj'Component,
      outpostServiceConnectionObj'Local = GHC.Maybe.Nothing,
      outpostServiceConnectionObj'MetaModelName = outpostServiceConnectionObj'MetaModelName,
      outpostServiceConnectionObj'Name = outpostServiceConnectionObj'Name,
      outpostServiceConnectionObj'Pk = outpostServiceConnectionObj'Pk,
      outpostServiceConnectionObj'VerboseName = outpostServiceConnectionObj'VerboseName,
      outpostServiceConnectionObj'VerboseNamePlural = outpostServiceConnectionObj'VerboseNamePlural
    }

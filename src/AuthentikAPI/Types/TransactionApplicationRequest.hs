{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema TransactionApplicationRequest
module AuthentikAPI.Types.TransactionApplicationRequest where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.ApplicationRequest
import {-# SOURCE #-} AuthentikAPI.Types.ModelRequest
import {-# SOURCE #-} AuthentikAPI.Types.ProviderModelEnum
import {-# SOURCE #-} AuthentikAPI.Types.TransactionPolicyBindingRequest
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.TransactionApplicationRequest@ in the specification.
--
-- Serializer for creating a provider and an application in one transaction
data TransactionApplicationRequest = TransactionApplicationRequest
  { -- | app: Application Serializer
    transactionApplicationRequestApp :: ApplicationRequest,
    -- | policy_bindings
    transactionApplicationRequestPolicyBindings :: (GHC.Maybe.Maybe [TransactionPolicyBindingRequest]),
    -- | provider
    transactionApplicationRequestProvider :: ModelRequest,
    -- | provider_model
    transactionApplicationRequestProviderModel :: ProviderModelEnum
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON TransactionApplicationRequest where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["app" Data.Aeson.Types.ToJSON..= transactionApplicationRequestApp obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("policy_bindings" Data.Aeson.Types.ToJSON..=)) (transactionApplicationRequestPolicyBindings obj) : ["provider" Data.Aeson.Types.ToJSON..= transactionApplicationRequestProvider obj] : ["provider_model" Data.Aeson.Types.ToJSON..= transactionApplicationRequestProviderModel obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["app" Data.Aeson.Types.ToJSON..= transactionApplicationRequestApp obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("policy_bindings" Data.Aeson.Types.ToJSON..=)) (transactionApplicationRequestPolicyBindings obj) : ["provider" Data.Aeson.Types.ToJSON..= transactionApplicationRequestProvider obj] : ["provider_model" Data.Aeson.Types.ToJSON..= transactionApplicationRequestProviderModel obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON TransactionApplicationRequest where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "TransactionApplicationRequest" (\obj -> (((GHC.Base.pure TransactionApplicationRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "app")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "policy_bindings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "provider")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "provider_model"))

-- | Create a new 'TransactionApplicationRequest' with all required fields.
mkTransactionApplicationRequest ::
  -- | 'transactionApplicationRequestApp'
  ApplicationRequest ->
  -- | 'transactionApplicationRequestProvider'
  ModelRequest ->
  -- | 'transactionApplicationRequestProviderModel'
  ProviderModelEnum ->
  TransactionApplicationRequest
mkTransactionApplicationRequest transactionApplicationRequestApp transactionApplicationRequestProvider transactionApplicationRequestProviderModel =
  TransactionApplicationRequest
    { transactionApplicationRequestApp = transactionApplicationRequestApp,
      transactionApplicationRequestPolicyBindings = GHC.Maybe.Nothing,
      transactionApplicationRequestProvider = transactionApplicationRequestProvider,
      transactionApplicationRequestProviderModel = transactionApplicationRequestProviderModel
    }

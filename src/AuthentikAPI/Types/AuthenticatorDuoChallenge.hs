{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema AuthenticatorDuoChallenge
module AuthentikAPI.Types.AuthenticatorDuoChallenge where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.ContextualFlowInfo
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.AuthenticatorDuoChallenge@ in the specification.
--
-- Duo Challenge
data AuthenticatorDuoChallenge = AuthenticatorDuoChallenge
  { -- | activation_barcode
    authenticatorDuoChallengeActivationBarcode :: Data.Text.Internal.Text,
    -- | activation_code
    authenticatorDuoChallengeActivationCode :: Data.Text.Internal.Text,
    -- | component
    authenticatorDuoChallengeComponent :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | flow_info: Contextual flow information for a challenge
    authenticatorDuoChallengeFlowInfo :: (GHC.Maybe.Maybe ContextualFlowInfo),
    -- | pending_user
    authenticatorDuoChallengePendingUser :: Data.Text.Internal.Text,
    -- | pending_user_avatar
    authenticatorDuoChallengePendingUserAvatar :: Data.Text.Internal.Text,
    -- | response_errors
    authenticatorDuoChallengeResponseErrors :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | stage_uuid
    authenticatorDuoChallengeStageUuid :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON AuthenticatorDuoChallenge where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["activation_barcode" Data.Aeson.Types.ToJSON..= authenticatorDuoChallengeActivationBarcode obj] : ["activation_code" Data.Aeson.Types.ToJSON..= authenticatorDuoChallengeActivationCode obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("component" Data.Aeson.Types.ToJSON..=)) (authenticatorDuoChallengeComponent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_info" Data.Aeson.Types.ToJSON..=)) (authenticatorDuoChallengeFlowInfo obj) : ["pending_user" Data.Aeson.Types.ToJSON..= authenticatorDuoChallengePendingUser obj] : ["pending_user_avatar" Data.Aeson.Types.ToJSON..= authenticatorDuoChallengePendingUserAvatar obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("response_errors" Data.Aeson.Types.ToJSON..=)) (authenticatorDuoChallengeResponseErrors obj) : ["stage_uuid" Data.Aeson.Types.ToJSON..= authenticatorDuoChallengeStageUuid obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["activation_barcode" Data.Aeson.Types.ToJSON..= authenticatorDuoChallengeActivationBarcode obj] : ["activation_code" Data.Aeson.Types.ToJSON..= authenticatorDuoChallengeActivationCode obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("component" Data.Aeson.Types.ToJSON..=)) (authenticatorDuoChallengeComponent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_info" Data.Aeson.Types.ToJSON..=)) (authenticatorDuoChallengeFlowInfo obj) : ["pending_user" Data.Aeson.Types.ToJSON..= authenticatorDuoChallengePendingUser obj] : ["pending_user_avatar" Data.Aeson.Types.ToJSON..= authenticatorDuoChallengePendingUserAvatar obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("response_errors" Data.Aeson.Types.ToJSON..=)) (authenticatorDuoChallengeResponseErrors obj) : ["stage_uuid" Data.Aeson.Types.ToJSON..= authenticatorDuoChallengeStageUuid obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON AuthenticatorDuoChallenge where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "AuthenticatorDuoChallenge" (\obj -> (((((((GHC.Base.pure AuthenticatorDuoChallenge GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "activation_barcode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "activation_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_info")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pending_user")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pending_user_avatar")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "response_errors")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "stage_uuid"))

-- | Create a new 'AuthenticatorDuoChallenge' with all required fields.
mkAuthenticatorDuoChallenge ::
  -- | 'authenticatorDuoChallengeActivationBarcode'
  Data.Text.Internal.Text ->
  -- | 'authenticatorDuoChallengeActivationCode'
  Data.Text.Internal.Text ->
  -- | 'authenticatorDuoChallengePendingUser'
  Data.Text.Internal.Text ->
  -- | 'authenticatorDuoChallengePendingUserAvatar'
  Data.Text.Internal.Text ->
  -- | 'authenticatorDuoChallengeStageUuid'
  Data.Text.Internal.Text ->
  AuthenticatorDuoChallenge
mkAuthenticatorDuoChallenge authenticatorDuoChallengeActivationBarcode authenticatorDuoChallengeActivationCode authenticatorDuoChallengePendingUser authenticatorDuoChallengePendingUserAvatar authenticatorDuoChallengeStageUuid =
  AuthenticatorDuoChallenge
    { authenticatorDuoChallengeActivationBarcode = authenticatorDuoChallengeActivationBarcode,
      authenticatorDuoChallengeActivationCode = authenticatorDuoChallengeActivationCode,
      authenticatorDuoChallengeComponent = GHC.Maybe.Nothing,
      authenticatorDuoChallengeFlowInfo = GHC.Maybe.Nothing,
      authenticatorDuoChallengePendingUser = authenticatorDuoChallengePendingUser,
      authenticatorDuoChallengePendingUserAvatar = authenticatorDuoChallengePendingUserAvatar,
      authenticatorDuoChallengeResponseErrors = GHC.Maybe.Nothing,
      authenticatorDuoChallengeStageUuid = authenticatorDuoChallengeStageUuid
    }

{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema ProxyOutpostConfig
module AuthentikAPI.Types.ProxyOutpostConfig where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.OpenIDConnectConfiguration
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.ProxyOutpostConfig@ in the specification.
--
-- Proxy provider serializer for outposts
data ProxyOutpostConfig = ProxyOutpostConfig
  { -- | access_token_validity: Get token validity as second count
    proxyOutpostConfigAccessTokenValidity :: (AuthentikAPI.Common.Nullable GHC.Types.Double),
    -- | assigned_application_name: Application\'s display Name.
    proxyOutpostConfigAssignedApplicationName :: Data.Text.Internal.Text,
    -- | assigned_application_slug: Internal application name, used in URLs.
    proxyOutpostConfigAssignedApplicationSlug :: Data.Text.Internal.Text,
    -- | basic_auth_enabled: Set a custom HTTP-Basic Authentication header based on values from authentik.
    proxyOutpostConfigBasicAuthEnabled :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | basic_auth_password_attribute: User\/Group Attribute used for the password part of the HTTP-Basic Header.
    proxyOutpostConfigBasicAuthPasswordAttribute :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | basic_auth_user_attribute: User\/Group Attribute used for the user part of the HTTP-Basic Header. If not set, the user\'s Email address is used.
    proxyOutpostConfigBasicAuthUserAttribute :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | certificate
    proxyOutpostConfigCertificate :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | client_id
    --
    -- Constraints:
    --
    -- * Maximum length of 255
    proxyOutpostConfigClientId :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | client_secret
    --
    -- Constraints:
    --
    -- * Maximum length of 255
    proxyOutpostConfigClientSecret :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | cookie_domain
    proxyOutpostConfigCookieDomain :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | cookie_secret
    proxyOutpostConfigCookieSecret :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | external_host
    proxyOutpostConfigExternalHost :: Data.Text.Internal.Text,
    -- | intercept_header_auth: When enabled, this provider will intercept the authorization header and authenticate requests based on its value.
    proxyOutpostConfigInterceptHeaderAuth :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | internal_host
    proxyOutpostConfigInternalHost :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | internal_host_ssl_validation: Validate SSL Certificates of upstream servers
    proxyOutpostConfigInternalHostSslValidation :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | mode: Enable support for forwardAuth in traefik and nginx auth_request. Exclusive with internal_host.
    proxyOutpostConfigMode :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | name
    proxyOutpostConfigName :: Data.Text.Internal.Text,
    -- | oidc_configuration
    proxyOutpostConfigOidcConfiguration :: ProxyOutpostConfigOidcConfiguration',
    -- | pk
    proxyOutpostConfigPk :: GHC.Types.Int,
    -- | scopes_to_request: Get all the scope names the outpost should request,
    -- including custom-defined ones
    proxyOutpostConfigScopesToRequest :: [Data.Text.Internal.Text],
    -- | skip_path_regex: Regular expressions for which authentication is not required. Each new line is interpreted as a new Regular Expression.
    proxyOutpostConfigSkipPathRegex :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON ProxyOutpostConfig where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["access_token_validity" Data.Aeson.Types.ToJSON..= proxyOutpostConfigAccessTokenValidity obj] : ["assigned_application_name" Data.Aeson.Types.ToJSON..= proxyOutpostConfigAssignedApplicationName obj] : ["assigned_application_slug" Data.Aeson.Types.ToJSON..= proxyOutpostConfigAssignedApplicationSlug obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("basic_auth_enabled" Data.Aeson.Types.ToJSON..=)) (proxyOutpostConfigBasicAuthEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("basic_auth_password_attribute" Data.Aeson.Types.ToJSON..=)) (proxyOutpostConfigBasicAuthPasswordAttribute obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("basic_auth_user_attribute" Data.Aeson.Types.ToJSON..=)) (proxyOutpostConfigBasicAuthUserAttribute obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("certificate" Data.Aeson.Types.ToJSON..=)) (proxyOutpostConfigCertificate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("client_id" Data.Aeson.Types.ToJSON..=)) (proxyOutpostConfigClientId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("client_secret" Data.Aeson.Types.ToJSON..=)) (proxyOutpostConfigClientSecret obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cookie_domain" Data.Aeson.Types.ToJSON..=)) (proxyOutpostConfigCookieDomain obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cookie_secret" Data.Aeson.Types.ToJSON..=)) (proxyOutpostConfigCookieSecret obj) : ["external_host" Data.Aeson.Types.ToJSON..= proxyOutpostConfigExternalHost obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("intercept_header_auth" Data.Aeson.Types.ToJSON..=)) (proxyOutpostConfigInterceptHeaderAuth obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("internal_host" Data.Aeson.Types.ToJSON..=)) (proxyOutpostConfigInternalHost obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("internal_host_ssl_validation" Data.Aeson.Types.ToJSON..=)) (proxyOutpostConfigInternalHostSslValidation obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mode" Data.Aeson.Types.ToJSON..=)) (proxyOutpostConfigMode obj) : ["name" Data.Aeson.Types.ToJSON..= proxyOutpostConfigName obj] : ["oidc_configuration" Data.Aeson.Types.ToJSON..= proxyOutpostConfigOidcConfiguration obj] : ["pk" Data.Aeson.Types.ToJSON..= proxyOutpostConfigPk obj] : ["scopes_to_request" Data.Aeson.Types.ToJSON..= proxyOutpostConfigScopesToRequest obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("skip_path_regex" Data.Aeson.Types.ToJSON..=)) (proxyOutpostConfigSkipPathRegex obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["access_token_validity" Data.Aeson.Types.ToJSON..= proxyOutpostConfigAccessTokenValidity obj] : ["assigned_application_name" Data.Aeson.Types.ToJSON..= proxyOutpostConfigAssignedApplicationName obj] : ["assigned_application_slug" Data.Aeson.Types.ToJSON..= proxyOutpostConfigAssignedApplicationSlug obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("basic_auth_enabled" Data.Aeson.Types.ToJSON..=)) (proxyOutpostConfigBasicAuthEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("basic_auth_password_attribute" Data.Aeson.Types.ToJSON..=)) (proxyOutpostConfigBasicAuthPasswordAttribute obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("basic_auth_user_attribute" Data.Aeson.Types.ToJSON..=)) (proxyOutpostConfigBasicAuthUserAttribute obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("certificate" Data.Aeson.Types.ToJSON..=)) (proxyOutpostConfigCertificate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("client_id" Data.Aeson.Types.ToJSON..=)) (proxyOutpostConfigClientId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("client_secret" Data.Aeson.Types.ToJSON..=)) (proxyOutpostConfigClientSecret obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cookie_domain" Data.Aeson.Types.ToJSON..=)) (proxyOutpostConfigCookieDomain obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cookie_secret" Data.Aeson.Types.ToJSON..=)) (proxyOutpostConfigCookieSecret obj) : ["external_host" Data.Aeson.Types.ToJSON..= proxyOutpostConfigExternalHost obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("intercept_header_auth" Data.Aeson.Types.ToJSON..=)) (proxyOutpostConfigInterceptHeaderAuth obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("internal_host" Data.Aeson.Types.ToJSON..=)) (proxyOutpostConfigInternalHost obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("internal_host_ssl_validation" Data.Aeson.Types.ToJSON..=)) (proxyOutpostConfigInternalHostSslValidation obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mode" Data.Aeson.Types.ToJSON..=)) (proxyOutpostConfigMode obj) : ["name" Data.Aeson.Types.ToJSON..= proxyOutpostConfigName obj] : ["oidc_configuration" Data.Aeson.Types.ToJSON..= proxyOutpostConfigOidcConfiguration obj] : ["pk" Data.Aeson.Types.ToJSON..= proxyOutpostConfigPk obj] : ["scopes_to_request" Data.Aeson.Types.ToJSON..= proxyOutpostConfigScopesToRequest obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("skip_path_regex" Data.Aeson.Types.ToJSON..=)) (proxyOutpostConfigSkipPathRegex obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON ProxyOutpostConfig where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "ProxyOutpostConfig" (\obj -> ((((((((((((((((((((GHC.Base.pure ProxyOutpostConfig GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "access_token_validity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assigned_application_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assigned_application_slug")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "basic_auth_enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "basic_auth_password_attribute")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "basic_auth_user_attribute")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "certificate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "client_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "client_secret")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cookie_domain")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cookie_secret")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "external_host")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "intercept_header_auth")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "internal_host")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "internal_host_ssl_validation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "oidc_configuration")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "scopes_to_request")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "skip_path_regex"))

-- | Create a new 'ProxyOutpostConfig' with all required fields.
mkProxyOutpostConfig ::
  -- | 'proxyOutpostConfigAccessTokenValidity'
  AuthentikAPI.Common.Nullable GHC.Types.Double ->
  -- | 'proxyOutpostConfigAssignedApplicationName'
  Data.Text.Internal.Text ->
  -- | 'proxyOutpostConfigAssignedApplicationSlug'
  Data.Text.Internal.Text ->
  -- | 'proxyOutpostConfigExternalHost'
  Data.Text.Internal.Text ->
  -- | 'proxyOutpostConfigName'
  Data.Text.Internal.Text ->
  -- | 'proxyOutpostConfigOidcConfiguration'
  ProxyOutpostConfigOidcConfiguration' ->
  -- | 'proxyOutpostConfigPk'
  GHC.Types.Int ->
  -- | 'proxyOutpostConfigScopesToRequest'
  [Data.Text.Internal.Text] ->
  ProxyOutpostConfig
mkProxyOutpostConfig proxyOutpostConfigAccessTokenValidity proxyOutpostConfigAssignedApplicationName proxyOutpostConfigAssignedApplicationSlug proxyOutpostConfigExternalHost proxyOutpostConfigName proxyOutpostConfigOidcConfiguration proxyOutpostConfigPk proxyOutpostConfigScopesToRequest =
  ProxyOutpostConfig
    { proxyOutpostConfigAccessTokenValidity = proxyOutpostConfigAccessTokenValidity,
      proxyOutpostConfigAssignedApplicationName = proxyOutpostConfigAssignedApplicationName,
      proxyOutpostConfigAssignedApplicationSlug = proxyOutpostConfigAssignedApplicationSlug,
      proxyOutpostConfigBasicAuthEnabled = GHC.Maybe.Nothing,
      proxyOutpostConfigBasicAuthPasswordAttribute = GHC.Maybe.Nothing,
      proxyOutpostConfigBasicAuthUserAttribute = GHC.Maybe.Nothing,
      proxyOutpostConfigCertificate = GHC.Maybe.Nothing,
      proxyOutpostConfigClientId = GHC.Maybe.Nothing,
      proxyOutpostConfigClientSecret = GHC.Maybe.Nothing,
      proxyOutpostConfigCookieDomain = GHC.Maybe.Nothing,
      proxyOutpostConfigCookieSecret = GHC.Maybe.Nothing,
      proxyOutpostConfigExternalHost = proxyOutpostConfigExternalHost,
      proxyOutpostConfigInterceptHeaderAuth = GHC.Maybe.Nothing,
      proxyOutpostConfigInternalHost = GHC.Maybe.Nothing,
      proxyOutpostConfigInternalHostSslValidation = GHC.Maybe.Nothing,
      proxyOutpostConfigMode = GHC.Maybe.Nothing,
      proxyOutpostConfigName = proxyOutpostConfigName,
      proxyOutpostConfigOidcConfiguration = proxyOutpostConfigOidcConfiguration,
      proxyOutpostConfigPk = proxyOutpostConfigPk,
      proxyOutpostConfigScopesToRequest = proxyOutpostConfigScopesToRequest,
      proxyOutpostConfigSkipPathRegex = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.ProxyOutpostConfig.properties.oidc_configuration.allOf@ in the specification.
data ProxyOutpostConfigOidcConfiguration' = ProxyOutpostConfigOidcConfiguration'
  { -- | authorization_endpoint
    proxyOutpostConfigOidcConfiguration'AuthorizationEndpoint :: Data.Text.Internal.Text,
    -- | end_session_endpoint
    proxyOutpostConfigOidcConfiguration'EndSessionEndpoint :: Data.Text.Internal.Text,
    -- | id_token_signing_alg_values_supported
    proxyOutpostConfigOidcConfiguration'IdTokenSigningAlgValuesSupported :: [Data.Text.Internal.Text],
    -- | introspection_endpoint
    proxyOutpostConfigOidcConfiguration'IntrospectionEndpoint :: Data.Text.Internal.Text,
    -- | issuer
    proxyOutpostConfigOidcConfiguration'Issuer :: Data.Text.Internal.Text,
    -- | jwks_uri
    proxyOutpostConfigOidcConfiguration'JwksUri :: Data.Text.Internal.Text,
    -- | response_types_supported
    proxyOutpostConfigOidcConfiguration'ResponseTypesSupported :: [Data.Text.Internal.Text],
    -- | subject_types_supported
    proxyOutpostConfigOidcConfiguration'SubjectTypesSupported :: [Data.Text.Internal.Text],
    -- | token_endpoint
    proxyOutpostConfigOidcConfiguration'TokenEndpoint :: Data.Text.Internal.Text,
    -- | token_endpoint_auth_methods_supported
    proxyOutpostConfigOidcConfiguration'TokenEndpointAuthMethodsSupported :: [Data.Text.Internal.Text],
    -- | userinfo_endpoint
    proxyOutpostConfigOidcConfiguration'UserinfoEndpoint :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON ProxyOutpostConfigOidcConfiguration' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["authorization_endpoint" Data.Aeson.Types.ToJSON..= proxyOutpostConfigOidcConfiguration'AuthorizationEndpoint obj] : ["end_session_endpoint" Data.Aeson.Types.ToJSON..= proxyOutpostConfigOidcConfiguration'EndSessionEndpoint obj] : ["id_token_signing_alg_values_supported" Data.Aeson.Types.ToJSON..= proxyOutpostConfigOidcConfiguration'IdTokenSigningAlgValuesSupported obj] : ["introspection_endpoint" Data.Aeson.Types.ToJSON..= proxyOutpostConfigOidcConfiguration'IntrospectionEndpoint obj] : ["issuer" Data.Aeson.Types.ToJSON..= proxyOutpostConfigOidcConfiguration'Issuer obj] : ["jwks_uri" Data.Aeson.Types.ToJSON..= proxyOutpostConfigOidcConfiguration'JwksUri obj] : ["response_types_supported" Data.Aeson.Types.ToJSON..= proxyOutpostConfigOidcConfiguration'ResponseTypesSupported obj] : ["subject_types_supported" Data.Aeson.Types.ToJSON..= proxyOutpostConfigOidcConfiguration'SubjectTypesSupported obj] : ["token_endpoint" Data.Aeson.Types.ToJSON..= proxyOutpostConfigOidcConfiguration'TokenEndpoint obj] : ["token_endpoint_auth_methods_supported" Data.Aeson.Types.ToJSON..= proxyOutpostConfigOidcConfiguration'TokenEndpointAuthMethodsSupported obj] : ["userinfo_endpoint" Data.Aeson.Types.ToJSON..= proxyOutpostConfigOidcConfiguration'UserinfoEndpoint obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["authorization_endpoint" Data.Aeson.Types.ToJSON..= proxyOutpostConfigOidcConfiguration'AuthorizationEndpoint obj] : ["end_session_endpoint" Data.Aeson.Types.ToJSON..= proxyOutpostConfigOidcConfiguration'EndSessionEndpoint obj] : ["id_token_signing_alg_values_supported" Data.Aeson.Types.ToJSON..= proxyOutpostConfigOidcConfiguration'IdTokenSigningAlgValuesSupported obj] : ["introspection_endpoint" Data.Aeson.Types.ToJSON..= proxyOutpostConfigOidcConfiguration'IntrospectionEndpoint obj] : ["issuer" Data.Aeson.Types.ToJSON..= proxyOutpostConfigOidcConfiguration'Issuer obj] : ["jwks_uri" Data.Aeson.Types.ToJSON..= proxyOutpostConfigOidcConfiguration'JwksUri obj] : ["response_types_supported" Data.Aeson.Types.ToJSON..= proxyOutpostConfigOidcConfiguration'ResponseTypesSupported obj] : ["subject_types_supported" Data.Aeson.Types.ToJSON..= proxyOutpostConfigOidcConfiguration'SubjectTypesSupported obj] : ["token_endpoint" Data.Aeson.Types.ToJSON..= proxyOutpostConfigOidcConfiguration'TokenEndpoint obj] : ["token_endpoint_auth_methods_supported" Data.Aeson.Types.ToJSON..= proxyOutpostConfigOidcConfiguration'TokenEndpointAuthMethodsSupported obj] : ["userinfo_endpoint" Data.Aeson.Types.ToJSON..= proxyOutpostConfigOidcConfiguration'UserinfoEndpoint obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON ProxyOutpostConfigOidcConfiguration' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "ProxyOutpostConfigOidcConfiguration'" (\obj -> ((((((((((GHC.Base.pure ProxyOutpostConfigOidcConfiguration' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "authorization_endpoint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "end_session_endpoint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id_token_signing_alg_values_supported")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "introspection_endpoint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "issuer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "jwks_uri")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "response_types_supported")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "subject_types_supported")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "token_endpoint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "token_endpoint_auth_methods_supported")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "userinfo_endpoint"))

-- | Create a new 'ProxyOutpostConfigOidcConfiguration'' with all required fields.
mkProxyOutpostConfigOidcConfiguration' ::
  -- | 'proxyOutpostConfigOidcConfiguration'AuthorizationEndpoint'
  Data.Text.Internal.Text ->
  -- | 'proxyOutpostConfigOidcConfiguration'EndSessionEndpoint'
  Data.Text.Internal.Text ->
  -- | 'proxyOutpostConfigOidcConfiguration'IdTokenSigningAlgValuesSupported'
  [Data.Text.Internal.Text] ->
  -- | 'proxyOutpostConfigOidcConfiguration'IntrospectionEndpoint'
  Data.Text.Internal.Text ->
  -- | 'proxyOutpostConfigOidcConfiguration'Issuer'
  Data.Text.Internal.Text ->
  -- | 'proxyOutpostConfigOidcConfiguration'JwksUri'
  Data.Text.Internal.Text ->
  -- | 'proxyOutpostConfigOidcConfiguration'ResponseTypesSupported'
  [Data.Text.Internal.Text] ->
  -- | 'proxyOutpostConfigOidcConfiguration'SubjectTypesSupported'
  [Data.Text.Internal.Text] ->
  -- | 'proxyOutpostConfigOidcConfiguration'TokenEndpoint'
  Data.Text.Internal.Text ->
  -- | 'proxyOutpostConfigOidcConfiguration'TokenEndpointAuthMethodsSupported'
  [Data.Text.Internal.Text] ->
  -- | 'proxyOutpostConfigOidcConfiguration'UserinfoEndpoint'
  Data.Text.Internal.Text ->
  ProxyOutpostConfigOidcConfiguration'
mkProxyOutpostConfigOidcConfiguration' proxyOutpostConfigOidcConfiguration'AuthorizationEndpoint proxyOutpostConfigOidcConfiguration'EndSessionEndpoint proxyOutpostConfigOidcConfiguration'IdTokenSigningAlgValuesSupported proxyOutpostConfigOidcConfiguration'IntrospectionEndpoint proxyOutpostConfigOidcConfiguration'Issuer proxyOutpostConfigOidcConfiguration'JwksUri proxyOutpostConfigOidcConfiguration'ResponseTypesSupported proxyOutpostConfigOidcConfiguration'SubjectTypesSupported proxyOutpostConfigOidcConfiguration'TokenEndpoint proxyOutpostConfigOidcConfiguration'TokenEndpointAuthMethodsSupported proxyOutpostConfigOidcConfiguration'UserinfoEndpoint =
  ProxyOutpostConfigOidcConfiguration'
    { proxyOutpostConfigOidcConfiguration'AuthorizationEndpoint = proxyOutpostConfigOidcConfiguration'AuthorizationEndpoint,
      proxyOutpostConfigOidcConfiguration'EndSessionEndpoint = proxyOutpostConfigOidcConfiguration'EndSessionEndpoint,
      proxyOutpostConfigOidcConfiguration'IdTokenSigningAlgValuesSupported = proxyOutpostConfigOidcConfiguration'IdTokenSigningAlgValuesSupported,
      proxyOutpostConfigOidcConfiguration'IntrospectionEndpoint = proxyOutpostConfigOidcConfiguration'IntrospectionEndpoint,
      proxyOutpostConfigOidcConfiguration'Issuer = proxyOutpostConfigOidcConfiguration'Issuer,
      proxyOutpostConfigOidcConfiguration'JwksUri = proxyOutpostConfigOidcConfiguration'JwksUri,
      proxyOutpostConfigOidcConfiguration'ResponseTypesSupported = proxyOutpostConfigOidcConfiguration'ResponseTypesSupported,
      proxyOutpostConfigOidcConfiguration'SubjectTypesSupported = proxyOutpostConfigOidcConfiguration'SubjectTypesSupported,
      proxyOutpostConfigOidcConfiguration'TokenEndpoint = proxyOutpostConfigOidcConfiguration'TokenEndpoint,
      proxyOutpostConfigOidcConfiguration'TokenEndpointAuthMethodsSupported = proxyOutpostConfigOidcConfiguration'TokenEndpointAuthMethodsSupported,
      proxyOutpostConfigOidcConfiguration'UserinfoEndpoint = proxyOutpostConfigOidcConfiguration'UserinfoEndpoint
    }

{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PatchedNotificationTransportRequest
module AuthentikAPI.Types.PatchedNotificationTransportRequest where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.NotificationTransportModeEnum
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.PatchedNotificationTransportRequest@ in the specification.
--
-- NotificationTransport Serializer
data PatchedNotificationTransportRequest = PatchedNotificationTransportRequest
  { -- | mode
    patchedNotificationTransportRequestMode :: (GHC.Maybe.Maybe NotificationTransportModeEnum),
    -- | name
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedNotificationTransportRequestName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | send_once: Only send notification once, for example when sending a webhook into a chat channel.
    patchedNotificationTransportRequestSendOnce :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | webhook_mapping_body: Customize the body of the request. Mapping should return data that is JSON-serializable.
    patchedNotificationTransportRequestWebhookMappingBody :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | webhook_mapping_headers: Configure additional headers to be sent. Mapping should return a dictionary of key-value pairs
    patchedNotificationTransportRequestWebhookMappingHeaders :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | webhook_url
    patchedNotificationTransportRequestWebhookUrl :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PatchedNotificationTransportRequest where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mode" Data.Aeson.Types.ToJSON..=)) (patchedNotificationTransportRequestMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (patchedNotificationTransportRequestName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("send_once" Data.Aeson.Types.ToJSON..=)) (patchedNotificationTransportRequestSendOnce obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("webhook_mapping_body" Data.Aeson.Types.ToJSON..=)) (patchedNotificationTransportRequestWebhookMappingBody obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("webhook_mapping_headers" Data.Aeson.Types.ToJSON..=)) (patchedNotificationTransportRequestWebhookMappingHeaders obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("webhook_url" Data.Aeson.Types.ToJSON..=)) (patchedNotificationTransportRequestWebhookUrl obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mode" Data.Aeson.Types.ToJSON..=)) (patchedNotificationTransportRequestMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (patchedNotificationTransportRequestName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("send_once" Data.Aeson.Types.ToJSON..=)) (patchedNotificationTransportRequestSendOnce obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("webhook_mapping_body" Data.Aeson.Types.ToJSON..=)) (patchedNotificationTransportRequestWebhookMappingBody obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("webhook_mapping_headers" Data.Aeson.Types.ToJSON..=)) (patchedNotificationTransportRequestWebhookMappingHeaders obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("webhook_url" Data.Aeson.Types.ToJSON..=)) (patchedNotificationTransportRequestWebhookUrl obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PatchedNotificationTransportRequest where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchedNotificationTransportRequest" (\obj -> (((((GHC.Base.pure PatchedNotificationTransportRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "send_once")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "webhook_mapping_body")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "webhook_mapping_headers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "webhook_url"))

-- | Create a new 'PatchedNotificationTransportRequest' with all required fields.
mkPatchedNotificationTransportRequest :: PatchedNotificationTransportRequest
mkPatchedNotificationTransportRequest =
  PatchedNotificationTransportRequest
    { patchedNotificationTransportRequestMode = GHC.Maybe.Nothing,
      patchedNotificationTransportRequestName = GHC.Maybe.Nothing,
      patchedNotificationTransportRequestSendOnce = GHC.Maybe.Nothing,
      patchedNotificationTransportRequestWebhookMappingBody = GHC.Maybe.Nothing,
      patchedNotificationTransportRequestWebhookMappingHeaders = GHC.Maybe.Nothing,
      patchedNotificationTransportRequestWebhookUrl = GHC.Maybe.Nothing
    }

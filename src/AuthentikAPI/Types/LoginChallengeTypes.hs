{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema LoginChallengeTypes
module AuthentikAPI.Types.LoginChallengeTypes where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.AppleLoginChallenge
import {-# SOURCE #-} AuthentikAPI.Types.PlexAuthenticationChallenge
import {-# SOURCE #-} AuthentikAPI.Types.RedirectChallenge
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the oneOf schema located at @components.schemas.LoginChallengeTypes.oneOf@ in the specification.
data LoginChallengeTypesVariants
  = LoginChallengeTypesRedirectChallenge RedirectChallenge
  | LoginChallengeTypesAppleLoginChallenge AppleLoginChallenge
  | LoginChallengeTypesPlexAuthenticationChallenge PlexAuthenticationChallenge
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON LoginChallengeTypesVariants where
  toJSON (LoginChallengeTypesRedirectChallenge a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (LoginChallengeTypesAppleLoginChallenge a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (LoginChallengeTypesPlexAuthenticationChallenge a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON LoginChallengeTypesVariants where
  parseJSON val = case (LoginChallengeTypesRedirectChallenge Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((LoginChallengeTypesAppleLoginChallenge Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((LoginChallengeTypesPlexAuthenticationChallenge Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched")) of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines an alias for the schema located at @components.schemas.LoginChallengeTypes.oneOf@ in the specification.
type LoginChallengeTypes = LoginChallengeTypesVariants

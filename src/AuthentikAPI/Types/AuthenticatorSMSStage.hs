{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema AuthenticatorSMSStage
module AuthentikAPI.Types.AuthenticatorSMSStage where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.AuthTypeEnum
import {-# SOURCE #-} AuthentikAPI.Types.FlowSet
import {-# SOURCE #-} AuthentikAPI.Types.ProviderEnum
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.AuthenticatorSMSStage@ in the specification.
--
-- AuthenticatorSMSStage Serializer
data AuthenticatorSMSStage = AuthenticatorSMSStage
  { -- | account_sid
    authenticatorSMSStageAccountSid :: Data.Text.Internal.Text,
    -- | auth
    authenticatorSMSStageAuth :: Data.Text.Internal.Text,
    -- | auth_password
    authenticatorSMSStageAuthPassword :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | auth_type
    authenticatorSMSStageAuthType :: (GHC.Maybe.Maybe AuthTypeEnum),
    -- | component: Get object type so that we know how to edit the object
    authenticatorSMSStageComponent :: Data.Text.Internal.Text,
    -- | configure_flow: Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
    authenticatorSMSStageConfigureFlow :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | flow_set
    authenticatorSMSStageFlowSet :: (GHC.Maybe.Maybe [FlowSet]),
    -- | friendly_name
    authenticatorSMSStageFriendlyName :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | from_number
    authenticatorSMSStageFromNumber :: Data.Text.Internal.Text,
    -- | mapping: Optionally modify the payload being sent to custom providers.
    authenticatorSMSStageMapping :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | meta_model_name: Return internal model name
    authenticatorSMSStageMetaModelName :: Data.Text.Internal.Text,
    -- | name
    authenticatorSMSStageName :: Data.Text.Internal.Text,
    -- | pk
    authenticatorSMSStagePk :: Data.Text.Internal.Text,
    -- | provider
    authenticatorSMSStageProvider :: ProviderEnum,
    -- | verbose_name: Return object\'s verbose_name
    authenticatorSMSStageVerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    authenticatorSMSStageVerboseNamePlural :: Data.Text.Internal.Text,
    -- | verify_only: When enabled, the Phone number is only used during enrollment to verify the users authenticity. Only a hash of the phone number is saved to ensure it is not reused in the future.
    authenticatorSMSStageVerifyOnly :: (GHC.Maybe.Maybe GHC.Types.Bool)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON AuthenticatorSMSStage where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["account_sid" Data.Aeson.Types.ToJSON..= authenticatorSMSStageAccountSid obj] : ["auth" Data.Aeson.Types.ToJSON..= authenticatorSMSStageAuth obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("auth_password" Data.Aeson.Types.ToJSON..=)) (authenticatorSMSStageAuthPassword obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("auth_type" Data.Aeson.Types.ToJSON..=)) (authenticatorSMSStageAuthType obj) : ["component" Data.Aeson.Types.ToJSON..= authenticatorSMSStageComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("configure_flow" Data.Aeson.Types.ToJSON..=)) (authenticatorSMSStageConfigureFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_set" Data.Aeson.Types.ToJSON..=)) (authenticatorSMSStageFlowSet obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("friendly_name" Data.Aeson.Types.ToJSON..=)) (authenticatorSMSStageFriendlyName obj) : ["from_number" Data.Aeson.Types.ToJSON..= authenticatorSMSStageFromNumber obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mapping" Data.Aeson.Types.ToJSON..=)) (authenticatorSMSStageMapping obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= authenticatorSMSStageMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= authenticatorSMSStageName obj] : ["pk" Data.Aeson.Types.ToJSON..= authenticatorSMSStagePk obj] : ["provider" Data.Aeson.Types.ToJSON..= authenticatorSMSStageProvider obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= authenticatorSMSStageVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= authenticatorSMSStageVerboseNamePlural obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verify_only" Data.Aeson.Types.ToJSON..=)) (authenticatorSMSStageVerifyOnly obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["account_sid" Data.Aeson.Types.ToJSON..= authenticatorSMSStageAccountSid obj] : ["auth" Data.Aeson.Types.ToJSON..= authenticatorSMSStageAuth obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("auth_password" Data.Aeson.Types.ToJSON..=)) (authenticatorSMSStageAuthPassword obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("auth_type" Data.Aeson.Types.ToJSON..=)) (authenticatorSMSStageAuthType obj) : ["component" Data.Aeson.Types.ToJSON..= authenticatorSMSStageComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("configure_flow" Data.Aeson.Types.ToJSON..=)) (authenticatorSMSStageConfigureFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_set" Data.Aeson.Types.ToJSON..=)) (authenticatorSMSStageFlowSet obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("friendly_name" Data.Aeson.Types.ToJSON..=)) (authenticatorSMSStageFriendlyName obj) : ["from_number" Data.Aeson.Types.ToJSON..= authenticatorSMSStageFromNumber obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mapping" Data.Aeson.Types.ToJSON..=)) (authenticatorSMSStageMapping obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= authenticatorSMSStageMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= authenticatorSMSStageName obj] : ["pk" Data.Aeson.Types.ToJSON..= authenticatorSMSStagePk obj] : ["provider" Data.Aeson.Types.ToJSON..= authenticatorSMSStageProvider obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= authenticatorSMSStageVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= authenticatorSMSStageVerboseNamePlural obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verify_only" Data.Aeson.Types.ToJSON..=)) (authenticatorSMSStageVerifyOnly obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON AuthenticatorSMSStage where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "AuthenticatorSMSStage" (\obj -> ((((((((((((((((GHC.Base.pure AuthenticatorSMSStage GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "account_sid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "auth")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "auth_password")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "auth_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "configure_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_set")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "friendly_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "from_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mapping")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "provider")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verify_only"))

-- | Create a new 'AuthenticatorSMSStage' with all required fields.
mkAuthenticatorSMSStage ::
  -- | 'authenticatorSMSStageAccountSid'
  Data.Text.Internal.Text ->
  -- | 'authenticatorSMSStageAuth'
  Data.Text.Internal.Text ->
  -- | 'authenticatorSMSStageComponent'
  Data.Text.Internal.Text ->
  -- | 'authenticatorSMSStageFromNumber'
  Data.Text.Internal.Text ->
  -- | 'authenticatorSMSStageMetaModelName'
  Data.Text.Internal.Text ->
  -- | 'authenticatorSMSStageName'
  Data.Text.Internal.Text ->
  -- | 'authenticatorSMSStagePk'
  Data.Text.Internal.Text ->
  -- | 'authenticatorSMSStageProvider'
  ProviderEnum ->
  -- | 'authenticatorSMSStageVerboseName'
  Data.Text.Internal.Text ->
  -- | 'authenticatorSMSStageVerboseNamePlural'
  Data.Text.Internal.Text ->
  AuthenticatorSMSStage
mkAuthenticatorSMSStage authenticatorSMSStageAccountSid authenticatorSMSStageAuth authenticatorSMSStageComponent authenticatorSMSStageFromNumber authenticatorSMSStageMetaModelName authenticatorSMSStageName authenticatorSMSStagePk authenticatorSMSStageProvider authenticatorSMSStageVerboseName authenticatorSMSStageVerboseNamePlural =
  AuthenticatorSMSStage
    { authenticatorSMSStageAccountSid = authenticatorSMSStageAccountSid,
      authenticatorSMSStageAuth = authenticatorSMSStageAuth,
      authenticatorSMSStageAuthPassword = GHC.Maybe.Nothing,
      authenticatorSMSStageAuthType = GHC.Maybe.Nothing,
      authenticatorSMSStageComponent = authenticatorSMSStageComponent,
      authenticatorSMSStageConfigureFlow = GHC.Maybe.Nothing,
      authenticatorSMSStageFlowSet = GHC.Maybe.Nothing,
      authenticatorSMSStageFriendlyName = GHC.Maybe.Nothing,
      authenticatorSMSStageFromNumber = authenticatorSMSStageFromNumber,
      authenticatorSMSStageMapping = GHC.Maybe.Nothing,
      authenticatorSMSStageMetaModelName = authenticatorSMSStageMetaModelName,
      authenticatorSMSStageName = authenticatorSMSStageName,
      authenticatorSMSStagePk = authenticatorSMSStagePk,
      authenticatorSMSStageProvider = authenticatorSMSStageProvider,
      authenticatorSMSStageVerboseName = authenticatorSMSStageVerboseName,
      authenticatorSMSStageVerboseNamePlural = authenticatorSMSStageVerboseNamePlural,
      authenticatorSMSStageVerifyOnly = GHC.Maybe.Nothing
    }

{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema SCIMSource
module AuthentikAPI.Types.SCIMSource where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.IntentEnum
import {-# SOURCE #-} AuthentikAPI.Types.Token
import {-# SOURCE #-} AuthentikAPI.Types.User
import {-# SOURCE #-} AuthentikAPI.Types.UserGroup
import {-# SOURCE #-} AuthentikAPI.Types.UserTypeEnum
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.SCIMSource@ in the specification.
--
-- SCIMSource Serializer
data SCIMSource = SCIMSource
  { -- | component: Get object component so that we know how to edit the object
    sCIMSourceComponent :: Data.Text.Internal.Text,
    -- | enabled
    sCIMSourceEnabled :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | group_property_mappings
    sCIMSourceGroupPropertyMappings :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | managed: Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
    sCIMSourceManaged :: (AuthentikAPI.Common.Nullable Data.Text.Internal.Text),
    -- | meta_model_name: Return internal model name
    sCIMSourceMetaModelName :: Data.Text.Internal.Text,
    -- | name: Source\'s display Name.
    sCIMSourceName :: Data.Text.Internal.Text,
    -- | pk
    sCIMSourcePk :: Data.Text.Internal.Text,
    -- | root_url: Get Root URL
    sCIMSourceRootUrl :: Data.Text.Internal.Text,
    -- | slug: Internal source name, used in URLs.
    --
    -- Constraints:
    --
    -- * Maximum length of 50
    -- * Must match pattern \'^[-a-zA-Z0-9_]+\$\'
    sCIMSourceSlug :: Data.Text.Internal.Text,
    -- | token_obj
    sCIMSourceTokenObj :: SCIMSourceTokenObj',
    -- | user_path_template
    sCIMSourceUserPathTemplate :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | user_property_mappings
    sCIMSourceUserPropertyMappings :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | verbose_name: Return object\'s verbose_name
    sCIMSourceVerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    sCIMSourceVerboseNamePlural :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SCIMSource where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["component" Data.Aeson.Types.ToJSON..= sCIMSourceComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enabled" Data.Aeson.Types.ToJSON..=)) (sCIMSourceEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("group_property_mappings" Data.Aeson.Types.ToJSON..=)) (sCIMSourceGroupPropertyMappings obj) : ["managed" Data.Aeson.Types.ToJSON..= sCIMSourceManaged obj] : ["meta_model_name" Data.Aeson.Types.ToJSON..= sCIMSourceMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= sCIMSourceName obj] : ["pk" Data.Aeson.Types.ToJSON..= sCIMSourcePk obj] : ["root_url" Data.Aeson.Types.ToJSON..= sCIMSourceRootUrl obj] : ["slug" Data.Aeson.Types.ToJSON..= sCIMSourceSlug obj] : ["token_obj" Data.Aeson.Types.ToJSON..= sCIMSourceTokenObj obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_path_template" Data.Aeson.Types.ToJSON..=)) (sCIMSourceUserPathTemplate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_property_mappings" Data.Aeson.Types.ToJSON..=)) (sCIMSourceUserPropertyMappings obj) : ["verbose_name" Data.Aeson.Types.ToJSON..= sCIMSourceVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= sCIMSourceVerboseNamePlural obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["component" Data.Aeson.Types.ToJSON..= sCIMSourceComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enabled" Data.Aeson.Types.ToJSON..=)) (sCIMSourceEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("group_property_mappings" Data.Aeson.Types.ToJSON..=)) (sCIMSourceGroupPropertyMappings obj) : ["managed" Data.Aeson.Types.ToJSON..= sCIMSourceManaged obj] : ["meta_model_name" Data.Aeson.Types.ToJSON..= sCIMSourceMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= sCIMSourceName obj] : ["pk" Data.Aeson.Types.ToJSON..= sCIMSourcePk obj] : ["root_url" Data.Aeson.Types.ToJSON..= sCIMSourceRootUrl obj] : ["slug" Data.Aeson.Types.ToJSON..= sCIMSourceSlug obj] : ["token_obj" Data.Aeson.Types.ToJSON..= sCIMSourceTokenObj obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_path_template" Data.Aeson.Types.ToJSON..=)) (sCIMSourceUserPathTemplate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_property_mappings" Data.Aeson.Types.ToJSON..=)) (sCIMSourceUserPropertyMappings obj) : ["verbose_name" Data.Aeson.Types.ToJSON..= sCIMSourceVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= sCIMSourceVerboseNamePlural obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SCIMSource where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SCIMSource" (\obj -> (((((((((((((GHC.Base.pure SCIMSource GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "group_property_mappings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "managed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "root_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "slug")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "token_obj")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "user_path_template")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "user_property_mappings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural"))

-- | Create a new 'SCIMSource' with all required fields.
mkSCIMSource ::
  -- | 'sCIMSourceComponent'
  Data.Text.Internal.Text ->
  -- | 'sCIMSourceManaged'
  AuthentikAPI.Common.Nullable Data.Text.Internal.Text ->
  -- | 'sCIMSourceMetaModelName'
  Data.Text.Internal.Text ->
  -- | 'sCIMSourceName'
  Data.Text.Internal.Text ->
  -- | 'sCIMSourcePk'
  Data.Text.Internal.Text ->
  -- | 'sCIMSourceRootUrl'
  Data.Text.Internal.Text ->
  -- | 'sCIMSourceSlug'
  Data.Text.Internal.Text ->
  -- | 'sCIMSourceTokenObj'
  SCIMSourceTokenObj' ->
  -- | 'sCIMSourceVerboseName'
  Data.Text.Internal.Text ->
  -- | 'sCIMSourceVerboseNamePlural'
  Data.Text.Internal.Text ->
  SCIMSource
mkSCIMSource sCIMSourceComponent sCIMSourceManaged sCIMSourceMetaModelName sCIMSourceName sCIMSourcePk sCIMSourceRootUrl sCIMSourceSlug sCIMSourceTokenObj sCIMSourceVerboseName sCIMSourceVerboseNamePlural =
  SCIMSource
    { sCIMSourceComponent = sCIMSourceComponent,
      sCIMSourceEnabled = GHC.Maybe.Nothing,
      sCIMSourceGroupPropertyMappings = GHC.Maybe.Nothing,
      sCIMSourceManaged = sCIMSourceManaged,
      sCIMSourceMetaModelName = sCIMSourceMetaModelName,
      sCIMSourceName = sCIMSourceName,
      sCIMSourcePk = sCIMSourcePk,
      sCIMSourceRootUrl = sCIMSourceRootUrl,
      sCIMSourceSlug = sCIMSourceSlug,
      sCIMSourceTokenObj = sCIMSourceTokenObj,
      sCIMSourceUserPathTemplate = GHC.Maybe.Nothing,
      sCIMSourceUserPropertyMappings = GHC.Maybe.Nothing,
      sCIMSourceVerboseName = sCIMSourceVerboseName,
      sCIMSourceVerboseNamePlural = sCIMSourceVerboseNamePlural
    }

-- | Defines the object schema located at @components.schemas.SCIMSource.properties.token_obj.allOf@ in the specification.
data SCIMSourceTokenObj' = SCIMSourceTokenObj'
  { -- | description
    sCIMSourceTokenObj'Description :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | expires
    sCIMSourceTokenObj'Expires :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | expiring
    sCIMSourceTokenObj'Expiring :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | identifier
    --
    -- Constraints:
    --
    -- * Maximum length of 255
    -- * Must match pattern \'^[-a-zA-Z0-9_]+\$\'
    sCIMSourceTokenObj'Identifier :: Data.Text.Internal.Text,
    -- | intent
    sCIMSourceTokenObj'Intent :: (GHC.Maybe.Maybe IntentEnum),
    -- | managed: Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
    sCIMSourceTokenObj'Managed :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | pk
    sCIMSourceTokenObj'Pk :: Data.Text.Internal.Text,
    -- | user
    sCIMSourceTokenObj'User :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | user_obj
    sCIMSourceTokenObj'UserObj :: SCIMSourceTokenObj'UserObj'
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SCIMSourceTokenObj' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (sCIMSourceTokenObj'Description obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires" Data.Aeson.Types.ToJSON..=)) (sCIMSourceTokenObj'Expires obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expiring" Data.Aeson.Types.ToJSON..=)) (sCIMSourceTokenObj'Expiring obj) : ["identifier" Data.Aeson.Types.ToJSON..= sCIMSourceTokenObj'Identifier obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("intent" Data.Aeson.Types.ToJSON..=)) (sCIMSourceTokenObj'Intent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("managed" Data.Aeson.Types.ToJSON..=)) (sCIMSourceTokenObj'Managed obj) : ["pk" Data.Aeson.Types.ToJSON..= sCIMSourceTokenObj'Pk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user" Data.Aeson.Types.ToJSON..=)) (sCIMSourceTokenObj'User obj) : ["user_obj" Data.Aeson.Types.ToJSON..= sCIMSourceTokenObj'UserObj obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (sCIMSourceTokenObj'Description obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires" Data.Aeson.Types.ToJSON..=)) (sCIMSourceTokenObj'Expires obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expiring" Data.Aeson.Types.ToJSON..=)) (sCIMSourceTokenObj'Expiring obj) : ["identifier" Data.Aeson.Types.ToJSON..= sCIMSourceTokenObj'Identifier obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("intent" Data.Aeson.Types.ToJSON..=)) (sCIMSourceTokenObj'Intent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("managed" Data.Aeson.Types.ToJSON..=)) (sCIMSourceTokenObj'Managed obj) : ["pk" Data.Aeson.Types.ToJSON..= sCIMSourceTokenObj'Pk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user" Data.Aeson.Types.ToJSON..=)) (sCIMSourceTokenObj'User obj) : ["user_obj" Data.Aeson.Types.ToJSON..= sCIMSourceTokenObj'UserObj obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SCIMSourceTokenObj' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SCIMSourceTokenObj'" (\obj -> ((((((((GHC.Base.pure SCIMSourceTokenObj' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expires")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expiring")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "identifier")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "intent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "managed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "user")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "user_obj"))

-- | Create a new 'SCIMSourceTokenObj'' with all required fields.
mkSCIMSourceTokenObj' ::
  -- | 'sCIMSourceTokenObj'Identifier'
  Data.Text.Internal.Text ->
  -- | 'sCIMSourceTokenObj'Pk'
  Data.Text.Internal.Text ->
  -- | 'sCIMSourceTokenObj'UserObj'
  SCIMSourceTokenObj'UserObj' ->
  SCIMSourceTokenObj'
mkSCIMSourceTokenObj' sCIMSourceTokenObj'Identifier sCIMSourceTokenObj'Pk sCIMSourceTokenObj'UserObj =
  SCIMSourceTokenObj'
    { sCIMSourceTokenObj'Description = GHC.Maybe.Nothing,
      sCIMSourceTokenObj'Expires = GHC.Maybe.Nothing,
      sCIMSourceTokenObj'Expiring = GHC.Maybe.Nothing,
      sCIMSourceTokenObj'Identifier = sCIMSourceTokenObj'Identifier,
      sCIMSourceTokenObj'Intent = GHC.Maybe.Nothing,
      sCIMSourceTokenObj'Managed = GHC.Maybe.Nothing,
      sCIMSourceTokenObj'Pk = sCIMSourceTokenObj'Pk,
      sCIMSourceTokenObj'User = GHC.Maybe.Nothing,
      sCIMSourceTokenObj'UserObj = sCIMSourceTokenObj'UserObj
    }

-- | Defines the object schema located at @components.schemas.SCIMSource.properties.token_obj.allOf.properties.user_obj.allOf@ in the specification.
data SCIMSourceTokenObj'UserObj' = SCIMSourceTokenObj'UserObj'
  { -- | attributes
    sCIMSourceTokenObj'UserObj'Attributes :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | avatar: User\'s avatar, either a http\/https URL or a data URI
    sCIMSourceTokenObj'UserObj'Avatar :: Data.Text.Internal.Text,
    -- | date_joined
    sCIMSourceTokenObj'UserObj'DateJoined :: Data.Text.Internal.Text,
    -- | email
    --
    -- Constraints:
    --
    -- * Maximum length of 254
    sCIMSourceTokenObj'UserObj'Email :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | groups
    sCIMSourceTokenObj'UserObj'Groups :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | groups_obj
    sCIMSourceTokenObj'UserObj'GroupsObj :: (AuthentikAPI.Common.Nullable [UserGroup]),
    -- | is_active: Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
    sCIMSourceTokenObj'UserObj'IsActive :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | is_superuser
    sCIMSourceTokenObj'UserObj'IsSuperuser :: GHC.Types.Bool,
    -- | last_login
    sCIMSourceTokenObj'UserObj'LastLogin :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | name: User\'s display name.
    sCIMSourceTokenObj'UserObj'Name :: Data.Text.Internal.Text,
    -- | password_change_date
    sCIMSourceTokenObj'UserObj'PasswordChangeDate :: Data.Text.Internal.Text,
    -- | path
    sCIMSourceTokenObj'UserObj'Path :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | pk
    sCIMSourceTokenObj'UserObj'Pk :: GHC.Types.Int,
    -- | type
    sCIMSourceTokenObj'UserObj'Type :: (GHC.Maybe.Maybe UserTypeEnum),
    -- | uid
    sCIMSourceTokenObj'UserObj'Uid :: Data.Text.Internal.Text,
    -- | username
    --
    -- Constraints:
    --
    -- * Maximum length of 150
    sCIMSourceTokenObj'UserObj'Username :: Data.Text.Internal.Text,
    -- | uuid
    sCIMSourceTokenObj'UserObj'Uuid :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SCIMSourceTokenObj'UserObj' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (sCIMSourceTokenObj'UserObj'Attributes obj) : ["avatar" Data.Aeson.Types.ToJSON..= sCIMSourceTokenObj'UserObj'Avatar obj] : ["date_joined" Data.Aeson.Types.ToJSON..= sCIMSourceTokenObj'UserObj'DateJoined obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (sCIMSourceTokenObj'UserObj'Email obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("groups" Data.Aeson.Types.ToJSON..=)) (sCIMSourceTokenObj'UserObj'Groups obj) : ["groups_obj" Data.Aeson.Types.ToJSON..= sCIMSourceTokenObj'UserObj'GroupsObj obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_active" Data.Aeson.Types.ToJSON..=)) (sCIMSourceTokenObj'UserObj'IsActive obj) : ["is_superuser" Data.Aeson.Types.ToJSON..= sCIMSourceTokenObj'UserObj'IsSuperuser obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_login" Data.Aeson.Types.ToJSON..=)) (sCIMSourceTokenObj'UserObj'LastLogin obj) : ["name" Data.Aeson.Types.ToJSON..= sCIMSourceTokenObj'UserObj'Name obj] : ["password_change_date" Data.Aeson.Types.ToJSON..= sCIMSourceTokenObj'UserObj'PasswordChangeDate obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("path" Data.Aeson.Types.ToJSON..=)) (sCIMSourceTokenObj'UserObj'Path obj) : ["pk" Data.Aeson.Types.ToJSON..= sCIMSourceTokenObj'UserObj'Pk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (sCIMSourceTokenObj'UserObj'Type obj) : ["uid" Data.Aeson.Types.ToJSON..= sCIMSourceTokenObj'UserObj'Uid obj] : ["username" Data.Aeson.Types.ToJSON..= sCIMSourceTokenObj'UserObj'Username obj] : ["uuid" Data.Aeson.Types.ToJSON..= sCIMSourceTokenObj'UserObj'Uuid obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (sCIMSourceTokenObj'UserObj'Attributes obj) : ["avatar" Data.Aeson.Types.ToJSON..= sCIMSourceTokenObj'UserObj'Avatar obj] : ["date_joined" Data.Aeson.Types.ToJSON..= sCIMSourceTokenObj'UserObj'DateJoined obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (sCIMSourceTokenObj'UserObj'Email obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("groups" Data.Aeson.Types.ToJSON..=)) (sCIMSourceTokenObj'UserObj'Groups obj) : ["groups_obj" Data.Aeson.Types.ToJSON..= sCIMSourceTokenObj'UserObj'GroupsObj obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_active" Data.Aeson.Types.ToJSON..=)) (sCIMSourceTokenObj'UserObj'IsActive obj) : ["is_superuser" Data.Aeson.Types.ToJSON..= sCIMSourceTokenObj'UserObj'IsSuperuser obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_login" Data.Aeson.Types.ToJSON..=)) (sCIMSourceTokenObj'UserObj'LastLogin obj) : ["name" Data.Aeson.Types.ToJSON..= sCIMSourceTokenObj'UserObj'Name obj] : ["password_change_date" Data.Aeson.Types.ToJSON..= sCIMSourceTokenObj'UserObj'PasswordChangeDate obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("path" Data.Aeson.Types.ToJSON..=)) (sCIMSourceTokenObj'UserObj'Path obj) : ["pk" Data.Aeson.Types.ToJSON..= sCIMSourceTokenObj'UserObj'Pk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (sCIMSourceTokenObj'UserObj'Type obj) : ["uid" Data.Aeson.Types.ToJSON..= sCIMSourceTokenObj'UserObj'Uid obj] : ["username" Data.Aeson.Types.ToJSON..= sCIMSourceTokenObj'UserObj'Username obj] : ["uuid" Data.Aeson.Types.ToJSON..= sCIMSourceTokenObj'UserObj'Uuid obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SCIMSourceTokenObj'UserObj' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SCIMSourceTokenObj'UserObj'" (\obj -> ((((((((((((((((GHC.Base.pure SCIMSourceTokenObj'UserObj' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "attributes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "avatar")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "date_joined")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "groups")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "groups_obj")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "is_active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "is_superuser")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "last_login")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "password_change_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "path")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "uid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "username")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "uuid"))

-- | Create a new 'SCIMSourceTokenObj'UserObj'' with all required fields.
mkSCIMSourceTokenObj'UserObj' ::
  -- | 'sCIMSourceTokenObj'UserObj'Avatar'
  Data.Text.Internal.Text ->
  -- | 'sCIMSourceTokenObj'UserObj'DateJoined'
  Data.Text.Internal.Text ->
  -- | 'sCIMSourceTokenObj'UserObj'GroupsObj'
  AuthentikAPI.Common.Nullable [UserGroup] ->
  -- | 'sCIMSourceTokenObj'UserObj'IsSuperuser'
  GHC.Types.Bool ->
  -- | 'sCIMSourceTokenObj'UserObj'Name'
  Data.Text.Internal.Text ->
  -- | 'sCIMSourceTokenObj'UserObj'PasswordChangeDate'
  Data.Text.Internal.Text ->
  -- | 'sCIMSourceTokenObj'UserObj'Pk'
  GHC.Types.Int ->
  -- | 'sCIMSourceTokenObj'UserObj'Uid'
  Data.Text.Internal.Text ->
  -- | 'sCIMSourceTokenObj'UserObj'Username'
  Data.Text.Internal.Text ->
  -- | 'sCIMSourceTokenObj'UserObj'Uuid'
  Data.Text.Internal.Text ->
  SCIMSourceTokenObj'UserObj'
mkSCIMSourceTokenObj'UserObj' sCIMSourceTokenObj'UserObj'Avatar sCIMSourceTokenObj'UserObj'DateJoined sCIMSourceTokenObj'UserObj'GroupsObj sCIMSourceTokenObj'UserObj'IsSuperuser sCIMSourceTokenObj'UserObj'Name sCIMSourceTokenObj'UserObj'PasswordChangeDate sCIMSourceTokenObj'UserObj'Pk sCIMSourceTokenObj'UserObj'Uid sCIMSourceTokenObj'UserObj'Username sCIMSourceTokenObj'UserObj'Uuid =
  SCIMSourceTokenObj'UserObj'
    { sCIMSourceTokenObj'UserObj'Attributes = GHC.Maybe.Nothing,
      sCIMSourceTokenObj'UserObj'Avatar = sCIMSourceTokenObj'UserObj'Avatar,
      sCIMSourceTokenObj'UserObj'DateJoined = sCIMSourceTokenObj'UserObj'DateJoined,
      sCIMSourceTokenObj'UserObj'Email = GHC.Maybe.Nothing,
      sCIMSourceTokenObj'UserObj'Groups = GHC.Maybe.Nothing,
      sCIMSourceTokenObj'UserObj'GroupsObj = sCIMSourceTokenObj'UserObj'GroupsObj,
      sCIMSourceTokenObj'UserObj'IsActive = GHC.Maybe.Nothing,
      sCIMSourceTokenObj'UserObj'IsSuperuser = sCIMSourceTokenObj'UserObj'IsSuperuser,
      sCIMSourceTokenObj'UserObj'LastLogin = GHC.Maybe.Nothing,
      sCIMSourceTokenObj'UserObj'Name = sCIMSourceTokenObj'UserObj'Name,
      sCIMSourceTokenObj'UserObj'PasswordChangeDate = sCIMSourceTokenObj'UserObj'PasswordChangeDate,
      sCIMSourceTokenObj'UserObj'Path = GHC.Maybe.Nothing,
      sCIMSourceTokenObj'UserObj'Pk = sCIMSourceTokenObj'UserObj'Pk,
      sCIMSourceTokenObj'UserObj'Type = GHC.Maybe.Nothing,
      sCIMSourceTokenObj'UserObj'Uid = sCIMSourceTokenObj'UserObj'Uid,
      sCIMSourceTokenObj'UserObj'Username = sCIMSourceTokenObj'UserObj'Username,
      sCIMSourceTokenObj'UserObj'Uuid = sCIMSourceTokenObj'UserObj'Uuid
    }

{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema ShellChallenge
module AuthentikAPI.Types.ShellChallenge where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.ContextualFlowInfo
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.ShellChallenge@ in the specification.
--
-- challenge type to render HTML as-is
data ShellChallenge = ShellChallenge
  { -- | body
    shellChallengeBody :: Data.Text.Internal.Text,
    -- | component
    shellChallengeComponent :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | flow_info: Contextual flow information for a challenge
    shellChallengeFlowInfo :: (GHC.Maybe.Maybe ContextualFlowInfo),
    -- | response_errors
    shellChallengeResponseErrors :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON ShellChallenge where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["body" Data.Aeson.Types.ToJSON..= shellChallengeBody obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("component" Data.Aeson.Types.ToJSON..=)) (shellChallengeComponent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_info" Data.Aeson.Types.ToJSON..=)) (shellChallengeFlowInfo obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("response_errors" Data.Aeson.Types.ToJSON..=)) (shellChallengeResponseErrors obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["body" Data.Aeson.Types.ToJSON..= shellChallengeBody obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("component" Data.Aeson.Types.ToJSON..=)) (shellChallengeComponent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_info" Data.Aeson.Types.ToJSON..=)) (shellChallengeFlowInfo obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("response_errors" Data.Aeson.Types.ToJSON..=)) (shellChallengeResponseErrors obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON ShellChallenge where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "ShellChallenge" (\obj -> (((GHC.Base.pure ShellChallenge GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "body")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_info")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "response_errors"))

-- | Create a new 'ShellChallenge' with all required fields.
mkShellChallenge ::
  -- | 'shellChallengeBody'
  Data.Text.Internal.Text ->
  ShellChallenge
mkShellChallenge shellChallengeBody =
  ShellChallenge
    { shellChallengeBody = shellChallengeBody,
      shellChallengeComponent = GHC.Maybe.Nothing,
      shellChallengeFlowInfo = GHC.Maybe.Nothing,
      shellChallengeResponseErrors = GHC.Maybe.Nothing
    }

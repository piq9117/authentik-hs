{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema FlowSetRequest
module AuthentikAPI.Types.FlowSetRequest where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.FlowLayoutEnum
import {-# SOURCE #-} AuthentikAPI.Types.PolicyEngineMode
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.FlowSetRequest@ in the specification.
--
-- Stripped down flow serializer
data FlowSetRequest = FlowSetRequest
  { -- | compatibility_mode: Enable compatibility mode, increases compatibility with password managers on mobile devices.
    flowSetRequestCompatibilityMode :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | denied_action: Configure what should happen when a flow denies access to a user.
    flowSetRequestDeniedAction :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | designation: Decides what this Flow is used for. For example, the Authentication flow is redirect to when an un-authenticated user visits authentik.
    flowSetRequestDesignation :: Data.Aeson.Types.Internal.Object,
    -- | layout
    flowSetRequestLayout :: (GHC.Maybe.Maybe FlowLayoutEnum),
    -- | name
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    flowSetRequestName :: Data.Text.Internal.Text,
    -- | policy_engine_mode
    flowSetRequestPolicyEngineMode :: (GHC.Maybe.Maybe PolicyEngineMode),
    -- | slug: Visible in the URL.
    --
    -- Constraints:
    --
    -- * Maximum length of 50
    -- * Minimum length of 1
    -- * Must match pattern \'^[-a-zA-Z0-9_]+\$\'
    flowSetRequestSlug :: Data.Text.Internal.Text,
    -- | title: Shown as the Title in Flow pages.
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    flowSetRequestTitle :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON FlowSetRequest where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("compatibility_mode" Data.Aeson.Types.ToJSON..=)) (flowSetRequestCompatibilityMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("denied_action" Data.Aeson.Types.ToJSON..=)) (flowSetRequestDeniedAction obj) : ["designation" Data.Aeson.Types.ToJSON..= flowSetRequestDesignation obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("layout" Data.Aeson.Types.ToJSON..=)) (flowSetRequestLayout obj) : ["name" Data.Aeson.Types.ToJSON..= flowSetRequestName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("policy_engine_mode" Data.Aeson.Types.ToJSON..=)) (flowSetRequestPolicyEngineMode obj) : ["slug" Data.Aeson.Types.ToJSON..= flowSetRequestSlug obj] : ["title" Data.Aeson.Types.ToJSON..= flowSetRequestTitle obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("compatibility_mode" Data.Aeson.Types.ToJSON..=)) (flowSetRequestCompatibilityMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("denied_action" Data.Aeson.Types.ToJSON..=)) (flowSetRequestDeniedAction obj) : ["designation" Data.Aeson.Types.ToJSON..= flowSetRequestDesignation obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("layout" Data.Aeson.Types.ToJSON..=)) (flowSetRequestLayout obj) : ["name" Data.Aeson.Types.ToJSON..= flowSetRequestName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("policy_engine_mode" Data.Aeson.Types.ToJSON..=)) (flowSetRequestPolicyEngineMode obj) : ["slug" Data.Aeson.Types.ToJSON..= flowSetRequestSlug obj] : ["title" Data.Aeson.Types.ToJSON..= flowSetRequestTitle obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON FlowSetRequest where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "FlowSetRequest" (\obj -> (((((((GHC.Base.pure FlowSetRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "compatibility_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "denied_action")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "designation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "layout")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "policy_engine_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "slug")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "title"))

-- | Create a new 'FlowSetRequest' with all required fields.
mkFlowSetRequest ::
  -- | 'flowSetRequestDesignation'
  Data.Aeson.Types.Internal.Object ->
  -- | 'flowSetRequestName'
  Data.Text.Internal.Text ->
  -- | 'flowSetRequestSlug'
  Data.Text.Internal.Text ->
  -- | 'flowSetRequestTitle'
  Data.Text.Internal.Text ->
  FlowSetRequest
mkFlowSetRequest flowSetRequestDesignation flowSetRequestName flowSetRequestSlug flowSetRequestTitle =
  FlowSetRequest
    { flowSetRequestCompatibilityMode = GHC.Maybe.Nothing,
      flowSetRequestDeniedAction = GHC.Maybe.Nothing,
      flowSetRequestDesignation = flowSetRequestDesignation,
      flowSetRequestLayout = GHC.Maybe.Nothing,
      flowSetRequestName = flowSetRequestName,
      flowSetRequestPolicyEngineMode = GHC.Maybe.Nothing,
      flowSetRequestSlug = flowSetRequestSlug,
      flowSetRequestTitle = flowSetRequestTitle
    }

{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema TypeCreate
module AuthentikAPI.Types.TypeCreate where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.TypeCreate@ in the specification.
--
-- Types of an object that can be created
data TypeCreate = TypeCreate
  { -- | component
    typeCreateComponent :: Data.Text.Internal.Text,
    -- | description
    typeCreateDescription :: Data.Text.Internal.Text,
    -- | icon_url
    typeCreateIconUrl :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | model_name
    typeCreateModelName :: Data.Text.Internal.Text,
    -- | name
    typeCreateName :: Data.Text.Internal.Text,
    -- | requires_enterprise
    typeCreateRequiresEnterprise :: (GHC.Maybe.Maybe GHC.Types.Bool)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON TypeCreate where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["component" Data.Aeson.Types.ToJSON..= typeCreateComponent obj] : ["description" Data.Aeson.Types.ToJSON..= typeCreateDescription obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("icon_url" Data.Aeson.Types.ToJSON..=)) (typeCreateIconUrl obj) : ["model_name" Data.Aeson.Types.ToJSON..= typeCreateModelName obj] : ["name" Data.Aeson.Types.ToJSON..= typeCreateName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("requires_enterprise" Data.Aeson.Types.ToJSON..=)) (typeCreateRequiresEnterprise obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["component" Data.Aeson.Types.ToJSON..= typeCreateComponent obj] : ["description" Data.Aeson.Types.ToJSON..= typeCreateDescription obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("icon_url" Data.Aeson.Types.ToJSON..=)) (typeCreateIconUrl obj) : ["model_name" Data.Aeson.Types.ToJSON..= typeCreateModelName obj] : ["name" Data.Aeson.Types.ToJSON..= typeCreateName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("requires_enterprise" Data.Aeson.Types.ToJSON..=)) (typeCreateRequiresEnterprise obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON TypeCreate where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "TypeCreate" (\obj -> (((((GHC.Base.pure TypeCreate GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "icon_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "requires_enterprise"))

-- | Create a new 'TypeCreate' with all required fields.
mkTypeCreate ::
  -- | 'typeCreateComponent'
  Data.Text.Internal.Text ->
  -- | 'typeCreateDescription'
  Data.Text.Internal.Text ->
  -- | 'typeCreateModelName'
  Data.Text.Internal.Text ->
  -- | 'typeCreateName'
  Data.Text.Internal.Text ->
  TypeCreate
mkTypeCreate typeCreateComponent typeCreateDescription typeCreateModelName typeCreateName =
  TypeCreate
    { typeCreateComponent = typeCreateComponent,
      typeCreateDescription = typeCreateDescription,
      typeCreateIconUrl = GHC.Maybe.Nothing,
      typeCreateModelName = typeCreateModelName,
      typeCreateName = typeCreateName,
      typeCreateRequiresEnterprise = GHC.Maybe.Nothing
    }

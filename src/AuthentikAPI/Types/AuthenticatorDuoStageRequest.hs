{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema AuthenticatorDuoStageRequest
module AuthentikAPI.Types.AuthenticatorDuoStageRequest where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.FlowSetRequest
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.AuthenticatorDuoStageRequest@ in the specification.
--
-- AuthenticatorDuoStage Serializer
data AuthenticatorDuoStageRequest = AuthenticatorDuoStageRequest
  { -- | admin_integration_key
    authenticatorDuoStageRequestAdminIntegrationKey :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | admin_secret_key
    authenticatorDuoStageRequestAdminSecretKey :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | api_hostname
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    authenticatorDuoStageRequestApiHostname :: Data.Text.Internal.Text,
    -- | client_id
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    authenticatorDuoStageRequestClientId :: Data.Text.Internal.Text,
    -- | client_secret
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    authenticatorDuoStageRequestClientSecret :: Data.Text.Internal.Text,
    -- | configure_flow: Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
    authenticatorDuoStageRequestConfigureFlow :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | flow_set
    authenticatorDuoStageRequestFlowSet :: (GHC.Maybe.Maybe [FlowSetRequest]),
    -- | friendly_name
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    authenticatorDuoStageRequestFriendlyName :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | name
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    authenticatorDuoStageRequestName :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON AuthenticatorDuoStageRequest where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("admin_integration_key" Data.Aeson.Types.ToJSON..=)) (authenticatorDuoStageRequestAdminIntegrationKey obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("admin_secret_key" Data.Aeson.Types.ToJSON..=)) (authenticatorDuoStageRequestAdminSecretKey obj) : ["api_hostname" Data.Aeson.Types.ToJSON..= authenticatorDuoStageRequestApiHostname obj] : ["client_id" Data.Aeson.Types.ToJSON..= authenticatorDuoStageRequestClientId obj] : ["client_secret" Data.Aeson.Types.ToJSON..= authenticatorDuoStageRequestClientSecret obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("configure_flow" Data.Aeson.Types.ToJSON..=)) (authenticatorDuoStageRequestConfigureFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_set" Data.Aeson.Types.ToJSON..=)) (authenticatorDuoStageRequestFlowSet obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("friendly_name" Data.Aeson.Types.ToJSON..=)) (authenticatorDuoStageRequestFriendlyName obj) : ["name" Data.Aeson.Types.ToJSON..= authenticatorDuoStageRequestName obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("admin_integration_key" Data.Aeson.Types.ToJSON..=)) (authenticatorDuoStageRequestAdminIntegrationKey obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("admin_secret_key" Data.Aeson.Types.ToJSON..=)) (authenticatorDuoStageRequestAdminSecretKey obj) : ["api_hostname" Data.Aeson.Types.ToJSON..= authenticatorDuoStageRequestApiHostname obj] : ["client_id" Data.Aeson.Types.ToJSON..= authenticatorDuoStageRequestClientId obj] : ["client_secret" Data.Aeson.Types.ToJSON..= authenticatorDuoStageRequestClientSecret obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("configure_flow" Data.Aeson.Types.ToJSON..=)) (authenticatorDuoStageRequestConfigureFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_set" Data.Aeson.Types.ToJSON..=)) (authenticatorDuoStageRequestFlowSet obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("friendly_name" Data.Aeson.Types.ToJSON..=)) (authenticatorDuoStageRequestFriendlyName obj) : ["name" Data.Aeson.Types.ToJSON..= authenticatorDuoStageRequestName obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON AuthenticatorDuoStageRequest where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "AuthenticatorDuoStageRequest" (\obj -> ((((((((GHC.Base.pure AuthenticatorDuoStageRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "admin_integration_key")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "admin_secret_key")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "api_hostname")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "client_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "client_secret")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "configure_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_set")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "friendly_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name"))

-- | Create a new 'AuthenticatorDuoStageRequest' with all required fields.
mkAuthenticatorDuoStageRequest ::
  -- | 'authenticatorDuoStageRequestApiHostname'
  Data.Text.Internal.Text ->
  -- | 'authenticatorDuoStageRequestClientId'
  Data.Text.Internal.Text ->
  -- | 'authenticatorDuoStageRequestClientSecret'
  Data.Text.Internal.Text ->
  -- | 'authenticatorDuoStageRequestName'
  Data.Text.Internal.Text ->
  AuthenticatorDuoStageRequest
mkAuthenticatorDuoStageRequest authenticatorDuoStageRequestApiHostname authenticatorDuoStageRequestClientId authenticatorDuoStageRequestClientSecret authenticatorDuoStageRequestName =
  AuthenticatorDuoStageRequest
    { authenticatorDuoStageRequestAdminIntegrationKey = GHC.Maybe.Nothing,
      authenticatorDuoStageRequestAdminSecretKey = GHC.Maybe.Nothing,
      authenticatorDuoStageRequestApiHostname = authenticatorDuoStageRequestApiHostname,
      authenticatorDuoStageRequestClientId = authenticatorDuoStageRequestClientId,
      authenticatorDuoStageRequestClientSecret = authenticatorDuoStageRequestClientSecret,
      authenticatorDuoStageRequestConfigureFlow = GHC.Maybe.Nothing,
      authenticatorDuoStageRequestFlowSet = GHC.Maybe.Nothing,
      authenticatorDuoStageRequestFriendlyName = GHC.Maybe.Nothing,
      authenticatorDuoStageRequestName = authenticatorDuoStageRequestName
    }

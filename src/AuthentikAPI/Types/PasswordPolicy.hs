{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PasswordPolicy
module AuthentikAPI.Types.PasswordPolicy where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.PasswordPolicy@ in the specification.
--
-- Password Policy Serializer
data PasswordPolicy = PasswordPolicy
  { -- | amount_digits
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of 0.0
    passwordPolicyAmountDigits :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | amount_lowercase
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of 0.0
    passwordPolicyAmountLowercase :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | amount_symbols
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of 0.0
    passwordPolicyAmountSymbols :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | amount_uppercase
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of 0.0
    passwordPolicyAmountUppercase :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | bound_to: Return objects policy is bound to
    passwordPolicyBoundTo :: GHC.Types.Int,
    -- | check_have_i_been_pwned
    passwordPolicyCheckHaveIBeenPwned :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | check_static_rules
    passwordPolicyCheckStaticRules :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | check_zxcvbn
    passwordPolicyCheckZxcvbn :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | component: Get object component so that we know how to edit the object
    passwordPolicyComponent :: Data.Text.Internal.Text,
    -- | error_message
    passwordPolicyErrorMessage :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | execution_logging: When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.
    passwordPolicyExecutionLogging :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | hibp_allowed_count: How many times the password hash is allowed to be on haveibeenpwned
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of 0.0
    passwordPolicyHibpAllowedCount :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | length_min
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of 0.0
    passwordPolicyLengthMin :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | meta_model_name: Return internal model name
    passwordPolicyMetaModelName :: Data.Text.Internal.Text,
    -- | name
    passwordPolicyName :: Data.Text.Internal.Text,
    -- | password_field: Field key to check, field keys defined in Prompt stages are available.
    passwordPolicyPasswordField :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | pk
    passwordPolicyPk :: Data.Text.Internal.Text,
    -- | symbol_charset
    passwordPolicySymbolCharset :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | verbose_name: Return object\'s verbose_name
    passwordPolicyVerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    passwordPolicyVerboseNamePlural :: Data.Text.Internal.Text,
    -- | zxcvbn_score_threshold: If the zxcvbn score is equal or less than this value, the policy will fail.
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of 0.0
    passwordPolicyZxcvbnScoreThreshold :: (GHC.Maybe.Maybe GHC.Types.Int)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PasswordPolicy where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_digits" Data.Aeson.Types.ToJSON..=)) (passwordPolicyAmountDigits obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_lowercase" Data.Aeson.Types.ToJSON..=)) (passwordPolicyAmountLowercase obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_symbols" Data.Aeson.Types.ToJSON..=)) (passwordPolicyAmountSymbols obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_uppercase" Data.Aeson.Types.ToJSON..=)) (passwordPolicyAmountUppercase obj) : ["bound_to" Data.Aeson.Types.ToJSON..= passwordPolicyBoundTo obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("check_have_i_been_pwned" Data.Aeson.Types.ToJSON..=)) (passwordPolicyCheckHaveIBeenPwned obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("check_static_rules" Data.Aeson.Types.ToJSON..=)) (passwordPolicyCheckStaticRules obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("check_zxcvbn" Data.Aeson.Types.ToJSON..=)) (passwordPolicyCheckZxcvbn obj) : ["component" Data.Aeson.Types.ToJSON..= passwordPolicyComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("error_message" Data.Aeson.Types.ToJSON..=)) (passwordPolicyErrorMessage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("execution_logging" Data.Aeson.Types.ToJSON..=)) (passwordPolicyExecutionLogging obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("hibp_allowed_count" Data.Aeson.Types.ToJSON..=)) (passwordPolicyHibpAllowedCount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("length_min" Data.Aeson.Types.ToJSON..=)) (passwordPolicyLengthMin obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= passwordPolicyMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= passwordPolicyName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("password_field" Data.Aeson.Types.ToJSON..=)) (passwordPolicyPasswordField obj) : ["pk" Data.Aeson.Types.ToJSON..= passwordPolicyPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("symbol_charset" Data.Aeson.Types.ToJSON..=)) (passwordPolicySymbolCharset obj) : ["verbose_name" Data.Aeson.Types.ToJSON..= passwordPolicyVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= passwordPolicyVerboseNamePlural obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("zxcvbn_score_threshold" Data.Aeson.Types.ToJSON..=)) (passwordPolicyZxcvbnScoreThreshold obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_digits" Data.Aeson.Types.ToJSON..=)) (passwordPolicyAmountDigits obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_lowercase" Data.Aeson.Types.ToJSON..=)) (passwordPolicyAmountLowercase obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_symbols" Data.Aeson.Types.ToJSON..=)) (passwordPolicyAmountSymbols obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_uppercase" Data.Aeson.Types.ToJSON..=)) (passwordPolicyAmountUppercase obj) : ["bound_to" Data.Aeson.Types.ToJSON..= passwordPolicyBoundTo obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("check_have_i_been_pwned" Data.Aeson.Types.ToJSON..=)) (passwordPolicyCheckHaveIBeenPwned obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("check_static_rules" Data.Aeson.Types.ToJSON..=)) (passwordPolicyCheckStaticRules obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("check_zxcvbn" Data.Aeson.Types.ToJSON..=)) (passwordPolicyCheckZxcvbn obj) : ["component" Data.Aeson.Types.ToJSON..= passwordPolicyComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("error_message" Data.Aeson.Types.ToJSON..=)) (passwordPolicyErrorMessage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("execution_logging" Data.Aeson.Types.ToJSON..=)) (passwordPolicyExecutionLogging obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("hibp_allowed_count" Data.Aeson.Types.ToJSON..=)) (passwordPolicyHibpAllowedCount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("length_min" Data.Aeson.Types.ToJSON..=)) (passwordPolicyLengthMin obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= passwordPolicyMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= passwordPolicyName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("password_field" Data.Aeson.Types.ToJSON..=)) (passwordPolicyPasswordField obj) : ["pk" Data.Aeson.Types.ToJSON..= passwordPolicyPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("symbol_charset" Data.Aeson.Types.ToJSON..=)) (passwordPolicySymbolCharset obj) : ["verbose_name" Data.Aeson.Types.ToJSON..= passwordPolicyVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= passwordPolicyVerboseNamePlural obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("zxcvbn_score_threshold" Data.Aeson.Types.ToJSON..=)) (passwordPolicyZxcvbnScoreThreshold obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PasswordPolicy where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PasswordPolicy" (\obj -> ((((((((((((((((((((GHC.Base.pure PasswordPolicy GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount_digits")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount_lowercase")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount_symbols")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount_uppercase")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "bound_to")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "check_have_i_been_pwned")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "check_static_rules")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "check_zxcvbn")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "error_message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "execution_logging")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "hibp_allowed_count")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "length_min")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "password_field")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "symbol_charset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "zxcvbn_score_threshold"))

-- | Create a new 'PasswordPolicy' with all required fields.
mkPasswordPolicy ::
  -- | 'passwordPolicyBoundTo'
  GHC.Types.Int ->
  -- | 'passwordPolicyComponent'
  Data.Text.Internal.Text ->
  -- | 'passwordPolicyMetaModelName'
  Data.Text.Internal.Text ->
  -- | 'passwordPolicyName'
  Data.Text.Internal.Text ->
  -- | 'passwordPolicyPk'
  Data.Text.Internal.Text ->
  -- | 'passwordPolicyVerboseName'
  Data.Text.Internal.Text ->
  -- | 'passwordPolicyVerboseNamePlural'
  Data.Text.Internal.Text ->
  PasswordPolicy
mkPasswordPolicy passwordPolicyBoundTo passwordPolicyComponent passwordPolicyMetaModelName passwordPolicyName passwordPolicyPk passwordPolicyVerboseName passwordPolicyVerboseNamePlural =
  PasswordPolicy
    { passwordPolicyAmountDigits = GHC.Maybe.Nothing,
      passwordPolicyAmountLowercase = GHC.Maybe.Nothing,
      passwordPolicyAmountSymbols = GHC.Maybe.Nothing,
      passwordPolicyAmountUppercase = GHC.Maybe.Nothing,
      passwordPolicyBoundTo = passwordPolicyBoundTo,
      passwordPolicyCheckHaveIBeenPwned = GHC.Maybe.Nothing,
      passwordPolicyCheckStaticRules = GHC.Maybe.Nothing,
      passwordPolicyCheckZxcvbn = GHC.Maybe.Nothing,
      passwordPolicyComponent = passwordPolicyComponent,
      passwordPolicyErrorMessage = GHC.Maybe.Nothing,
      passwordPolicyExecutionLogging = GHC.Maybe.Nothing,
      passwordPolicyHibpAllowedCount = GHC.Maybe.Nothing,
      passwordPolicyLengthMin = GHC.Maybe.Nothing,
      passwordPolicyMetaModelName = passwordPolicyMetaModelName,
      passwordPolicyName = passwordPolicyName,
      passwordPolicyPasswordField = GHC.Maybe.Nothing,
      passwordPolicyPk = passwordPolicyPk,
      passwordPolicySymbolCharset = GHC.Maybe.Nothing,
      passwordPolicyVerboseName = passwordPolicyVerboseName,
      passwordPolicyVerboseNamePlural = passwordPolicyVerboseNamePlural,
      passwordPolicyZxcvbnScoreThreshold = GHC.Maybe.Nothing
    }

{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema SCIMSourceRequest
module AuthentikAPI.Types.SCIMSourceRequest where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.SCIMSourceRequest@ in the specification.
--
-- SCIMSource Serializer
data SCIMSourceRequest = SCIMSourceRequest
  { -- | enabled
    sCIMSourceRequestEnabled :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | group_property_mappings
    sCIMSourceRequestGroupPropertyMappings :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | name: Source\'s display Name.
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    sCIMSourceRequestName :: Data.Text.Internal.Text,
    -- | slug: Internal source name, used in URLs.
    --
    -- Constraints:
    --
    -- * Maximum length of 50
    -- * Minimum length of 1
    -- * Must match pattern \'^[-a-zA-Z0-9_]+\$\'
    sCIMSourceRequestSlug :: Data.Text.Internal.Text,
    -- | user_path_template
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    sCIMSourceRequestUserPathTemplate :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | user_property_mappings
    sCIMSourceRequestUserPropertyMappings :: (GHC.Maybe.Maybe [Data.Text.Internal.Text])
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SCIMSourceRequest where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enabled" Data.Aeson.Types.ToJSON..=)) (sCIMSourceRequestEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("group_property_mappings" Data.Aeson.Types.ToJSON..=)) (sCIMSourceRequestGroupPropertyMappings obj) : ["name" Data.Aeson.Types.ToJSON..= sCIMSourceRequestName obj] : ["slug" Data.Aeson.Types.ToJSON..= sCIMSourceRequestSlug obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_path_template" Data.Aeson.Types.ToJSON..=)) (sCIMSourceRequestUserPathTemplate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_property_mappings" Data.Aeson.Types.ToJSON..=)) (sCIMSourceRequestUserPropertyMappings obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enabled" Data.Aeson.Types.ToJSON..=)) (sCIMSourceRequestEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("group_property_mappings" Data.Aeson.Types.ToJSON..=)) (sCIMSourceRequestGroupPropertyMappings obj) : ["name" Data.Aeson.Types.ToJSON..= sCIMSourceRequestName obj] : ["slug" Data.Aeson.Types.ToJSON..= sCIMSourceRequestSlug obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_path_template" Data.Aeson.Types.ToJSON..=)) (sCIMSourceRequestUserPathTemplate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_property_mappings" Data.Aeson.Types.ToJSON..=)) (sCIMSourceRequestUserPropertyMappings obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SCIMSourceRequest where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SCIMSourceRequest" (\obj -> (((((GHC.Base.pure SCIMSourceRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "group_property_mappings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "slug")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "user_path_template")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "user_property_mappings"))

-- | Create a new 'SCIMSourceRequest' with all required fields.
mkSCIMSourceRequest ::
  -- | 'sCIMSourceRequestName'
  Data.Text.Internal.Text ->
  -- | 'sCIMSourceRequestSlug'
  Data.Text.Internal.Text ->
  SCIMSourceRequest
mkSCIMSourceRequest sCIMSourceRequestName sCIMSourceRequestSlug =
  SCIMSourceRequest
    { sCIMSourceRequestEnabled = GHC.Maybe.Nothing,
      sCIMSourceRequestGroupPropertyMappings = GHC.Maybe.Nothing,
      sCIMSourceRequestName = sCIMSourceRequestName,
      sCIMSourceRequestSlug = sCIMSourceRequestSlug,
      sCIMSourceRequestUserPathTemplate = GHC.Maybe.Nothing,
      sCIMSourceRequestUserPropertyMappings = GHC.Maybe.Nothing
    }

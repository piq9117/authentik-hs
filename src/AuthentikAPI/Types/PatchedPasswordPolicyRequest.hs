{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PatchedPasswordPolicyRequest
module AuthentikAPI.Types.PatchedPasswordPolicyRequest where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.PatchedPasswordPolicyRequest@ in the specification.
--
-- Password Policy Serializer
data PatchedPasswordPolicyRequest = PatchedPasswordPolicyRequest
  { -- | amount_digits
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of 0.0
    patchedPasswordPolicyRequestAmountDigits :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | amount_lowercase
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of 0.0
    patchedPasswordPolicyRequestAmountLowercase :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | amount_symbols
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of 0.0
    patchedPasswordPolicyRequestAmountSymbols :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | amount_uppercase
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of 0.0
    patchedPasswordPolicyRequestAmountUppercase :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | check_have_i_been_pwned
    patchedPasswordPolicyRequestCheckHaveIBeenPwned :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | check_static_rules
    patchedPasswordPolicyRequestCheckStaticRules :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | check_zxcvbn
    patchedPasswordPolicyRequestCheckZxcvbn :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | error_message
    patchedPasswordPolicyRequestErrorMessage :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | execution_logging: When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.
    patchedPasswordPolicyRequestExecutionLogging :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | hibp_allowed_count: How many times the password hash is allowed to be on haveibeenpwned
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of 0.0
    patchedPasswordPolicyRequestHibpAllowedCount :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | length_min
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of 0.0
    patchedPasswordPolicyRequestLengthMin :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | name
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedPasswordPolicyRequestName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | password_field: Field key to check, field keys defined in Prompt stages are available.
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedPasswordPolicyRequestPasswordField :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | symbol_charset
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedPasswordPolicyRequestSymbolCharset :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | zxcvbn_score_threshold: If the zxcvbn score is equal or less than this value, the policy will fail.
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of 0.0
    patchedPasswordPolicyRequestZxcvbnScoreThreshold :: (GHC.Maybe.Maybe GHC.Types.Int)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PatchedPasswordPolicyRequest where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_digits" Data.Aeson.Types.ToJSON..=)) (patchedPasswordPolicyRequestAmountDigits obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_lowercase" Data.Aeson.Types.ToJSON..=)) (patchedPasswordPolicyRequestAmountLowercase obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_symbols" Data.Aeson.Types.ToJSON..=)) (patchedPasswordPolicyRequestAmountSymbols obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_uppercase" Data.Aeson.Types.ToJSON..=)) (patchedPasswordPolicyRequestAmountUppercase obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("check_have_i_been_pwned" Data.Aeson.Types.ToJSON..=)) (patchedPasswordPolicyRequestCheckHaveIBeenPwned obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("check_static_rules" Data.Aeson.Types.ToJSON..=)) (patchedPasswordPolicyRequestCheckStaticRules obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("check_zxcvbn" Data.Aeson.Types.ToJSON..=)) (patchedPasswordPolicyRequestCheckZxcvbn obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("error_message" Data.Aeson.Types.ToJSON..=)) (patchedPasswordPolicyRequestErrorMessage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("execution_logging" Data.Aeson.Types.ToJSON..=)) (patchedPasswordPolicyRequestExecutionLogging obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("hibp_allowed_count" Data.Aeson.Types.ToJSON..=)) (patchedPasswordPolicyRequestHibpAllowedCount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("length_min" Data.Aeson.Types.ToJSON..=)) (patchedPasswordPolicyRequestLengthMin obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (patchedPasswordPolicyRequestName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("password_field" Data.Aeson.Types.ToJSON..=)) (patchedPasswordPolicyRequestPasswordField obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("symbol_charset" Data.Aeson.Types.ToJSON..=)) (patchedPasswordPolicyRequestSymbolCharset obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("zxcvbn_score_threshold" Data.Aeson.Types.ToJSON..=)) (patchedPasswordPolicyRequestZxcvbnScoreThreshold obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_digits" Data.Aeson.Types.ToJSON..=)) (patchedPasswordPolicyRequestAmountDigits obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_lowercase" Data.Aeson.Types.ToJSON..=)) (patchedPasswordPolicyRequestAmountLowercase obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_symbols" Data.Aeson.Types.ToJSON..=)) (patchedPasswordPolicyRequestAmountSymbols obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_uppercase" Data.Aeson.Types.ToJSON..=)) (patchedPasswordPolicyRequestAmountUppercase obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("check_have_i_been_pwned" Data.Aeson.Types.ToJSON..=)) (patchedPasswordPolicyRequestCheckHaveIBeenPwned obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("check_static_rules" Data.Aeson.Types.ToJSON..=)) (patchedPasswordPolicyRequestCheckStaticRules obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("check_zxcvbn" Data.Aeson.Types.ToJSON..=)) (patchedPasswordPolicyRequestCheckZxcvbn obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("error_message" Data.Aeson.Types.ToJSON..=)) (patchedPasswordPolicyRequestErrorMessage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("execution_logging" Data.Aeson.Types.ToJSON..=)) (patchedPasswordPolicyRequestExecutionLogging obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("hibp_allowed_count" Data.Aeson.Types.ToJSON..=)) (patchedPasswordPolicyRequestHibpAllowedCount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("length_min" Data.Aeson.Types.ToJSON..=)) (patchedPasswordPolicyRequestLengthMin obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (patchedPasswordPolicyRequestName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("password_field" Data.Aeson.Types.ToJSON..=)) (patchedPasswordPolicyRequestPasswordField obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("symbol_charset" Data.Aeson.Types.ToJSON..=)) (patchedPasswordPolicyRequestSymbolCharset obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("zxcvbn_score_threshold" Data.Aeson.Types.ToJSON..=)) (patchedPasswordPolicyRequestZxcvbnScoreThreshold obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PatchedPasswordPolicyRequest where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchedPasswordPolicyRequest" (\obj -> ((((((((((((((GHC.Base.pure PatchedPasswordPolicyRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount_digits")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount_lowercase")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount_symbols")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount_uppercase")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "check_have_i_been_pwned")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "check_static_rules")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "check_zxcvbn")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "error_message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "execution_logging")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "hibp_allowed_count")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "length_min")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "password_field")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "symbol_charset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "zxcvbn_score_threshold"))

-- | Create a new 'PatchedPasswordPolicyRequest' with all required fields.
mkPatchedPasswordPolicyRequest :: PatchedPasswordPolicyRequest
mkPatchedPasswordPolicyRequest =
  PatchedPasswordPolicyRequest
    { patchedPasswordPolicyRequestAmountDigits = GHC.Maybe.Nothing,
      patchedPasswordPolicyRequestAmountLowercase = GHC.Maybe.Nothing,
      patchedPasswordPolicyRequestAmountSymbols = GHC.Maybe.Nothing,
      patchedPasswordPolicyRequestAmountUppercase = GHC.Maybe.Nothing,
      patchedPasswordPolicyRequestCheckHaveIBeenPwned = GHC.Maybe.Nothing,
      patchedPasswordPolicyRequestCheckStaticRules = GHC.Maybe.Nothing,
      patchedPasswordPolicyRequestCheckZxcvbn = GHC.Maybe.Nothing,
      patchedPasswordPolicyRequestErrorMessage = GHC.Maybe.Nothing,
      patchedPasswordPolicyRequestExecutionLogging = GHC.Maybe.Nothing,
      patchedPasswordPolicyRequestHibpAllowedCount = GHC.Maybe.Nothing,
      patchedPasswordPolicyRequestLengthMin = GHC.Maybe.Nothing,
      patchedPasswordPolicyRequestName = GHC.Maybe.Nothing,
      patchedPasswordPolicyRequestPasswordField = GHC.Maybe.Nothing,
      patchedPasswordPolicyRequestSymbolCharset = GHC.Maybe.Nothing,
      patchedPasswordPolicyRequestZxcvbnScoreThreshold = GHC.Maybe.Nothing
    }

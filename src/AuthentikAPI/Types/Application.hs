{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Application
module AuthentikAPI.Types.Application where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.PolicyEngineMode
import {-# SOURCE #-} AuthentikAPI.Types.Provider
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.Application@ in the specification.
--
-- Application Serializer
data Application = Application
  { -- | backchannel_providers
    applicationBackchannelProviders :: (GHC.Maybe.Maybe [GHC.Types.Int]),
    -- | backchannel_providers_obj
    applicationBackchannelProvidersObj :: [Provider],
    -- | group
    applicationGroup :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | launch_url: Allow formatting of launch URL
    applicationLaunchUrl :: (AuthentikAPI.Common.Nullable Data.Text.Internal.Text),
    -- | meta_description
    applicationMetaDescription :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | meta_icon: Get the URL to the App Icon image. If the name is \/static or starts with http
    -- it is returned as-is
    applicationMetaIcon :: (AuthentikAPI.Common.Nullable Data.Text.Internal.Text),
    -- | meta_launch_url
    applicationMetaLaunchUrl :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | meta_publisher
    applicationMetaPublisher :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | name: Application\'s display Name.
    applicationName :: Data.Text.Internal.Text,
    -- | open_in_new_tab: Open launch URL in a new browser tab or window.
    applicationOpenInNewTab :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | pk
    applicationPk :: Data.Text.Internal.Text,
    -- | policy_engine_mode
    applicationPolicyEngineMode :: (GHC.Maybe.Maybe PolicyEngineMode),
    -- | provider
    applicationProvider :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable GHC.Types.Int)),
    -- | provider_obj
    applicationProviderObj :: ApplicationProviderObj',
    -- | slug: Internal application name, used in URLs.
    --
    -- Constraints:
    --
    -- * Maximum length of 50
    -- * Must match pattern \'^[-a-zA-Z0-9_]+\$\'
    applicationSlug :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Application where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("backchannel_providers" Data.Aeson.Types.ToJSON..=)) (applicationBackchannelProviders obj) : ["backchannel_providers_obj" Data.Aeson.Types.ToJSON..= applicationBackchannelProvidersObj obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("group" Data.Aeson.Types.ToJSON..=)) (applicationGroup obj) : ["launch_url" Data.Aeson.Types.ToJSON..= applicationLaunchUrl obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("meta_description" Data.Aeson.Types.ToJSON..=)) (applicationMetaDescription obj) : ["meta_icon" Data.Aeson.Types.ToJSON..= applicationMetaIcon obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("meta_launch_url" Data.Aeson.Types.ToJSON..=)) (applicationMetaLaunchUrl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("meta_publisher" Data.Aeson.Types.ToJSON..=)) (applicationMetaPublisher obj) : ["name" Data.Aeson.Types.ToJSON..= applicationName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("open_in_new_tab" Data.Aeson.Types.ToJSON..=)) (applicationOpenInNewTab obj) : ["pk" Data.Aeson.Types.ToJSON..= applicationPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("policy_engine_mode" Data.Aeson.Types.ToJSON..=)) (applicationPolicyEngineMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("provider" Data.Aeson.Types.ToJSON..=)) (applicationProvider obj) : ["provider_obj" Data.Aeson.Types.ToJSON..= applicationProviderObj obj] : ["slug" Data.Aeson.Types.ToJSON..= applicationSlug obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("backchannel_providers" Data.Aeson.Types.ToJSON..=)) (applicationBackchannelProviders obj) : ["backchannel_providers_obj" Data.Aeson.Types.ToJSON..= applicationBackchannelProvidersObj obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("group" Data.Aeson.Types.ToJSON..=)) (applicationGroup obj) : ["launch_url" Data.Aeson.Types.ToJSON..= applicationLaunchUrl obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("meta_description" Data.Aeson.Types.ToJSON..=)) (applicationMetaDescription obj) : ["meta_icon" Data.Aeson.Types.ToJSON..= applicationMetaIcon obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("meta_launch_url" Data.Aeson.Types.ToJSON..=)) (applicationMetaLaunchUrl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("meta_publisher" Data.Aeson.Types.ToJSON..=)) (applicationMetaPublisher obj) : ["name" Data.Aeson.Types.ToJSON..= applicationName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("open_in_new_tab" Data.Aeson.Types.ToJSON..=)) (applicationOpenInNewTab obj) : ["pk" Data.Aeson.Types.ToJSON..= applicationPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("policy_engine_mode" Data.Aeson.Types.ToJSON..=)) (applicationPolicyEngineMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("provider" Data.Aeson.Types.ToJSON..=)) (applicationProvider obj) : ["provider_obj" Data.Aeson.Types.ToJSON..= applicationProviderObj obj] : ["slug" Data.Aeson.Types.ToJSON..= applicationSlug obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Application where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Application" (\obj -> ((((((((((((((GHC.Base.pure Application GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "backchannel_providers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "backchannel_providers_obj")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "group")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "launch_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "meta_description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_icon")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "meta_launch_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "meta_publisher")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "open_in_new_tab")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "policy_engine_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "provider")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "provider_obj")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "slug"))

-- | Create a new 'Application' with all required fields.
mkApplication ::
  -- | 'applicationBackchannelProvidersObj'
  [Provider] ->
  -- | 'applicationLaunchUrl'
  AuthentikAPI.Common.Nullable Data.Text.Internal.Text ->
  -- | 'applicationMetaIcon'
  AuthentikAPI.Common.Nullable Data.Text.Internal.Text ->
  -- | 'applicationName'
  Data.Text.Internal.Text ->
  -- | 'applicationPk'
  Data.Text.Internal.Text ->
  -- | 'applicationProviderObj'
  ApplicationProviderObj' ->
  -- | 'applicationSlug'
  Data.Text.Internal.Text ->
  Application
mkApplication applicationBackchannelProvidersObj applicationLaunchUrl applicationMetaIcon applicationName applicationPk applicationProviderObj applicationSlug =
  Application
    { applicationBackchannelProviders = GHC.Maybe.Nothing,
      applicationBackchannelProvidersObj = applicationBackchannelProvidersObj,
      applicationGroup = GHC.Maybe.Nothing,
      applicationLaunchUrl = applicationLaunchUrl,
      applicationMetaDescription = GHC.Maybe.Nothing,
      applicationMetaIcon = applicationMetaIcon,
      applicationMetaLaunchUrl = GHC.Maybe.Nothing,
      applicationMetaPublisher = GHC.Maybe.Nothing,
      applicationName = applicationName,
      applicationOpenInNewTab = GHC.Maybe.Nothing,
      applicationPk = applicationPk,
      applicationPolicyEngineMode = GHC.Maybe.Nothing,
      applicationProvider = GHC.Maybe.Nothing,
      applicationProviderObj = applicationProviderObj,
      applicationSlug = applicationSlug
    }

-- | Defines the object schema located at @components.schemas.Application.properties.provider_obj.allOf@ in the specification.
data ApplicationProviderObj' = ApplicationProviderObj'
  { -- | assigned_application_name: Application\'s display Name.
    applicationProviderObj'AssignedApplicationName :: Data.Text.Internal.Text,
    -- | assigned_application_slug: Internal application name, used in URLs.
    applicationProviderObj'AssignedApplicationSlug :: Data.Text.Internal.Text,
    -- | assigned_backchannel_application_name: Application\'s display Name.
    applicationProviderObj'AssignedBackchannelApplicationName :: Data.Text.Internal.Text,
    -- | assigned_backchannel_application_slug: Internal application name, used in URLs.
    applicationProviderObj'AssignedBackchannelApplicationSlug :: Data.Text.Internal.Text,
    -- | authentication_flow: Flow used for authentication when the associated application is accessed by an un-authenticated user.
    applicationProviderObj'AuthenticationFlow :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | authorization_flow: Flow used when authorizing this provider.
    applicationProviderObj'AuthorizationFlow :: Data.Text.Internal.Text,
    -- | component: Get object component so that we know how to edit the object
    applicationProviderObj'Component :: Data.Text.Internal.Text,
    -- | invalidation_flow: Flow used ending the session from a provider.
    applicationProviderObj'InvalidationFlow :: Data.Text.Internal.Text,
    -- | meta_model_name: Return internal model name
    applicationProviderObj'MetaModelName :: Data.Text.Internal.Text,
    -- | name
    applicationProviderObj'Name :: Data.Text.Internal.Text,
    -- | pk
    applicationProviderObj'Pk :: GHC.Types.Int,
    -- | property_mappings
    applicationProviderObj'PropertyMappings :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | verbose_name: Return object\'s verbose_name
    applicationProviderObj'VerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    applicationProviderObj'VerboseNamePlural :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON ApplicationProviderObj' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["assigned_application_name" Data.Aeson.Types.ToJSON..= applicationProviderObj'AssignedApplicationName obj] : ["assigned_application_slug" Data.Aeson.Types.ToJSON..= applicationProviderObj'AssignedApplicationSlug obj] : ["assigned_backchannel_application_name" Data.Aeson.Types.ToJSON..= applicationProviderObj'AssignedBackchannelApplicationName obj] : ["assigned_backchannel_application_slug" Data.Aeson.Types.ToJSON..= applicationProviderObj'AssignedBackchannelApplicationSlug obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication_flow" Data.Aeson.Types.ToJSON..=)) (applicationProviderObj'AuthenticationFlow obj) : ["authorization_flow" Data.Aeson.Types.ToJSON..= applicationProviderObj'AuthorizationFlow obj] : ["component" Data.Aeson.Types.ToJSON..= applicationProviderObj'Component obj] : ["invalidation_flow" Data.Aeson.Types.ToJSON..= applicationProviderObj'InvalidationFlow obj] : ["meta_model_name" Data.Aeson.Types.ToJSON..= applicationProviderObj'MetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= applicationProviderObj'Name obj] : ["pk" Data.Aeson.Types.ToJSON..= applicationProviderObj'Pk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings" Data.Aeson.Types.ToJSON..=)) (applicationProviderObj'PropertyMappings obj) : ["verbose_name" Data.Aeson.Types.ToJSON..= applicationProviderObj'VerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= applicationProviderObj'VerboseNamePlural obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["assigned_application_name" Data.Aeson.Types.ToJSON..= applicationProviderObj'AssignedApplicationName obj] : ["assigned_application_slug" Data.Aeson.Types.ToJSON..= applicationProviderObj'AssignedApplicationSlug obj] : ["assigned_backchannel_application_name" Data.Aeson.Types.ToJSON..= applicationProviderObj'AssignedBackchannelApplicationName obj] : ["assigned_backchannel_application_slug" Data.Aeson.Types.ToJSON..= applicationProviderObj'AssignedBackchannelApplicationSlug obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication_flow" Data.Aeson.Types.ToJSON..=)) (applicationProviderObj'AuthenticationFlow obj) : ["authorization_flow" Data.Aeson.Types.ToJSON..= applicationProviderObj'AuthorizationFlow obj] : ["component" Data.Aeson.Types.ToJSON..= applicationProviderObj'Component obj] : ["invalidation_flow" Data.Aeson.Types.ToJSON..= applicationProviderObj'InvalidationFlow obj] : ["meta_model_name" Data.Aeson.Types.ToJSON..= applicationProviderObj'MetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= applicationProviderObj'Name obj] : ["pk" Data.Aeson.Types.ToJSON..= applicationProviderObj'Pk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings" Data.Aeson.Types.ToJSON..=)) (applicationProviderObj'PropertyMappings obj) : ["verbose_name" Data.Aeson.Types.ToJSON..= applicationProviderObj'VerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= applicationProviderObj'VerboseNamePlural obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON ApplicationProviderObj' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "ApplicationProviderObj'" (\obj -> (((((((((((((GHC.Base.pure ApplicationProviderObj' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assigned_application_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assigned_application_slug")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assigned_backchannel_application_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assigned_backchannel_application_slug")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "authentication_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "authorization_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "invalidation_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "property_mappings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural"))

-- | Create a new 'ApplicationProviderObj'' with all required fields.
mkApplicationProviderObj' ::
  -- | 'applicationProviderObj'AssignedApplicationName'
  Data.Text.Internal.Text ->
  -- | 'applicationProviderObj'AssignedApplicationSlug'
  Data.Text.Internal.Text ->
  -- | 'applicationProviderObj'AssignedBackchannelApplicationName'
  Data.Text.Internal.Text ->
  -- | 'applicationProviderObj'AssignedBackchannelApplicationSlug'
  Data.Text.Internal.Text ->
  -- | 'applicationProviderObj'AuthorizationFlow'
  Data.Text.Internal.Text ->
  -- | 'applicationProviderObj'Component'
  Data.Text.Internal.Text ->
  -- | 'applicationProviderObj'InvalidationFlow'
  Data.Text.Internal.Text ->
  -- | 'applicationProviderObj'MetaModelName'
  Data.Text.Internal.Text ->
  -- | 'applicationProviderObj'Name'
  Data.Text.Internal.Text ->
  -- | 'applicationProviderObj'Pk'
  GHC.Types.Int ->
  -- | 'applicationProviderObj'VerboseName'
  Data.Text.Internal.Text ->
  -- | 'applicationProviderObj'VerboseNamePlural'
  Data.Text.Internal.Text ->
  ApplicationProviderObj'
mkApplicationProviderObj' applicationProviderObj'AssignedApplicationName applicationProviderObj'AssignedApplicationSlug applicationProviderObj'AssignedBackchannelApplicationName applicationProviderObj'AssignedBackchannelApplicationSlug applicationProviderObj'AuthorizationFlow applicationProviderObj'Component applicationProviderObj'InvalidationFlow applicationProviderObj'MetaModelName applicationProviderObj'Name applicationProviderObj'Pk applicationProviderObj'VerboseName applicationProviderObj'VerboseNamePlural =
  ApplicationProviderObj'
    { applicationProviderObj'AssignedApplicationName = applicationProviderObj'AssignedApplicationName,
      applicationProviderObj'AssignedApplicationSlug = applicationProviderObj'AssignedApplicationSlug,
      applicationProviderObj'AssignedBackchannelApplicationName = applicationProviderObj'AssignedBackchannelApplicationName,
      applicationProviderObj'AssignedBackchannelApplicationSlug = applicationProviderObj'AssignedBackchannelApplicationSlug,
      applicationProviderObj'AuthenticationFlow = GHC.Maybe.Nothing,
      applicationProviderObj'AuthorizationFlow = applicationProviderObj'AuthorizationFlow,
      applicationProviderObj'Component = applicationProviderObj'Component,
      applicationProviderObj'InvalidationFlow = applicationProviderObj'InvalidationFlow,
      applicationProviderObj'MetaModelName = applicationProviderObj'MetaModelName,
      applicationProviderObj'Name = applicationProviderObj'Name,
      applicationProviderObj'Pk = applicationProviderObj'Pk,
      applicationProviderObj'PropertyMappings = GHC.Maybe.Nothing,
      applicationProviderObj'VerboseName = applicationProviderObj'VerboseName,
      applicationProviderObj'VerboseNamePlural = applicationProviderObj'VerboseNamePlural
    }

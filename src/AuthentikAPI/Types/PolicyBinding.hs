{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PolicyBinding
module AuthentikAPI.Types.PolicyBinding where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.Group
import {-# SOURCE #-} AuthentikAPI.Types.GroupMember
import {-# SOURCE #-} AuthentikAPI.Types.Policy
import {-# SOURCE #-} AuthentikAPI.Types.Role
import {-# SOURCE #-} AuthentikAPI.Types.User
import {-# SOURCE #-} AuthentikAPI.Types.UserGroup
import {-# SOURCE #-} AuthentikAPI.Types.UserTypeEnum
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.PolicyBinding@ in the specification.
--
-- PolicyBinding Serializer
data PolicyBinding = PolicyBinding
  { -- | enabled
    policyBindingEnabled :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | failure_result: Result if the Policy execution fails.
    policyBindingFailureResult :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | group
    policyBindingGroup :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | group_obj
    policyBindingGroupObj :: PolicyBindingGroupObj',
    -- | negate: Negates the outcome of the policy. Messages are unaffected.
    policyBindingNegate :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | order
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of -2.1474836e9
    policyBindingOrder :: GHC.Types.Int,
    -- | pk
    policyBindingPk :: Data.Text.Internal.Text,
    -- | policy
    policyBindingPolicy :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | policy_obj
    policyBindingPolicyObj :: PolicyBindingPolicyObj',
    -- | target
    policyBindingTarget :: Data.Text.Internal.Text,
    -- | timeout: Timeout after which Policy execution is terminated.
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of 0.0
    policyBindingTimeout :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | user
    policyBindingUser :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable GHC.Types.Int)),
    -- | user_obj
    policyBindingUserObj :: PolicyBindingUserObj'
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PolicyBinding where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enabled" Data.Aeson.Types.ToJSON..=)) (policyBindingEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("failure_result" Data.Aeson.Types.ToJSON..=)) (policyBindingFailureResult obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("group" Data.Aeson.Types.ToJSON..=)) (policyBindingGroup obj) : ["group_obj" Data.Aeson.Types.ToJSON..= policyBindingGroupObj obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("negate" Data.Aeson.Types.ToJSON..=)) (policyBindingNegate obj) : ["order" Data.Aeson.Types.ToJSON..= policyBindingOrder obj] : ["pk" Data.Aeson.Types.ToJSON..= policyBindingPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("policy" Data.Aeson.Types.ToJSON..=)) (policyBindingPolicy obj) : ["policy_obj" Data.Aeson.Types.ToJSON..= policyBindingPolicyObj obj] : ["target" Data.Aeson.Types.ToJSON..= policyBindingTarget obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("timeout" Data.Aeson.Types.ToJSON..=)) (policyBindingTimeout obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user" Data.Aeson.Types.ToJSON..=)) (policyBindingUser obj) : ["user_obj" Data.Aeson.Types.ToJSON..= policyBindingUserObj obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enabled" Data.Aeson.Types.ToJSON..=)) (policyBindingEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("failure_result" Data.Aeson.Types.ToJSON..=)) (policyBindingFailureResult obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("group" Data.Aeson.Types.ToJSON..=)) (policyBindingGroup obj) : ["group_obj" Data.Aeson.Types.ToJSON..= policyBindingGroupObj obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("negate" Data.Aeson.Types.ToJSON..=)) (policyBindingNegate obj) : ["order" Data.Aeson.Types.ToJSON..= policyBindingOrder obj] : ["pk" Data.Aeson.Types.ToJSON..= policyBindingPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("policy" Data.Aeson.Types.ToJSON..=)) (policyBindingPolicy obj) : ["policy_obj" Data.Aeson.Types.ToJSON..= policyBindingPolicyObj obj] : ["target" Data.Aeson.Types.ToJSON..= policyBindingTarget obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("timeout" Data.Aeson.Types.ToJSON..=)) (policyBindingTimeout obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user" Data.Aeson.Types.ToJSON..=)) (policyBindingUser obj) : ["user_obj" Data.Aeson.Types.ToJSON..= policyBindingUserObj obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PolicyBinding where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PolicyBinding" (\obj -> ((((((((((((GHC.Base.pure PolicyBinding GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "failure_result")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "group")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "group_obj")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "negate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "order")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "policy")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "policy_obj")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "target")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "timeout")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "user")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "user_obj"))

-- | Create a new 'PolicyBinding' with all required fields.
mkPolicyBinding ::
  -- | 'policyBindingGroupObj'
  PolicyBindingGroupObj' ->
  -- | 'policyBindingOrder'
  GHC.Types.Int ->
  -- | 'policyBindingPk'
  Data.Text.Internal.Text ->
  -- | 'policyBindingPolicyObj'
  PolicyBindingPolicyObj' ->
  -- | 'policyBindingTarget'
  Data.Text.Internal.Text ->
  -- | 'policyBindingUserObj'
  PolicyBindingUserObj' ->
  PolicyBinding
mkPolicyBinding policyBindingGroupObj policyBindingOrder policyBindingPk policyBindingPolicyObj policyBindingTarget policyBindingUserObj =
  PolicyBinding
    { policyBindingEnabled = GHC.Maybe.Nothing,
      policyBindingFailureResult = GHC.Maybe.Nothing,
      policyBindingGroup = GHC.Maybe.Nothing,
      policyBindingGroupObj = policyBindingGroupObj,
      policyBindingNegate = GHC.Maybe.Nothing,
      policyBindingOrder = policyBindingOrder,
      policyBindingPk = policyBindingPk,
      policyBindingPolicy = GHC.Maybe.Nothing,
      policyBindingPolicyObj = policyBindingPolicyObj,
      policyBindingTarget = policyBindingTarget,
      policyBindingTimeout = GHC.Maybe.Nothing,
      policyBindingUser = GHC.Maybe.Nothing,
      policyBindingUserObj = policyBindingUserObj
    }

-- | Defines the object schema located at @components.schemas.PolicyBinding.properties.group_obj.allOf@ in the specification.
data PolicyBindingGroupObj' = PolicyBindingGroupObj'
  { -- | attributes
    policyBindingGroupObj'Attributes :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | is_superuser: Users added to this group will be superusers.
    policyBindingGroupObj'IsSuperuser :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | name
    policyBindingGroupObj'Name :: Data.Text.Internal.Text,
    -- | num_pk
    policyBindingGroupObj'NumPk :: GHC.Types.Int,
    -- | parent
    policyBindingGroupObj'Parent :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | parent_name
    policyBindingGroupObj'ParentName :: (AuthentikAPI.Common.Nullable Data.Text.Internal.Text),
    -- | pk
    policyBindingGroupObj'Pk :: Data.Text.Internal.Text,
    -- | roles
    policyBindingGroupObj'Roles :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | roles_obj
    policyBindingGroupObj'RolesObj :: [Role],
    -- | users
    policyBindingGroupObj'Users :: (GHC.Maybe.Maybe [GHC.Types.Int]),
    -- | users_obj
    policyBindingGroupObj'UsersObj :: (AuthentikAPI.Common.Nullable [GroupMember])
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PolicyBindingGroupObj' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (policyBindingGroupObj'Attributes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_superuser" Data.Aeson.Types.ToJSON..=)) (policyBindingGroupObj'IsSuperuser obj) : ["name" Data.Aeson.Types.ToJSON..= policyBindingGroupObj'Name obj] : ["num_pk" Data.Aeson.Types.ToJSON..= policyBindingGroupObj'NumPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("parent" Data.Aeson.Types.ToJSON..=)) (policyBindingGroupObj'Parent obj) : ["parent_name" Data.Aeson.Types.ToJSON..= policyBindingGroupObj'ParentName obj] : ["pk" Data.Aeson.Types.ToJSON..= policyBindingGroupObj'Pk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("roles" Data.Aeson.Types.ToJSON..=)) (policyBindingGroupObj'Roles obj) : ["roles_obj" Data.Aeson.Types.ToJSON..= policyBindingGroupObj'RolesObj obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("users" Data.Aeson.Types.ToJSON..=)) (policyBindingGroupObj'Users obj) : ["users_obj" Data.Aeson.Types.ToJSON..= policyBindingGroupObj'UsersObj obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (policyBindingGroupObj'Attributes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_superuser" Data.Aeson.Types.ToJSON..=)) (policyBindingGroupObj'IsSuperuser obj) : ["name" Data.Aeson.Types.ToJSON..= policyBindingGroupObj'Name obj] : ["num_pk" Data.Aeson.Types.ToJSON..= policyBindingGroupObj'NumPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("parent" Data.Aeson.Types.ToJSON..=)) (policyBindingGroupObj'Parent obj) : ["parent_name" Data.Aeson.Types.ToJSON..= policyBindingGroupObj'ParentName obj] : ["pk" Data.Aeson.Types.ToJSON..= policyBindingGroupObj'Pk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("roles" Data.Aeson.Types.ToJSON..=)) (policyBindingGroupObj'Roles obj) : ["roles_obj" Data.Aeson.Types.ToJSON..= policyBindingGroupObj'RolesObj obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("users" Data.Aeson.Types.ToJSON..=)) (policyBindingGroupObj'Users obj) : ["users_obj" Data.Aeson.Types.ToJSON..= policyBindingGroupObj'UsersObj obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PolicyBindingGroupObj' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PolicyBindingGroupObj'" (\obj -> ((((((((((GHC.Base.pure PolicyBindingGroupObj' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "attributes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "is_superuser")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "num_pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "parent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "parent_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "roles")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "roles_obj")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "users")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "users_obj"))

-- | Create a new 'PolicyBindingGroupObj'' with all required fields.
mkPolicyBindingGroupObj' ::
  -- | 'policyBindingGroupObj'Name'
  Data.Text.Internal.Text ->
  -- | 'policyBindingGroupObj'NumPk'
  GHC.Types.Int ->
  -- | 'policyBindingGroupObj'ParentName'
  AuthentikAPI.Common.Nullable Data.Text.Internal.Text ->
  -- | 'policyBindingGroupObj'Pk'
  Data.Text.Internal.Text ->
  -- | 'policyBindingGroupObj'RolesObj'
  [Role] ->
  -- | 'policyBindingGroupObj'UsersObj'
  AuthentikAPI.Common.Nullable [GroupMember] ->
  PolicyBindingGroupObj'
mkPolicyBindingGroupObj' policyBindingGroupObj'Name policyBindingGroupObj'NumPk policyBindingGroupObj'ParentName policyBindingGroupObj'Pk policyBindingGroupObj'RolesObj policyBindingGroupObj'UsersObj =
  PolicyBindingGroupObj'
    { policyBindingGroupObj'Attributes = GHC.Maybe.Nothing,
      policyBindingGroupObj'IsSuperuser = GHC.Maybe.Nothing,
      policyBindingGroupObj'Name = policyBindingGroupObj'Name,
      policyBindingGroupObj'NumPk = policyBindingGroupObj'NumPk,
      policyBindingGroupObj'Parent = GHC.Maybe.Nothing,
      policyBindingGroupObj'ParentName = policyBindingGroupObj'ParentName,
      policyBindingGroupObj'Pk = policyBindingGroupObj'Pk,
      policyBindingGroupObj'Roles = GHC.Maybe.Nothing,
      policyBindingGroupObj'RolesObj = policyBindingGroupObj'RolesObj,
      policyBindingGroupObj'Users = GHC.Maybe.Nothing,
      policyBindingGroupObj'UsersObj = policyBindingGroupObj'UsersObj
    }

-- | Defines the object schema located at @components.schemas.PolicyBinding.properties.policy_obj.allOf@ in the specification.
data PolicyBindingPolicyObj' = PolicyBindingPolicyObj'
  { -- | bound_to: Return objects policy is bound to
    policyBindingPolicyObj'BoundTo :: GHC.Types.Int,
    -- | component: Get object component so that we know how to edit the object
    policyBindingPolicyObj'Component :: Data.Text.Internal.Text,
    -- | execution_logging: When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.
    policyBindingPolicyObj'ExecutionLogging :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | meta_model_name: Return internal model name
    policyBindingPolicyObj'MetaModelName :: Data.Text.Internal.Text,
    -- | name
    policyBindingPolicyObj'Name :: Data.Text.Internal.Text,
    -- | pk
    policyBindingPolicyObj'Pk :: Data.Text.Internal.Text,
    -- | verbose_name: Return object\'s verbose_name
    policyBindingPolicyObj'VerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    policyBindingPolicyObj'VerboseNamePlural :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PolicyBindingPolicyObj' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["bound_to" Data.Aeson.Types.ToJSON..= policyBindingPolicyObj'BoundTo obj] : ["component" Data.Aeson.Types.ToJSON..= policyBindingPolicyObj'Component obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("execution_logging" Data.Aeson.Types.ToJSON..=)) (policyBindingPolicyObj'ExecutionLogging obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= policyBindingPolicyObj'MetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= policyBindingPolicyObj'Name obj] : ["pk" Data.Aeson.Types.ToJSON..= policyBindingPolicyObj'Pk obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= policyBindingPolicyObj'VerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= policyBindingPolicyObj'VerboseNamePlural obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["bound_to" Data.Aeson.Types.ToJSON..= policyBindingPolicyObj'BoundTo obj] : ["component" Data.Aeson.Types.ToJSON..= policyBindingPolicyObj'Component obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("execution_logging" Data.Aeson.Types.ToJSON..=)) (policyBindingPolicyObj'ExecutionLogging obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= policyBindingPolicyObj'MetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= policyBindingPolicyObj'Name obj] : ["pk" Data.Aeson.Types.ToJSON..= policyBindingPolicyObj'Pk obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= policyBindingPolicyObj'VerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= policyBindingPolicyObj'VerboseNamePlural obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PolicyBindingPolicyObj' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PolicyBindingPolicyObj'" (\obj -> (((((((GHC.Base.pure PolicyBindingPolicyObj' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "bound_to")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "execution_logging")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural"))

-- | Create a new 'PolicyBindingPolicyObj'' with all required fields.
mkPolicyBindingPolicyObj' ::
  -- | 'policyBindingPolicyObj'BoundTo'
  GHC.Types.Int ->
  -- | 'policyBindingPolicyObj'Component'
  Data.Text.Internal.Text ->
  -- | 'policyBindingPolicyObj'MetaModelName'
  Data.Text.Internal.Text ->
  -- | 'policyBindingPolicyObj'Name'
  Data.Text.Internal.Text ->
  -- | 'policyBindingPolicyObj'Pk'
  Data.Text.Internal.Text ->
  -- | 'policyBindingPolicyObj'VerboseName'
  Data.Text.Internal.Text ->
  -- | 'policyBindingPolicyObj'VerboseNamePlural'
  Data.Text.Internal.Text ->
  PolicyBindingPolicyObj'
mkPolicyBindingPolicyObj' policyBindingPolicyObj'BoundTo policyBindingPolicyObj'Component policyBindingPolicyObj'MetaModelName policyBindingPolicyObj'Name policyBindingPolicyObj'Pk policyBindingPolicyObj'VerboseName policyBindingPolicyObj'VerboseNamePlural =
  PolicyBindingPolicyObj'
    { policyBindingPolicyObj'BoundTo = policyBindingPolicyObj'BoundTo,
      policyBindingPolicyObj'Component = policyBindingPolicyObj'Component,
      policyBindingPolicyObj'ExecutionLogging = GHC.Maybe.Nothing,
      policyBindingPolicyObj'MetaModelName = policyBindingPolicyObj'MetaModelName,
      policyBindingPolicyObj'Name = policyBindingPolicyObj'Name,
      policyBindingPolicyObj'Pk = policyBindingPolicyObj'Pk,
      policyBindingPolicyObj'VerboseName = policyBindingPolicyObj'VerboseName,
      policyBindingPolicyObj'VerboseNamePlural = policyBindingPolicyObj'VerboseNamePlural
    }

-- | Defines the object schema located at @components.schemas.PolicyBinding.properties.user_obj.allOf@ in the specification.
data PolicyBindingUserObj' = PolicyBindingUserObj'
  { -- | attributes
    policyBindingUserObj'Attributes :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | avatar: User\'s avatar, either a http\/https URL or a data URI
    policyBindingUserObj'Avatar :: Data.Text.Internal.Text,
    -- | date_joined
    policyBindingUserObj'DateJoined :: Data.Text.Internal.Text,
    -- | email
    --
    -- Constraints:
    --
    -- * Maximum length of 254
    policyBindingUserObj'Email :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | groups
    policyBindingUserObj'Groups :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | groups_obj
    policyBindingUserObj'GroupsObj :: (AuthentikAPI.Common.Nullable [UserGroup]),
    -- | is_active: Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
    policyBindingUserObj'IsActive :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | is_superuser
    policyBindingUserObj'IsSuperuser :: GHC.Types.Bool,
    -- | last_login
    policyBindingUserObj'LastLogin :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | name: User\'s display name.
    policyBindingUserObj'Name :: Data.Text.Internal.Text,
    -- | password_change_date
    policyBindingUserObj'PasswordChangeDate :: Data.Text.Internal.Text,
    -- | path
    policyBindingUserObj'Path :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | pk
    policyBindingUserObj'Pk :: GHC.Types.Int,
    -- | type
    policyBindingUserObj'Type :: (GHC.Maybe.Maybe UserTypeEnum),
    -- | uid
    policyBindingUserObj'Uid :: Data.Text.Internal.Text,
    -- | username
    --
    -- Constraints:
    --
    -- * Maximum length of 150
    policyBindingUserObj'Username :: Data.Text.Internal.Text,
    -- | uuid
    policyBindingUserObj'Uuid :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PolicyBindingUserObj' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (policyBindingUserObj'Attributes obj) : ["avatar" Data.Aeson.Types.ToJSON..= policyBindingUserObj'Avatar obj] : ["date_joined" Data.Aeson.Types.ToJSON..= policyBindingUserObj'DateJoined obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (policyBindingUserObj'Email obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("groups" Data.Aeson.Types.ToJSON..=)) (policyBindingUserObj'Groups obj) : ["groups_obj" Data.Aeson.Types.ToJSON..= policyBindingUserObj'GroupsObj obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_active" Data.Aeson.Types.ToJSON..=)) (policyBindingUserObj'IsActive obj) : ["is_superuser" Data.Aeson.Types.ToJSON..= policyBindingUserObj'IsSuperuser obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_login" Data.Aeson.Types.ToJSON..=)) (policyBindingUserObj'LastLogin obj) : ["name" Data.Aeson.Types.ToJSON..= policyBindingUserObj'Name obj] : ["password_change_date" Data.Aeson.Types.ToJSON..= policyBindingUserObj'PasswordChangeDate obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("path" Data.Aeson.Types.ToJSON..=)) (policyBindingUserObj'Path obj) : ["pk" Data.Aeson.Types.ToJSON..= policyBindingUserObj'Pk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (policyBindingUserObj'Type obj) : ["uid" Data.Aeson.Types.ToJSON..= policyBindingUserObj'Uid obj] : ["username" Data.Aeson.Types.ToJSON..= policyBindingUserObj'Username obj] : ["uuid" Data.Aeson.Types.ToJSON..= policyBindingUserObj'Uuid obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (policyBindingUserObj'Attributes obj) : ["avatar" Data.Aeson.Types.ToJSON..= policyBindingUserObj'Avatar obj] : ["date_joined" Data.Aeson.Types.ToJSON..= policyBindingUserObj'DateJoined obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (policyBindingUserObj'Email obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("groups" Data.Aeson.Types.ToJSON..=)) (policyBindingUserObj'Groups obj) : ["groups_obj" Data.Aeson.Types.ToJSON..= policyBindingUserObj'GroupsObj obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_active" Data.Aeson.Types.ToJSON..=)) (policyBindingUserObj'IsActive obj) : ["is_superuser" Data.Aeson.Types.ToJSON..= policyBindingUserObj'IsSuperuser obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_login" Data.Aeson.Types.ToJSON..=)) (policyBindingUserObj'LastLogin obj) : ["name" Data.Aeson.Types.ToJSON..= policyBindingUserObj'Name obj] : ["password_change_date" Data.Aeson.Types.ToJSON..= policyBindingUserObj'PasswordChangeDate obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("path" Data.Aeson.Types.ToJSON..=)) (policyBindingUserObj'Path obj) : ["pk" Data.Aeson.Types.ToJSON..= policyBindingUserObj'Pk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (policyBindingUserObj'Type obj) : ["uid" Data.Aeson.Types.ToJSON..= policyBindingUserObj'Uid obj] : ["username" Data.Aeson.Types.ToJSON..= policyBindingUserObj'Username obj] : ["uuid" Data.Aeson.Types.ToJSON..= policyBindingUserObj'Uuid obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PolicyBindingUserObj' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PolicyBindingUserObj'" (\obj -> ((((((((((((((((GHC.Base.pure PolicyBindingUserObj' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "attributes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "avatar")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "date_joined")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "groups")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "groups_obj")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "is_active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "is_superuser")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "last_login")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "password_change_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "path")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "uid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "username")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "uuid"))

-- | Create a new 'PolicyBindingUserObj'' with all required fields.
mkPolicyBindingUserObj' ::
  -- | 'policyBindingUserObj'Avatar'
  Data.Text.Internal.Text ->
  -- | 'policyBindingUserObj'DateJoined'
  Data.Text.Internal.Text ->
  -- | 'policyBindingUserObj'GroupsObj'
  AuthentikAPI.Common.Nullable [UserGroup] ->
  -- | 'policyBindingUserObj'IsSuperuser'
  GHC.Types.Bool ->
  -- | 'policyBindingUserObj'Name'
  Data.Text.Internal.Text ->
  -- | 'policyBindingUserObj'PasswordChangeDate'
  Data.Text.Internal.Text ->
  -- | 'policyBindingUserObj'Pk'
  GHC.Types.Int ->
  -- | 'policyBindingUserObj'Uid'
  Data.Text.Internal.Text ->
  -- | 'policyBindingUserObj'Username'
  Data.Text.Internal.Text ->
  -- | 'policyBindingUserObj'Uuid'
  Data.Text.Internal.Text ->
  PolicyBindingUserObj'
mkPolicyBindingUserObj' policyBindingUserObj'Avatar policyBindingUserObj'DateJoined policyBindingUserObj'GroupsObj policyBindingUserObj'IsSuperuser policyBindingUserObj'Name policyBindingUserObj'PasswordChangeDate policyBindingUserObj'Pk policyBindingUserObj'Uid policyBindingUserObj'Username policyBindingUserObj'Uuid =
  PolicyBindingUserObj'
    { policyBindingUserObj'Attributes = GHC.Maybe.Nothing,
      policyBindingUserObj'Avatar = policyBindingUserObj'Avatar,
      policyBindingUserObj'DateJoined = policyBindingUserObj'DateJoined,
      policyBindingUserObj'Email = GHC.Maybe.Nothing,
      policyBindingUserObj'Groups = GHC.Maybe.Nothing,
      policyBindingUserObj'GroupsObj = policyBindingUserObj'GroupsObj,
      policyBindingUserObj'IsActive = GHC.Maybe.Nothing,
      policyBindingUserObj'IsSuperuser = policyBindingUserObj'IsSuperuser,
      policyBindingUserObj'LastLogin = GHC.Maybe.Nothing,
      policyBindingUserObj'Name = policyBindingUserObj'Name,
      policyBindingUserObj'PasswordChangeDate = policyBindingUserObj'PasswordChangeDate,
      policyBindingUserObj'Path = GHC.Maybe.Nothing,
      policyBindingUserObj'Pk = policyBindingUserObj'Pk,
      policyBindingUserObj'Type = GHC.Maybe.Nothing,
      policyBindingUserObj'Uid = policyBindingUserObj'Uid,
      policyBindingUserObj'Username = policyBindingUserObj'Username,
      policyBindingUserObj'Uuid = policyBindingUserObj'Uuid
    }

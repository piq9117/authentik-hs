{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Policy
module AuthentikAPI.Types.Policy where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.Policy@ in the specification.
--
-- Policy Serializer
data Policy = Policy
  { -- | bound_to: Return objects policy is bound to
    policyBoundTo :: GHC.Types.Int,
    -- | component: Get object component so that we know how to edit the object
    policyComponent :: Data.Text.Internal.Text,
    -- | execution_logging: When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.
    policyExecutionLogging :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | meta_model_name: Return internal model name
    policyMetaModelName :: Data.Text.Internal.Text,
    -- | name
    policyName :: Data.Text.Internal.Text,
    -- | pk
    policyPk :: Data.Text.Internal.Text,
    -- | verbose_name: Return object\'s verbose_name
    policyVerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    policyVerboseNamePlural :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Policy where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["bound_to" Data.Aeson.Types.ToJSON..= policyBoundTo obj] : ["component" Data.Aeson.Types.ToJSON..= policyComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("execution_logging" Data.Aeson.Types.ToJSON..=)) (policyExecutionLogging obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= policyMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= policyName obj] : ["pk" Data.Aeson.Types.ToJSON..= policyPk obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= policyVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= policyVerboseNamePlural obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["bound_to" Data.Aeson.Types.ToJSON..= policyBoundTo obj] : ["component" Data.Aeson.Types.ToJSON..= policyComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("execution_logging" Data.Aeson.Types.ToJSON..=)) (policyExecutionLogging obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= policyMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= policyName obj] : ["pk" Data.Aeson.Types.ToJSON..= policyPk obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= policyVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= policyVerboseNamePlural obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Policy where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Policy" (\obj -> (((((((GHC.Base.pure Policy GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "bound_to")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "execution_logging")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural"))

-- | Create a new 'Policy' with all required fields.
mkPolicy ::
  -- | 'policyBoundTo'
  GHC.Types.Int ->
  -- | 'policyComponent'
  Data.Text.Internal.Text ->
  -- | 'policyMetaModelName'
  Data.Text.Internal.Text ->
  -- | 'policyName'
  Data.Text.Internal.Text ->
  -- | 'policyPk'
  Data.Text.Internal.Text ->
  -- | 'policyVerboseName'
  Data.Text.Internal.Text ->
  -- | 'policyVerboseNamePlural'
  Data.Text.Internal.Text ->
  Policy
mkPolicy policyBoundTo policyComponent policyMetaModelName policyName policyPk policyVerboseName policyVerboseNamePlural =
  Policy
    { policyBoundTo = policyBoundTo,
      policyComponent = policyComponent,
      policyExecutionLogging = GHC.Maybe.Nothing,
      policyMetaModelName = policyMetaModelName,
      policyName = policyName,
      policyPk = policyPk,
      policyVerboseName = policyVerboseName,
      policyVerboseNamePlural = policyVerboseNamePlural
    }

{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Prompt
module AuthentikAPI.Types.Prompt where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.PromptTypeEnum
import {-# SOURCE #-} AuthentikAPI.Types.Stage
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.Prompt@ in the specification.
--
-- Prompt Serializer
data Prompt = Prompt
  { -- | field_key: Name of the form field, also used to store the value
    promptFieldKey :: Data.Text.Internal.Text,
    -- | initial_value: Optionally pre-fill the input with an initial value. When creating a fixed choice field, enable interpreting as expression and return a list to return multiple default choices.
    promptInitialValue :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | initial_value_expression
    promptInitialValueExpression :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | label
    promptLabel :: Data.Text.Internal.Text,
    -- | name
    promptName :: Data.Text.Internal.Text,
    -- | order
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of -2.1474836e9
    promptOrder :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | pk
    promptPk :: Data.Text.Internal.Text,
    -- | placeholder: Optionally provide a short hint that describes the expected input value. When creating a fixed choice field, enable interpreting as expression and return a list to return multiple choices.
    promptPlaceholder :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | placeholder_expression
    promptPlaceholderExpression :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | promptstage_set
    promptPromptstageSet :: (GHC.Maybe.Maybe [Stage]),
    -- | required
    promptRequired :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | sub_text
    promptSubText :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | type
    promptType :: PromptTypeEnum
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Prompt where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["field_key" Data.Aeson.Types.ToJSON..= promptFieldKey obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("initial_value" Data.Aeson.Types.ToJSON..=)) (promptInitialValue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("initial_value_expression" Data.Aeson.Types.ToJSON..=)) (promptInitialValueExpression obj) : ["label" Data.Aeson.Types.ToJSON..= promptLabel obj] : ["name" Data.Aeson.Types.ToJSON..= promptName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("order" Data.Aeson.Types.ToJSON..=)) (promptOrder obj) : ["pk" Data.Aeson.Types.ToJSON..= promptPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("placeholder" Data.Aeson.Types.ToJSON..=)) (promptPlaceholder obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("placeholder_expression" Data.Aeson.Types.ToJSON..=)) (promptPlaceholderExpression obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("promptstage_set" Data.Aeson.Types.ToJSON..=)) (promptPromptstageSet obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("required" Data.Aeson.Types.ToJSON..=)) (promptRequired obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sub_text" Data.Aeson.Types.ToJSON..=)) (promptSubText obj) : ["type" Data.Aeson.Types.ToJSON..= promptType obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["field_key" Data.Aeson.Types.ToJSON..= promptFieldKey obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("initial_value" Data.Aeson.Types.ToJSON..=)) (promptInitialValue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("initial_value_expression" Data.Aeson.Types.ToJSON..=)) (promptInitialValueExpression obj) : ["label" Data.Aeson.Types.ToJSON..= promptLabel obj] : ["name" Data.Aeson.Types.ToJSON..= promptName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("order" Data.Aeson.Types.ToJSON..=)) (promptOrder obj) : ["pk" Data.Aeson.Types.ToJSON..= promptPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("placeholder" Data.Aeson.Types.ToJSON..=)) (promptPlaceholder obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("placeholder_expression" Data.Aeson.Types.ToJSON..=)) (promptPlaceholderExpression obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("promptstage_set" Data.Aeson.Types.ToJSON..=)) (promptPromptstageSet obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("required" Data.Aeson.Types.ToJSON..=)) (promptRequired obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sub_text" Data.Aeson.Types.ToJSON..=)) (promptSubText obj) : ["type" Data.Aeson.Types.ToJSON..= promptType obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Prompt where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Prompt" (\obj -> ((((((((((((GHC.Base.pure Prompt GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "field_key")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "initial_value")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "initial_value_expression")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "order")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "placeholder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "placeholder_expression")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "promptstage_set")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "required")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sub_text")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))

-- | Create a new 'Prompt' with all required fields.
mkPrompt ::
  -- | 'promptFieldKey'
  Data.Text.Internal.Text ->
  -- | 'promptLabel'
  Data.Text.Internal.Text ->
  -- | 'promptName'
  Data.Text.Internal.Text ->
  -- | 'promptPk'
  Data.Text.Internal.Text ->
  -- | 'promptType'
  PromptTypeEnum ->
  Prompt
mkPrompt promptFieldKey promptLabel promptName promptPk promptType =
  Prompt
    { promptFieldKey = promptFieldKey,
      promptInitialValue = GHC.Maybe.Nothing,
      promptInitialValueExpression = GHC.Maybe.Nothing,
      promptLabel = promptLabel,
      promptName = promptName,
      promptOrder = GHC.Maybe.Nothing,
      promptPk = promptPk,
      promptPlaceholder = GHC.Maybe.Nothing,
      promptPlaceholderExpression = GHC.Maybe.Nothing,
      promptPromptstageSet = GHC.Maybe.Nothing,
      promptRequired = GHC.Maybe.Nothing,
      promptSubText = GHC.Maybe.Nothing,
      promptType = promptType
    }

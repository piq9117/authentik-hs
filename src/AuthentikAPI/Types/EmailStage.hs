{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema EmailStage
module AuthentikAPI.Types.EmailStage where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.FlowSet
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.EmailStage@ in the specification.
--
-- EmailStage Serializer
data EmailStage = EmailStage
  { -- | activate_user_on_success: Activate users upon completion of stage.
    emailStageActivateUserOnSuccess :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | component: Get object type so that we know how to edit the object
    emailStageComponent :: Data.Text.Internal.Text,
    -- | flow_set
    emailStageFlowSet :: (GHC.Maybe.Maybe [FlowSet]),
    -- | from_address
    --
    -- Constraints:
    --
    -- * Maximum length of 254
    emailStageFromAddress :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | host
    emailStageHost :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | meta_model_name: Return internal model name
    emailStageMetaModelName :: Data.Text.Internal.Text,
    -- | name
    emailStageName :: Data.Text.Internal.Text,
    -- | pk
    emailStagePk :: Data.Text.Internal.Text,
    -- | port
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of -2.1474836e9
    emailStagePort :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | subject
    emailStageSubject :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | template
    emailStageTemplate :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | timeout
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of -2.1474836e9
    emailStageTimeout :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | token_expiry: Time the token sent is valid (Format: hours=3,minutes=17,seconds=300).
    emailStageTokenExpiry :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | use_global_settings: When enabled, global Email connection settings will be used and connection settings below will be ignored.
    emailStageUseGlobalSettings :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | use_ssl
    emailStageUseSsl :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | use_tls
    emailStageUseTls :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | username
    emailStageUsername :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | verbose_name: Return object\'s verbose_name
    emailStageVerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    emailStageVerboseNamePlural :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON EmailStage where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("activate_user_on_success" Data.Aeson.Types.ToJSON..=)) (emailStageActivateUserOnSuccess obj) : ["component" Data.Aeson.Types.ToJSON..= emailStageComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_set" Data.Aeson.Types.ToJSON..=)) (emailStageFlowSet obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("from_address" Data.Aeson.Types.ToJSON..=)) (emailStageFromAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("host" Data.Aeson.Types.ToJSON..=)) (emailStageHost obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= emailStageMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= emailStageName obj] : ["pk" Data.Aeson.Types.ToJSON..= emailStagePk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("port" Data.Aeson.Types.ToJSON..=)) (emailStagePort obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("subject" Data.Aeson.Types.ToJSON..=)) (emailStageSubject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("template" Data.Aeson.Types.ToJSON..=)) (emailStageTemplate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("timeout" Data.Aeson.Types.ToJSON..=)) (emailStageTimeout obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("token_expiry" Data.Aeson.Types.ToJSON..=)) (emailStageTokenExpiry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("use_global_settings" Data.Aeson.Types.ToJSON..=)) (emailStageUseGlobalSettings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("use_ssl" Data.Aeson.Types.ToJSON..=)) (emailStageUseSsl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("use_tls" Data.Aeson.Types.ToJSON..=)) (emailStageUseTls obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("username" Data.Aeson.Types.ToJSON..=)) (emailStageUsername obj) : ["verbose_name" Data.Aeson.Types.ToJSON..= emailStageVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= emailStageVerboseNamePlural obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("activate_user_on_success" Data.Aeson.Types.ToJSON..=)) (emailStageActivateUserOnSuccess obj) : ["component" Data.Aeson.Types.ToJSON..= emailStageComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_set" Data.Aeson.Types.ToJSON..=)) (emailStageFlowSet obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("from_address" Data.Aeson.Types.ToJSON..=)) (emailStageFromAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("host" Data.Aeson.Types.ToJSON..=)) (emailStageHost obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= emailStageMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= emailStageName obj] : ["pk" Data.Aeson.Types.ToJSON..= emailStagePk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("port" Data.Aeson.Types.ToJSON..=)) (emailStagePort obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("subject" Data.Aeson.Types.ToJSON..=)) (emailStageSubject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("template" Data.Aeson.Types.ToJSON..=)) (emailStageTemplate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("timeout" Data.Aeson.Types.ToJSON..=)) (emailStageTimeout obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("token_expiry" Data.Aeson.Types.ToJSON..=)) (emailStageTokenExpiry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("use_global_settings" Data.Aeson.Types.ToJSON..=)) (emailStageUseGlobalSettings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("use_ssl" Data.Aeson.Types.ToJSON..=)) (emailStageUseSsl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("use_tls" Data.Aeson.Types.ToJSON..=)) (emailStageUseTls obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("username" Data.Aeson.Types.ToJSON..=)) (emailStageUsername obj) : ["verbose_name" Data.Aeson.Types.ToJSON..= emailStageVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= emailStageVerboseNamePlural obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON EmailStage where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "EmailStage" (\obj -> ((((((((((((((((((GHC.Base.pure EmailStage GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "activate_user_on_success")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_set")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "from_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "host")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "port")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "subject")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "template")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "timeout")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "token_expiry")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "use_global_settings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "use_ssl")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "use_tls")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "username")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural"))

-- | Create a new 'EmailStage' with all required fields.
mkEmailStage ::
  -- | 'emailStageComponent'
  Data.Text.Internal.Text ->
  -- | 'emailStageMetaModelName'
  Data.Text.Internal.Text ->
  -- | 'emailStageName'
  Data.Text.Internal.Text ->
  -- | 'emailStagePk'
  Data.Text.Internal.Text ->
  -- | 'emailStageVerboseName'
  Data.Text.Internal.Text ->
  -- | 'emailStageVerboseNamePlural'
  Data.Text.Internal.Text ->
  EmailStage
mkEmailStage emailStageComponent emailStageMetaModelName emailStageName emailStagePk emailStageVerboseName emailStageVerboseNamePlural =
  EmailStage
    { emailStageActivateUserOnSuccess = GHC.Maybe.Nothing,
      emailStageComponent = emailStageComponent,
      emailStageFlowSet = GHC.Maybe.Nothing,
      emailStageFromAddress = GHC.Maybe.Nothing,
      emailStageHost = GHC.Maybe.Nothing,
      emailStageMetaModelName = emailStageMetaModelName,
      emailStageName = emailStageName,
      emailStagePk = emailStagePk,
      emailStagePort = GHC.Maybe.Nothing,
      emailStageSubject = GHC.Maybe.Nothing,
      emailStageTemplate = GHC.Maybe.Nothing,
      emailStageTimeout = GHC.Maybe.Nothing,
      emailStageTokenExpiry = GHC.Maybe.Nothing,
      emailStageUseGlobalSettings = GHC.Maybe.Nothing,
      emailStageUseSsl = GHC.Maybe.Nothing,
      emailStageUseTls = GHC.Maybe.Nothing,
      emailStageUsername = GHC.Maybe.Nothing,
      emailStageVerboseName = emailStageVerboseName,
      emailStageVerboseNamePlural = emailStageVerboseNamePlural
    }

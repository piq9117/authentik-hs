{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Invitation
module AuthentikAPI.Types.Invitation where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.Flow
import {-# SOURCE #-} AuthentikAPI.Types.FlowLayoutEnum
import {-# SOURCE #-} AuthentikAPI.Types.GroupMember
import {-# SOURCE #-} AuthentikAPI.Types.PolicyEngineMode
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.Invitation@ in the specification.
--
-- Invitation Serializer
data Invitation = Invitation
  { -- | created_by
    invitationCreatedBy :: InvitationCreatedBy',
    -- | expires
    invitationExpires :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | fixed_data
    invitationFixedData :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | flow: When set, only the configured flow can use this invitation.
    invitationFlow :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | flow_obj
    invitationFlowObj :: InvitationFlowObj',
    -- | name
    --
    -- Constraints:
    --
    -- * Maximum length of 50
    -- * Must match pattern \'^[-a-zA-Z0-9_]+\$\'
    invitationName :: Data.Text.Internal.Text,
    -- | pk
    invitationPk :: Data.Text.Internal.Text,
    -- | single_use: When enabled, the invitation will be deleted after usage.
    invitationSingleUse :: (GHC.Maybe.Maybe GHC.Types.Bool)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Invitation where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["created_by" Data.Aeson.Types.ToJSON..= invitationCreatedBy obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires" Data.Aeson.Types.ToJSON..=)) (invitationExpires obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fixed_data" Data.Aeson.Types.ToJSON..=)) (invitationFixedData obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow" Data.Aeson.Types.ToJSON..=)) (invitationFlow obj) : ["flow_obj" Data.Aeson.Types.ToJSON..= invitationFlowObj obj] : ["name" Data.Aeson.Types.ToJSON..= invitationName obj] : ["pk" Data.Aeson.Types.ToJSON..= invitationPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("single_use" Data.Aeson.Types.ToJSON..=)) (invitationSingleUse obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["created_by" Data.Aeson.Types.ToJSON..= invitationCreatedBy obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires" Data.Aeson.Types.ToJSON..=)) (invitationExpires obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fixed_data" Data.Aeson.Types.ToJSON..=)) (invitationFixedData obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow" Data.Aeson.Types.ToJSON..=)) (invitationFlow obj) : ["flow_obj" Data.Aeson.Types.ToJSON..= invitationFlowObj obj] : ["name" Data.Aeson.Types.ToJSON..= invitationName obj] : ["pk" Data.Aeson.Types.ToJSON..= invitationPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("single_use" Data.Aeson.Types.ToJSON..=)) (invitationSingleUse obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Invitation where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Invitation" (\obj -> (((((((GHC.Base.pure Invitation GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created_by")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expires")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "fixed_data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "flow_obj")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "single_use"))

-- | Create a new 'Invitation' with all required fields.
mkInvitation ::
  -- | 'invitationCreatedBy'
  InvitationCreatedBy' ->
  -- | 'invitationFlowObj'
  InvitationFlowObj' ->
  -- | 'invitationName'
  Data.Text.Internal.Text ->
  -- | 'invitationPk'
  Data.Text.Internal.Text ->
  Invitation
mkInvitation invitationCreatedBy invitationFlowObj invitationName invitationPk =
  Invitation
    { invitationCreatedBy = invitationCreatedBy,
      invitationExpires = GHC.Maybe.Nothing,
      invitationFixedData = GHC.Maybe.Nothing,
      invitationFlow = GHC.Maybe.Nothing,
      invitationFlowObj = invitationFlowObj,
      invitationName = invitationName,
      invitationPk = invitationPk,
      invitationSingleUse = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.Invitation.properties.created_by.allOf@ in the specification.
data InvitationCreatedBy' = InvitationCreatedBy'
  { -- | attributes
    invitationCreatedBy'Attributes :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | email
    --
    -- Constraints:
    --
    -- * Maximum length of 254
    invitationCreatedBy'Email :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | is_active: Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
    invitationCreatedBy'IsActive :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | last_login
    invitationCreatedBy'LastLogin :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | name: User\'s display name.
    invitationCreatedBy'Name :: Data.Text.Internal.Text,
    -- | pk
    invitationCreatedBy'Pk :: GHC.Types.Int,
    -- | uid
    invitationCreatedBy'Uid :: Data.Text.Internal.Text,
    -- | username: Required. 150 characters or fewer. Letters, digits and \@\/.\/+\/-\/_ only.
    --
    -- Constraints:
    --
    -- * Maximum length of 150
    -- * Must match pattern \'^[\\w.\@+-]+\$\'
    invitationCreatedBy'Username :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON InvitationCreatedBy' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (invitationCreatedBy'Attributes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (invitationCreatedBy'Email obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_active" Data.Aeson.Types.ToJSON..=)) (invitationCreatedBy'IsActive obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_login" Data.Aeson.Types.ToJSON..=)) (invitationCreatedBy'LastLogin obj) : ["name" Data.Aeson.Types.ToJSON..= invitationCreatedBy'Name obj] : ["pk" Data.Aeson.Types.ToJSON..= invitationCreatedBy'Pk obj] : ["uid" Data.Aeson.Types.ToJSON..= invitationCreatedBy'Uid obj] : ["username" Data.Aeson.Types.ToJSON..= invitationCreatedBy'Username obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (invitationCreatedBy'Attributes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (invitationCreatedBy'Email obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_active" Data.Aeson.Types.ToJSON..=)) (invitationCreatedBy'IsActive obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_login" Data.Aeson.Types.ToJSON..=)) (invitationCreatedBy'LastLogin obj) : ["name" Data.Aeson.Types.ToJSON..= invitationCreatedBy'Name obj] : ["pk" Data.Aeson.Types.ToJSON..= invitationCreatedBy'Pk obj] : ["uid" Data.Aeson.Types.ToJSON..= invitationCreatedBy'Uid obj] : ["username" Data.Aeson.Types.ToJSON..= invitationCreatedBy'Username obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON InvitationCreatedBy' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "InvitationCreatedBy'" (\obj -> (((((((GHC.Base.pure InvitationCreatedBy' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "attributes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "is_active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "last_login")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "uid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "username"))

-- | Create a new 'InvitationCreatedBy'' with all required fields.
mkInvitationCreatedBy' ::
  -- | 'invitationCreatedBy'Name'
  Data.Text.Internal.Text ->
  -- | 'invitationCreatedBy'Pk'
  GHC.Types.Int ->
  -- | 'invitationCreatedBy'Uid'
  Data.Text.Internal.Text ->
  -- | 'invitationCreatedBy'Username'
  Data.Text.Internal.Text ->
  InvitationCreatedBy'
mkInvitationCreatedBy' invitationCreatedBy'Name invitationCreatedBy'Pk invitationCreatedBy'Uid invitationCreatedBy'Username =
  InvitationCreatedBy'
    { invitationCreatedBy'Attributes = GHC.Maybe.Nothing,
      invitationCreatedBy'Email = GHC.Maybe.Nothing,
      invitationCreatedBy'IsActive = GHC.Maybe.Nothing,
      invitationCreatedBy'LastLogin = GHC.Maybe.Nothing,
      invitationCreatedBy'Name = invitationCreatedBy'Name,
      invitationCreatedBy'Pk = invitationCreatedBy'Pk,
      invitationCreatedBy'Uid = invitationCreatedBy'Uid,
      invitationCreatedBy'Username = invitationCreatedBy'Username
    }

-- | Defines the object schema located at @components.schemas.Invitation.properties.flow_obj.allOf@ in the specification.
data InvitationFlowObj' = InvitationFlowObj'
  { -- | authentication: Required level of authentication and authorization to access a flow.
    invitationFlowObj'Authentication :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | background: Get the URL to the background image. If the name is \/static or starts with http
    -- it is returned as-is
    invitationFlowObj'Background :: Data.Text.Internal.Text,
    -- | cache_count: Get count of cached flows
    invitationFlowObj'CacheCount :: GHC.Types.Int,
    -- | compatibility_mode: Enable compatibility mode, increases compatibility with password managers on mobile devices.
    invitationFlowObj'CompatibilityMode :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | denied_action: Configure what should happen when a flow denies access to a user.
    invitationFlowObj'DeniedAction :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | designation: Decides what this Flow is used for. For example, the Authentication flow is redirect to when an un-authenticated user visits authentik.
    invitationFlowObj'Designation :: Data.Aeson.Types.Internal.Object,
    -- | export_url: Get export URL for flow
    invitationFlowObj'ExportUrl :: Data.Text.Internal.Text,
    -- | layout
    invitationFlowObj'Layout :: (GHC.Maybe.Maybe FlowLayoutEnum),
    -- | name
    invitationFlowObj'Name :: Data.Text.Internal.Text,
    -- | pk
    invitationFlowObj'Pk :: Data.Text.Internal.Text,
    -- | policies
    invitationFlowObj'Policies :: [Data.Text.Internal.Text],
    -- | policy_engine_mode
    invitationFlowObj'PolicyEngineMode :: (GHC.Maybe.Maybe PolicyEngineMode),
    -- | policybindingmodel_ptr_id
    invitationFlowObj'PolicybindingmodelPtrId :: Data.Text.Internal.Text,
    -- | slug: Visible in the URL.
    --
    -- Constraints:
    --
    -- * Maximum length of 50
    -- * Must match pattern \'^[-a-zA-Z0-9_]+\$\'
    invitationFlowObj'Slug :: Data.Text.Internal.Text,
    -- | stages
    invitationFlowObj'Stages :: [Data.Text.Internal.Text],
    -- | title: Shown as the Title in Flow pages.
    invitationFlowObj'Title :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON InvitationFlowObj' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication" Data.Aeson.Types.ToJSON..=)) (invitationFlowObj'Authentication obj) : ["background" Data.Aeson.Types.ToJSON..= invitationFlowObj'Background obj] : ["cache_count" Data.Aeson.Types.ToJSON..= invitationFlowObj'CacheCount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("compatibility_mode" Data.Aeson.Types.ToJSON..=)) (invitationFlowObj'CompatibilityMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("denied_action" Data.Aeson.Types.ToJSON..=)) (invitationFlowObj'DeniedAction obj) : ["designation" Data.Aeson.Types.ToJSON..= invitationFlowObj'Designation obj] : ["export_url" Data.Aeson.Types.ToJSON..= invitationFlowObj'ExportUrl obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("layout" Data.Aeson.Types.ToJSON..=)) (invitationFlowObj'Layout obj) : ["name" Data.Aeson.Types.ToJSON..= invitationFlowObj'Name obj] : ["pk" Data.Aeson.Types.ToJSON..= invitationFlowObj'Pk obj] : ["policies" Data.Aeson.Types.ToJSON..= invitationFlowObj'Policies obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("policy_engine_mode" Data.Aeson.Types.ToJSON..=)) (invitationFlowObj'PolicyEngineMode obj) : ["policybindingmodel_ptr_id" Data.Aeson.Types.ToJSON..= invitationFlowObj'PolicybindingmodelPtrId obj] : ["slug" Data.Aeson.Types.ToJSON..= invitationFlowObj'Slug obj] : ["stages" Data.Aeson.Types.ToJSON..= invitationFlowObj'Stages obj] : ["title" Data.Aeson.Types.ToJSON..= invitationFlowObj'Title obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication" Data.Aeson.Types.ToJSON..=)) (invitationFlowObj'Authentication obj) : ["background" Data.Aeson.Types.ToJSON..= invitationFlowObj'Background obj] : ["cache_count" Data.Aeson.Types.ToJSON..= invitationFlowObj'CacheCount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("compatibility_mode" Data.Aeson.Types.ToJSON..=)) (invitationFlowObj'CompatibilityMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("denied_action" Data.Aeson.Types.ToJSON..=)) (invitationFlowObj'DeniedAction obj) : ["designation" Data.Aeson.Types.ToJSON..= invitationFlowObj'Designation obj] : ["export_url" Data.Aeson.Types.ToJSON..= invitationFlowObj'ExportUrl obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("layout" Data.Aeson.Types.ToJSON..=)) (invitationFlowObj'Layout obj) : ["name" Data.Aeson.Types.ToJSON..= invitationFlowObj'Name obj] : ["pk" Data.Aeson.Types.ToJSON..= invitationFlowObj'Pk obj] : ["policies" Data.Aeson.Types.ToJSON..= invitationFlowObj'Policies obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("policy_engine_mode" Data.Aeson.Types.ToJSON..=)) (invitationFlowObj'PolicyEngineMode obj) : ["policybindingmodel_ptr_id" Data.Aeson.Types.ToJSON..= invitationFlowObj'PolicybindingmodelPtrId obj] : ["slug" Data.Aeson.Types.ToJSON..= invitationFlowObj'Slug obj] : ["stages" Data.Aeson.Types.ToJSON..= invitationFlowObj'Stages obj] : ["title" Data.Aeson.Types.ToJSON..= invitationFlowObj'Title obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON InvitationFlowObj' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "InvitationFlowObj'" (\obj -> (((((((((((((((GHC.Base.pure InvitationFlowObj' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "authentication")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "background")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cache_count")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "compatibility_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "denied_action")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "designation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "export_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "layout")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "policies")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "policy_engine_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "policybindingmodel_ptr_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "slug")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "stages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "title"))

-- | Create a new 'InvitationFlowObj'' with all required fields.
mkInvitationFlowObj' ::
  -- | 'invitationFlowObj'Background'
  Data.Text.Internal.Text ->
  -- | 'invitationFlowObj'CacheCount'
  GHC.Types.Int ->
  -- | 'invitationFlowObj'Designation'
  Data.Aeson.Types.Internal.Object ->
  -- | 'invitationFlowObj'ExportUrl'
  Data.Text.Internal.Text ->
  -- | 'invitationFlowObj'Name'
  Data.Text.Internal.Text ->
  -- | 'invitationFlowObj'Pk'
  Data.Text.Internal.Text ->
  -- | 'invitationFlowObj'Policies'
  [Data.Text.Internal.Text] ->
  -- | 'invitationFlowObj'PolicybindingmodelPtrId'
  Data.Text.Internal.Text ->
  -- | 'invitationFlowObj'Slug'
  Data.Text.Internal.Text ->
  -- | 'invitationFlowObj'Stages'
  [Data.Text.Internal.Text] ->
  -- | 'invitationFlowObj'Title'
  Data.Text.Internal.Text ->
  InvitationFlowObj'
mkInvitationFlowObj' invitationFlowObj'Background invitationFlowObj'CacheCount invitationFlowObj'Designation invitationFlowObj'ExportUrl invitationFlowObj'Name invitationFlowObj'Pk invitationFlowObj'Policies invitationFlowObj'PolicybindingmodelPtrId invitationFlowObj'Slug invitationFlowObj'Stages invitationFlowObj'Title =
  InvitationFlowObj'
    { invitationFlowObj'Authentication = GHC.Maybe.Nothing,
      invitationFlowObj'Background = invitationFlowObj'Background,
      invitationFlowObj'CacheCount = invitationFlowObj'CacheCount,
      invitationFlowObj'CompatibilityMode = GHC.Maybe.Nothing,
      invitationFlowObj'DeniedAction = GHC.Maybe.Nothing,
      invitationFlowObj'Designation = invitationFlowObj'Designation,
      invitationFlowObj'ExportUrl = invitationFlowObj'ExportUrl,
      invitationFlowObj'Layout = GHC.Maybe.Nothing,
      invitationFlowObj'Name = invitationFlowObj'Name,
      invitationFlowObj'Pk = invitationFlowObj'Pk,
      invitationFlowObj'Policies = invitationFlowObj'Policies,
      invitationFlowObj'PolicyEngineMode = GHC.Maybe.Nothing,
      invitationFlowObj'PolicybindingmodelPtrId = invitationFlowObj'PolicybindingmodelPtrId,
      invitationFlowObj'Slug = invitationFlowObj'Slug,
      invitationFlowObj'Stages = invitationFlowObj'Stages,
      invitationFlowObj'Title = invitationFlowObj'Title
    }

{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema RACProvider
module AuthentikAPI.Types.RACProvider where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.RACProvider@ in the specification.
--
-- RACProvider Serializer
data RACProvider = RACProvider
  { -- | assigned_application_name: Application\'s display Name.
    rACProviderAssignedApplicationName :: Data.Text.Internal.Text,
    -- | assigned_application_slug: Internal application name, used in URLs.
    rACProviderAssignedApplicationSlug :: Data.Text.Internal.Text,
    -- | assigned_backchannel_application_name: Application\'s display Name.
    rACProviderAssignedBackchannelApplicationName :: Data.Text.Internal.Text,
    -- | assigned_backchannel_application_slug: Internal application name, used in URLs.
    rACProviderAssignedBackchannelApplicationSlug :: Data.Text.Internal.Text,
    -- | authentication_flow: Flow used for authentication when the associated application is accessed by an un-authenticated user.
    rACProviderAuthenticationFlow :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | authorization_flow: Flow used when authorizing this provider.
    rACProviderAuthorizationFlow :: Data.Text.Internal.Text,
    -- | component: Get object component so that we know how to edit the object
    rACProviderComponent :: Data.Text.Internal.Text,
    -- | connection_expiry: Determines how long a session lasts. Default of 0 means that the sessions lasts until the browser is closed. (Format: hours=-1;minutes=-2;seconds=-3)
    rACProviderConnectionExpiry :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | delete_token_on_disconnect: When set to true, connection tokens will be deleted upon disconnect.
    rACProviderDeleteTokenOnDisconnect :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | meta_model_name: Return internal model name
    rACProviderMetaModelName :: Data.Text.Internal.Text,
    -- | name
    rACProviderName :: Data.Text.Internal.Text,
    -- | outpost_set
    rACProviderOutpostSet :: [Data.Text.Internal.Text],
    -- | pk
    rACProviderPk :: GHC.Types.Int,
    -- | property_mappings
    rACProviderPropertyMappings :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | settings
    rACProviderSettings :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | verbose_name: Return object\'s verbose_name
    rACProviderVerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    rACProviderVerboseNamePlural :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON RACProvider where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["assigned_application_name" Data.Aeson.Types.ToJSON..= rACProviderAssignedApplicationName obj] : ["assigned_application_slug" Data.Aeson.Types.ToJSON..= rACProviderAssignedApplicationSlug obj] : ["assigned_backchannel_application_name" Data.Aeson.Types.ToJSON..= rACProviderAssignedBackchannelApplicationName obj] : ["assigned_backchannel_application_slug" Data.Aeson.Types.ToJSON..= rACProviderAssignedBackchannelApplicationSlug obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication_flow" Data.Aeson.Types.ToJSON..=)) (rACProviderAuthenticationFlow obj) : ["authorization_flow" Data.Aeson.Types.ToJSON..= rACProviderAuthorizationFlow obj] : ["component" Data.Aeson.Types.ToJSON..= rACProviderComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("connection_expiry" Data.Aeson.Types.ToJSON..=)) (rACProviderConnectionExpiry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delete_token_on_disconnect" Data.Aeson.Types.ToJSON..=)) (rACProviderDeleteTokenOnDisconnect obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= rACProviderMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= rACProviderName obj] : ["outpost_set" Data.Aeson.Types.ToJSON..= rACProviderOutpostSet obj] : ["pk" Data.Aeson.Types.ToJSON..= rACProviderPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings" Data.Aeson.Types.ToJSON..=)) (rACProviderPropertyMappings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("settings" Data.Aeson.Types.ToJSON..=)) (rACProviderSettings obj) : ["verbose_name" Data.Aeson.Types.ToJSON..= rACProviderVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= rACProviderVerboseNamePlural obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["assigned_application_name" Data.Aeson.Types.ToJSON..= rACProviderAssignedApplicationName obj] : ["assigned_application_slug" Data.Aeson.Types.ToJSON..= rACProviderAssignedApplicationSlug obj] : ["assigned_backchannel_application_name" Data.Aeson.Types.ToJSON..= rACProviderAssignedBackchannelApplicationName obj] : ["assigned_backchannel_application_slug" Data.Aeson.Types.ToJSON..= rACProviderAssignedBackchannelApplicationSlug obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication_flow" Data.Aeson.Types.ToJSON..=)) (rACProviderAuthenticationFlow obj) : ["authorization_flow" Data.Aeson.Types.ToJSON..= rACProviderAuthorizationFlow obj] : ["component" Data.Aeson.Types.ToJSON..= rACProviderComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("connection_expiry" Data.Aeson.Types.ToJSON..=)) (rACProviderConnectionExpiry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delete_token_on_disconnect" Data.Aeson.Types.ToJSON..=)) (rACProviderDeleteTokenOnDisconnect obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= rACProviderMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= rACProviderName obj] : ["outpost_set" Data.Aeson.Types.ToJSON..= rACProviderOutpostSet obj] : ["pk" Data.Aeson.Types.ToJSON..= rACProviderPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings" Data.Aeson.Types.ToJSON..=)) (rACProviderPropertyMappings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("settings" Data.Aeson.Types.ToJSON..=)) (rACProviderSettings obj) : ["verbose_name" Data.Aeson.Types.ToJSON..= rACProviderVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= rACProviderVerboseNamePlural obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON RACProvider where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "RACProvider" (\obj -> ((((((((((((((((GHC.Base.pure RACProvider GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assigned_application_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assigned_application_slug")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assigned_backchannel_application_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assigned_backchannel_application_slug")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "authentication_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "authorization_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "connection_expiry")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "delete_token_on_disconnect")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "outpost_set")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "property_mappings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "settings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural"))

-- | Create a new 'RACProvider' with all required fields.
mkRACProvider ::
  -- | 'rACProviderAssignedApplicationName'
  Data.Text.Internal.Text ->
  -- | 'rACProviderAssignedApplicationSlug'
  Data.Text.Internal.Text ->
  -- | 'rACProviderAssignedBackchannelApplicationName'
  Data.Text.Internal.Text ->
  -- | 'rACProviderAssignedBackchannelApplicationSlug'
  Data.Text.Internal.Text ->
  -- | 'rACProviderAuthorizationFlow'
  Data.Text.Internal.Text ->
  -- | 'rACProviderComponent'
  Data.Text.Internal.Text ->
  -- | 'rACProviderMetaModelName'
  Data.Text.Internal.Text ->
  -- | 'rACProviderName'
  Data.Text.Internal.Text ->
  -- | 'rACProviderOutpostSet'
  [Data.Text.Internal.Text] ->
  -- | 'rACProviderPk'
  GHC.Types.Int ->
  -- | 'rACProviderVerboseName'
  Data.Text.Internal.Text ->
  -- | 'rACProviderVerboseNamePlural'
  Data.Text.Internal.Text ->
  RACProvider
mkRACProvider rACProviderAssignedApplicationName rACProviderAssignedApplicationSlug rACProviderAssignedBackchannelApplicationName rACProviderAssignedBackchannelApplicationSlug rACProviderAuthorizationFlow rACProviderComponent rACProviderMetaModelName rACProviderName rACProviderOutpostSet rACProviderPk rACProviderVerboseName rACProviderVerboseNamePlural =
  RACProvider
    { rACProviderAssignedApplicationName = rACProviderAssignedApplicationName,
      rACProviderAssignedApplicationSlug = rACProviderAssignedApplicationSlug,
      rACProviderAssignedBackchannelApplicationName = rACProviderAssignedBackchannelApplicationName,
      rACProviderAssignedBackchannelApplicationSlug = rACProviderAssignedBackchannelApplicationSlug,
      rACProviderAuthenticationFlow = GHC.Maybe.Nothing,
      rACProviderAuthorizationFlow = rACProviderAuthorizationFlow,
      rACProviderComponent = rACProviderComponent,
      rACProviderConnectionExpiry = GHC.Maybe.Nothing,
      rACProviderDeleteTokenOnDisconnect = GHC.Maybe.Nothing,
      rACProviderMetaModelName = rACProviderMetaModelName,
      rACProviderName = rACProviderName,
      rACProviderOutpostSet = rACProviderOutpostSet,
      rACProviderPk = rACProviderPk,
      rACProviderPropertyMappings = GHC.Maybe.Nothing,
      rACProviderSettings = GHC.Maybe.Nothing,
      rACProviderVerboseName = rACProviderVerboseName,
      rACProviderVerboseNamePlural = rACProviderVerboseNamePlural
    }

{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Provider
module AuthentikAPI.Types.Provider where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.Provider@ in the specification.
--
-- Provider Serializer
data Provider = Provider
  { -- | assigned_application_name: Application\'s display Name.
    providerAssignedApplicationName :: Data.Text.Internal.Text,
    -- | assigned_application_slug: Internal application name, used in URLs.
    providerAssignedApplicationSlug :: Data.Text.Internal.Text,
    -- | assigned_backchannel_application_name: Application\'s display Name.
    providerAssignedBackchannelApplicationName :: Data.Text.Internal.Text,
    -- | assigned_backchannel_application_slug: Internal application name, used in URLs.
    providerAssignedBackchannelApplicationSlug :: Data.Text.Internal.Text,
    -- | authentication_flow: Flow used for authentication when the associated application is accessed by an un-authenticated user.
    providerAuthenticationFlow :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | authorization_flow: Flow used when authorizing this provider.
    providerAuthorizationFlow :: Data.Text.Internal.Text,
    -- | component: Get object component so that we know how to edit the object
    providerComponent :: Data.Text.Internal.Text,
    -- | invalidation_flow: Flow used ending the session from a provider.
    providerInvalidationFlow :: Data.Text.Internal.Text,
    -- | meta_model_name: Return internal model name
    providerMetaModelName :: Data.Text.Internal.Text,
    -- | name
    providerName :: Data.Text.Internal.Text,
    -- | pk
    providerPk :: GHC.Types.Int,
    -- | property_mappings
    providerPropertyMappings :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | verbose_name: Return object\'s verbose_name
    providerVerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    providerVerboseNamePlural :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Provider where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["assigned_application_name" Data.Aeson.Types.ToJSON..= providerAssignedApplicationName obj] : ["assigned_application_slug" Data.Aeson.Types.ToJSON..= providerAssignedApplicationSlug obj] : ["assigned_backchannel_application_name" Data.Aeson.Types.ToJSON..= providerAssignedBackchannelApplicationName obj] : ["assigned_backchannel_application_slug" Data.Aeson.Types.ToJSON..= providerAssignedBackchannelApplicationSlug obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication_flow" Data.Aeson.Types.ToJSON..=)) (providerAuthenticationFlow obj) : ["authorization_flow" Data.Aeson.Types.ToJSON..= providerAuthorizationFlow obj] : ["component" Data.Aeson.Types.ToJSON..= providerComponent obj] : ["invalidation_flow" Data.Aeson.Types.ToJSON..= providerInvalidationFlow obj] : ["meta_model_name" Data.Aeson.Types.ToJSON..= providerMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= providerName obj] : ["pk" Data.Aeson.Types.ToJSON..= providerPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings" Data.Aeson.Types.ToJSON..=)) (providerPropertyMappings obj) : ["verbose_name" Data.Aeson.Types.ToJSON..= providerVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= providerVerboseNamePlural obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["assigned_application_name" Data.Aeson.Types.ToJSON..= providerAssignedApplicationName obj] : ["assigned_application_slug" Data.Aeson.Types.ToJSON..= providerAssignedApplicationSlug obj] : ["assigned_backchannel_application_name" Data.Aeson.Types.ToJSON..= providerAssignedBackchannelApplicationName obj] : ["assigned_backchannel_application_slug" Data.Aeson.Types.ToJSON..= providerAssignedBackchannelApplicationSlug obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication_flow" Data.Aeson.Types.ToJSON..=)) (providerAuthenticationFlow obj) : ["authorization_flow" Data.Aeson.Types.ToJSON..= providerAuthorizationFlow obj] : ["component" Data.Aeson.Types.ToJSON..= providerComponent obj] : ["invalidation_flow" Data.Aeson.Types.ToJSON..= providerInvalidationFlow obj] : ["meta_model_name" Data.Aeson.Types.ToJSON..= providerMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= providerName obj] : ["pk" Data.Aeson.Types.ToJSON..= providerPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings" Data.Aeson.Types.ToJSON..=)) (providerPropertyMappings obj) : ["verbose_name" Data.Aeson.Types.ToJSON..= providerVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= providerVerboseNamePlural obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Provider where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Provider" (\obj -> (((((((((((((GHC.Base.pure Provider GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assigned_application_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assigned_application_slug")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assigned_backchannel_application_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assigned_backchannel_application_slug")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "authentication_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "authorization_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "invalidation_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "property_mappings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural"))

-- | Create a new 'Provider' with all required fields.
mkProvider ::
  -- | 'providerAssignedApplicationName'
  Data.Text.Internal.Text ->
  -- | 'providerAssignedApplicationSlug'
  Data.Text.Internal.Text ->
  -- | 'providerAssignedBackchannelApplicationName'
  Data.Text.Internal.Text ->
  -- | 'providerAssignedBackchannelApplicationSlug'
  Data.Text.Internal.Text ->
  -- | 'providerAuthorizationFlow'
  Data.Text.Internal.Text ->
  -- | 'providerComponent'
  Data.Text.Internal.Text ->
  -- | 'providerInvalidationFlow'
  Data.Text.Internal.Text ->
  -- | 'providerMetaModelName'
  Data.Text.Internal.Text ->
  -- | 'providerName'
  Data.Text.Internal.Text ->
  -- | 'providerPk'
  GHC.Types.Int ->
  -- | 'providerVerboseName'
  Data.Text.Internal.Text ->
  -- | 'providerVerboseNamePlural'
  Data.Text.Internal.Text ->
  Provider
mkProvider providerAssignedApplicationName providerAssignedApplicationSlug providerAssignedBackchannelApplicationName providerAssignedBackchannelApplicationSlug providerAuthorizationFlow providerComponent providerInvalidationFlow providerMetaModelName providerName providerPk providerVerboseName providerVerboseNamePlural =
  Provider
    { providerAssignedApplicationName = providerAssignedApplicationName,
      providerAssignedApplicationSlug = providerAssignedApplicationSlug,
      providerAssignedBackchannelApplicationName = providerAssignedBackchannelApplicationName,
      providerAssignedBackchannelApplicationSlug = providerAssignedBackchannelApplicationSlug,
      providerAuthenticationFlow = GHC.Maybe.Nothing,
      providerAuthorizationFlow = providerAuthorizationFlow,
      providerComponent = providerComponent,
      providerInvalidationFlow = providerInvalidationFlow,
      providerMetaModelName = providerMetaModelName,
      providerName = providerName,
      providerPk = providerPk,
      providerPropertyMappings = GHC.Maybe.Nothing,
      providerVerboseName = providerVerboseName,
      providerVerboseNamePlural = providerVerboseNamePlural
    }

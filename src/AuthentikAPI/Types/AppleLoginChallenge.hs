{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema AppleLoginChallenge
module AuthentikAPI.Types.AppleLoginChallenge where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.ContextualFlowInfo
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.AppleLoginChallenge@ in the specification.
--
-- Special challenge for apple-native authentication flow, which happens on the client.
data AppleLoginChallenge = AppleLoginChallenge
  { -- | client_id
    appleLoginChallengeClientId :: Data.Text.Internal.Text,
    -- | component
    appleLoginChallengeComponent :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | flow_info: Contextual flow information for a challenge
    appleLoginChallengeFlowInfo :: (GHC.Maybe.Maybe ContextualFlowInfo),
    -- | redirect_uri
    appleLoginChallengeRedirectUri :: Data.Text.Internal.Text,
    -- | response_errors
    appleLoginChallengeResponseErrors :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | scope
    appleLoginChallengeScope :: Data.Text.Internal.Text,
    -- | state
    appleLoginChallengeState :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON AppleLoginChallenge where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["client_id" Data.Aeson.Types.ToJSON..= appleLoginChallengeClientId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("component" Data.Aeson.Types.ToJSON..=)) (appleLoginChallengeComponent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_info" Data.Aeson.Types.ToJSON..=)) (appleLoginChallengeFlowInfo obj) : ["redirect_uri" Data.Aeson.Types.ToJSON..= appleLoginChallengeRedirectUri obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("response_errors" Data.Aeson.Types.ToJSON..=)) (appleLoginChallengeResponseErrors obj) : ["scope" Data.Aeson.Types.ToJSON..= appleLoginChallengeScope obj] : ["state" Data.Aeson.Types.ToJSON..= appleLoginChallengeState obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["client_id" Data.Aeson.Types.ToJSON..= appleLoginChallengeClientId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("component" Data.Aeson.Types.ToJSON..=)) (appleLoginChallengeComponent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_info" Data.Aeson.Types.ToJSON..=)) (appleLoginChallengeFlowInfo obj) : ["redirect_uri" Data.Aeson.Types.ToJSON..= appleLoginChallengeRedirectUri obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("response_errors" Data.Aeson.Types.ToJSON..=)) (appleLoginChallengeResponseErrors obj) : ["scope" Data.Aeson.Types.ToJSON..= appleLoginChallengeScope obj] : ["state" Data.Aeson.Types.ToJSON..= appleLoginChallengeState obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON AppleLoginChallenge where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "AppleLoginChallenge" (\obj -> ((((((GHC.Base.pure AppleLoginChallenge GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "client_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_info")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "redirect_uri")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "response_errors")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "scope")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "state"))

-- | Create a new 'AppleLoginChallenge' with all required fields.
mkAppleLoginChallenge ::
  -- | 'appleLoginChallengeClientId'
  Data.Text.Internal.Text ->
  -- | 'appleLoginChallengeRedirectUri'
  Data.Text.Internal.Text ->
  -- | 'appleLoginChallengeScope'
  Data.Text.Internal.Text ->
  -- | 'appleLoginChallengeState'
  Data.Text.Internal.Text ->
  AppleLoginChallenge
mkAppleLoginChallenge appleLoginChallengeClientId appleLoginChallengeRedirectUri appleLoginChallengeScope appleLoginChallengeState =
  AppleLoginChallenge
    { appleLoginChallengeClientId = appleLoginChallengeClientId,
      appleLoginChallengeComponent = GHC.Maybe.Nothing,
      appleLoginChallengeFlowInfo = GHC.Maybe.Nothing,
      appleLoginChallengeRedirectUri = appleLoginChallengeRedirectUri,
      appleLoginChallengeResponseErrors = GHC.Maybe.Nothing,
      appleLoginChallengeScope = appleLoginChallengeScope,
      appleLoginChallengeState = appleLoginChallengeState
    }

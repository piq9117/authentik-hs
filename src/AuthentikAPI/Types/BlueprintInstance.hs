{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema BlueprintInstance
module AuthentikAPI.Types.BlueprintInstance where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.BlueprintInstance@ in the specification.
--
-- Info about a single blueprint instance file
data BlueprintInstance = BlueprintInstance
  { -- | content
    blueprintInstanceContent :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | context
    blueprintInstanceContext :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | enabled
    blueprintInstanceEnabled :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | last_applied
    blueprintInstanceLastApplied :: Data.Text.Internal.Text,
    -- | last_applied_hash
    blueprintInstanceLastAppliedHash :: Data.Text.Internal.Text,
    -- | managed_models
    blueprintInstanceManagedModels :: [Data.Text.Internal.Text],
    -- | metadata
    blueprintInstanceMetadata :: Data.Aeson.Types.Internal.Object,
    -- | name
    blueprintInstanceName :: Data.Text.Internal.Text,
    -- | path
    blueprintInstancePath :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | pk
    blueprintInstancePk :: Data.Text.Internal.Text,
    -- | status
    blueprintInstanceStatus :: Data.Aeson.Types.Internal.Object
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON BlueprintInstance where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("content" Data.Aeson.Types.ToJSON..=)) (blueprintInstanceContent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("context" Data.Aeson.Types.ToJSON..=)) (blueprintInstanceContext obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enabled" Data.Aeson.Types.ToJSON..=)) (blueprintInstanceEnabled obj) : ["last_applied" Data.Aeson.Types.ToJSON..= blueprintInstanceLastApplied obj] : ["last_applied_hash" Data.Aeson.Types.ToJSON..= blueprintInstanceLastAppliedHash obj] : ["managed_models" Data.Aeson.Types.ToJSON..= blueprintInstanceManagedModels obj] : ["metadata" Data.Aeson.Types.ToJSON..= blueprintInstanceMetadata obj] : ["name" Data.Aeson.Types.ToJSON..= blueprintInstanceName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("path" Data.Aeson.Types.ToJSON..=)) (blueprintInstancePath obj) : ["pk" Data.Aeson.Types.ToJSON..= blueprintInstancePk obj] : ["status" Data.Aeson.Types.ToJSON..= blueprintInstanceStatus obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("content" Data.Aeson.Types.ToJSON..=)) (blueprintInstanceContent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("context" Data.Aeson.Types.ToJSON..=)) (blueprintInstanceContext obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enabled" Data.Aeson.Types.ToJSON..=)) (blueprintInstanceEnabled obj) : ["last_applied" Data.Aeson.Types.ToJSON..= blueprintInstanceLastApplied obj] : ["last_applied_hash" Data.Aeson.Types.ToJSON..= blueprintInstanceLastAppliedHash obj] : ["managed_models" Data.Aeson.Types.ToJSON..= blueprintInstanceManagedModels obj] : ["metadata" Data.Aeson.Types.ToJSON..= blueprintInstanceMetadata obj] : ["name" Data.Aeson.Types.ToJSON..= blueprintInstanceName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("path" Data.Aeson.Types.ToJSON..=)) (blueprintInstancePath obj) : ["pk" Data.Aeson.Types.ToJSON..= blueprintInstancePk obj] : ["status" Data.Aeson.Types.ToJSON..= blueprintInstanceStatus obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON BlueprintInstance where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "BlueprintInstance" (\obj -> ((((((((((GHC.Base.pure BlueprintInstance GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "content")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "context")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "last_applied")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "last_applied_hash")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "managed_models")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "path")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))

-- | Create a new 'BlueprintInstance' with all required fields.
mkBlueprintInstance ::
  -- | 'blueprintInstanceLastApplied'
  Data.Text.Internal.Text ->
  -- | 'blueprintInstanceLastAppliedHash'
  Data.Text.Internal.Text ->
  -- | 'blueprintInstanceManagedModels'
  [Data.Text.Internal.Text] ->
  -- | 'blueprintInstanceMetadata'
  Data.Aeson.Types.Internal.Object ->
  -- | 'blueprintInstanceName'
  Data.Text.Internal.Text ->
  -- | 'blueprintInstancePk'
  Data.Text.Internal.Text ->
  -- | 'blueprintInstanceStatus'
  Data.Aeson.Types.Internal.Object ->
  BlueprintInstance
mkBlueprintInstance blueprintInstanceLastApplied blueprintInstanceLastAppliedHash blueprintInstanceManagedModels blueprintInstanceMetadata blueprintInstanceName blueprintInstancePk blueprintInstanceStatus =
  BlueprintInstance
    { blueprintInstanceContent = GHC.Maybe.Nothing,
      blueprintInstanceContext = GHC.Maybe.Nothing,
      blueprintInstanceEnabled = GHC.Maybe.Nothing,
      blueprintInstanceLastApplied = blueprintInstanceLastApplied,
      blueprintInstanceLastAppliedHash = blueprintInstanceLastAppliedHash,
      blueprintInstanceManagedModels = blueprintInstanceManagedModels,
      blueprintInstanceMetadata = blueprintInstanceMetadata,
      blueprintInstanceName = blueprintInstanceName,
      blueprintInstancePath = GHC.Maybe.Nothing,
      blueprintInstancePk = blueprintInstancePk,
      blueprintInstanceStatus = blueprintInstanceStatus
    }

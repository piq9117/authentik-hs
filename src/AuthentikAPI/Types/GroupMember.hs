{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema GroupMember
module AuthentikAPI.Types.GroupMember where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.GroupMember@ in the specification.
--
-- Stripped down user serializer to show relevant users for groups
data GroupMember = GroupMember
  { -- | attributes
    groupMemberAttributes :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | email
    --
    -- Constraints:
    --
    -- * Maximum length of 254
    groupMemberEmail :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | is_active: Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
    groupMemberIsActive :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | last_login
    groupMemberLastLogin :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | name: User\'s display name.
    groupMemberName :: Data.Text.Internal.Text,
    -- | pk
    groupMemberPk :: GHC.Types.Int,
    -- | uid
    groupMemberUid :: Data.Text.Internal.Text,
    -- | username: Required. 150 characters or fewer. Letters, digits and \@\/.\/+\/-\/_ only.
    --
    -- Constraints:
    --
    -- * Maximum length of 150
    -- * Must match pattern \'^[\\w.\@+-]+\$\'
    groupMemberUsername :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GroupMember where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (groupMemberAttributes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (groupMemberEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_active" Data.Aeson.Types.ToJSON..=)) (groupMemberIsActive obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_login" Data.Aeson.Types.ToJSON..=)) (groupMemberLastLogin obj) : ["name" Data.Aeson.Types.ToJSON..= groupMemberName obj] : ["pk" Data.Aeson.Types.ToJSON..= groupMemberPk obj] : ["uid" Data.Aeson.Types.ToJSON..= groupMemberUid obj] : ["username" Data.Aeson.Types.ToJSON..= groupMemberUsername obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (groupMemberAttributes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (groupMemberEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_active" Data.Aeson.Types.ToJSON..=)) (groupMemberIsActive obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_login" Data.Aeson.Types.ToJSON..=)) (groupMemberLastLogin obj) : ["name" Data.Aeson.Types.ToJSON..= groupMemberName obj] : ["pk" Data.Aeson.Types.ToJSON..= groupMemberPk obj] : ["uid" Data.Aeson.Types.ToJSON..= groupMemberUid obj] : ["username" Data.Aeson.Types.ToJSON..= groupMemberUsername obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GroupMember where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GroupMember" (\obj -> (((((((GHC.Base.pure GroupMember GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "attributes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "is_active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "last_login")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "uid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "username"))

-- | Create a new 'GroupMember' with all required fields.
mkGroupMember ::
  -- | 'groupMemberName'
  Data.Text.Internal.Text ->
  -- | 'groupMemberPk'
  GHC.Types.Int ->
  -- | 'groupMemberUid'
  Data.Text.Internal.Text ->
  -- | 'groupMemberUsername'
  Data.Text.Internal.Text ->
  GroupMember
mkGroupMember groupMemberName groupMemberPk groupMemberUid groupMemberUsername =
  GroupMember
    { groupMemberAttributes = GHC.Maybe.Nothing,
      groupMemberEmail = GHC.Maybe.Nothing,
      groupMemberIsActive = GHC.Maybe.Nothing,
      groupMemberLastLogin = GHC.Maybe.Nothing,
      groupMemberName = groupMemberName,
      groupMemberPk = groupMemberPk,
      groupMemberUid = groupMemberUid,
      groupMemberUsername = groupMemberUsername
    }

{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema AuthenticatorTOTPStage
module AuthentikAPI.Types.AuthenticatorTOTPStage where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.DigitsEnum
import {-# SOURCE #-} AuthentikAPI.Types.FlowSet
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.AuthenticatorTOTPStage@ in the specification.
--
-- AuthenticatorTOTPStage Serializer
data AuthenticatorTOTPStage = AuthenticatorTOTPStage
  { -- | component: Get object type so that we know how to edit the object
    authenticatorTOTPStageComponent :: Data.Text.Internal.Text,
    -- | configure_flow: Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
    authenticatorTOTPStageConfigureFlow :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | digits
    authenticatorTOTPStageDigits :: DigitsEnum,
    -- | flow_set
    authenticatorTOTPStageFlowSet :: (GHC.Maybe.Maybe [FlowSet]),
    -- | friendly_name
    authenticatorTOTPStageFriendlyName :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | meta_model_name: Return internal model name
    authenticatorTOTPStageMetaModelName :: Data.Text.Internal.Text,
    -- | name
    authenticatorTOTPStageName :: Data.Text.Internal.Text,
    -- | pk
    authenticatorTOTPStagePk :: Data.Text.Internal.Text,
    -- | verbose_name: Return object\'s verbose_name
    authenticatorTOTPStageVerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    authenticatorTOTPStageVerboseNamePlural :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON AuthenticatorTOTPStage where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["component" Data.Aeson.Types.ToJSON..= authenticatorTOTPStageComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("configure_flow" Data.Aeson.Types.ToJSON..=)) (authenticatorTOTPStageConfigureFlow obj) : ["digits" Data.Aeson.Types.ToJSON..= authenticatorTOTPStageDigits obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_set" Data.Aeson.Types.ToJSON..=)) (authenticatorTOTPStageFlowSet obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("friendly_name" Data.Aeson.Types.ToJSON..=)) (authenticatorTOTPStageFriendlyName obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= authenticatorTOTPStageMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= authenticatorTOTPStageName obj] : ["pk" Data.Aeson.Types.ToJSON..= authenticatorTOTPStagePk obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= authenticatorTOTPStageVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= authenticatorTOTPStageVerboseNamePlural obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["component" Data.Aeson.Types.ToJSON..= authenticatorTOTPStageComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("configure_flow" Data.Aeson.Types.ToJSON..=)) (authenticatorTOTPStageConfigureFlow obj) : ["digits" Data.Aeson.Types.ToJSON..= authenticatorTOTPStageDigits obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_set" Data.Aeson.Types.ToJSON..=)) (authenticatorTOTPStageFlowSet obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("friendly_name" Data.Aeson.Types.ToJSON..=)) (authenticatorTOTPStageFriendlyName obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= authenticatorTOTPStageMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= authenticatorTOTPStageName obj] : ["pk" Data.Aeson.Types.ToJSON..= authenticatorTOTPStagePk obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= authenticatorTOTPStageVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= authenticatorTOTPStageVerboseNamePlural obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON AuthenticatorTOTPStage where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "AuthenticatorTOTPStage" (\obj -> (((((((((GHC.Base.pure AuthenticatorTOTPStage GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "configure_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "digits")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_set")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "friendly_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural"))

-- | Create a new 'AuthenticatorTOTPStage' with all required fields.
mkAuthenticatorTOTPStage ::
  -- | 'authenticatorTOTPStageComponent'
  Data.Text.Internal.Text ->
  -- | 'authenticatorTOTPStageDigits'
  DigitsEnum ->
  -- | 'authenticatorTOTPStageMetaModelName'
  Data.Text.Internal.Text ->
  -- | 'authenticatorTOTPStageName'
  Data.Text.Internal.Text ->
  -- | 'authenticatorTOTPStagePk'
  Data.Text.Internal.Text ->
  -- | 'authenticatorTOTPStageVerboseName'
  Data.Text.Internal.Text ->
  -- | 'authenticatorTOTPStageVerboseNamePlural'
  Data.Text.Internal.Text ->
  AuthenticatorTOTPStage
mkAuthenticatorTOTPStage authenticatorTOTPStageComponent authenticatorTOTPStageDigits authenticatorTOTPStageMetaModelName authenticatorTOTPStageName authenticatorTOTPStagePk authenticatorTOTPStageVerboseName authenticatorTOTPStageVerboseNamePlural =
  AuthenticatorTOTPStage
    { authenticatorTOTPStageComponent = authenticatorTOTPStageComponent,
      authenticatorTOTPStageConfigureFlow = GHC.Maybe.Nothing,
      authenticatorTOTPStageDigits = authenticatorTOTPStageDigits,
      authenticatorTOTPStageFlowSet = GHC.Maybe.Nothing,
      authenticatorTOTPStageFriendlyName = GHC.Maybe.Nothing,
      authenticatorTOTPStageMetaModelName = authenticatorTOTPStageMetaModelName,
      authenticatorTOTPStageName = authenticatorTOTPStageName,
      authenticatorTOTPStagePk = authenticatorTOTPStagePk,
      authenticatorTOTPStageVerboseName = authenticatorTOTPStageVerboseName,
      authenticatorTOTPStageVerboseNamePlural = authenticatorTOTPStageVerboseNamePlural
    }

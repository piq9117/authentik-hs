{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema UniquePasswordPolicy
module AuthentikAPI.Types.UniquePasswordPolicy where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.UniquePasswordPolicy@ in the specification.
--
-- Password Uniqueness Policy Serializer
data UniquePasswordPolicy = UniquePasswordPolicy
  { -- | bound_to: Return objects policy is bound to
    uniquePasswordPolicyBoundTo :: GHC.Types.Int,
    -- | component: Get object component so that we know how to edit the object
    uniquePasswordPolicyComponent :: Data.Text.Internal.Text,
    -- | execution_logging: When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.
    uniquePasswordPolicyExecutionLogging :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | meta_model_name: Return internal model name
    uniquePasswordPolicyMetaModelName :: Data.Text.Internal.Text,
    -- | name
    uniquePasswordPolicyName :: Data.Text.Internal.Text,
    -- | num_historical_passwords: Number of passwords to check against.
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of 0.0
    uniquePasswordPolicyNumHistoricalPasswords :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | password_field: Field key to check, field keys defined in Prompt stages are available.
    uniquePasswordPolicyPasswordField :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | pk
    uniquePasswordPolicyPk :: Data.Text.Internal.Text,
    -- | verbose_name: Return object\'s verbose_name
    uniquePasswordPolicyVerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    uniquePasswordPolicyVerboseNamePlural :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON UniquePasswordPolicy where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["bound_to" Data.Aeson.Types.ToJSON..= uniquePasswordPolicyBoundTo obj] : ["component" Data.Aeson.Types.ToJSON..= uniquePasswordPolicyComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("execution_logging" Data.Aeson.Types.ToJSON..=)) (uniquePasswordPolicyExecutionLogging obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= uniquePasswordPolicyMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= uniquePasswordPolicyName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("num_historical_passwords" Data.Aeson.Types.ToJSON..=)) (uniquePasswordPolicyNumHistoricalPasswords obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("password_field" Data.Aeson.Types.ToJSON..=)) (uniquePasswordPolicyPasswordField obj) : ["pk" Data.Aeson.Types.ToJSON..= uniquePasswordPolicyPk obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= uniquePasswordPolicyVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= uniquePasswordPolicyVerboseNamePlural obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["bound_to" Data.Aeson.Types.ToJSON..= uniquePasswordPolicyBoundTo obj] : ["component" Data.Aeson.Types.ToJSON..= uniquePasswordPolicyComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("execution_logging" Data.Aeson.Types.ToJSON..=)) (uniquePasswordPolicyExecutionLogging obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= uniquePasswordPolicyMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= uniquePasswordPolicyName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("num_historical_passwords" Data.Aeson.Types.ToJSON..=)) (uniquePasswordPolicyNumHistoricalPasswords obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("password_field" Data.Aeson.Types.ToJSON..=)) (uniquePasswordPolicyPasswordField obj) : ["pk" Data.Aeson.Types.ToJSON..= uniquePasswordPolicyPk obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= uniquePasswordPolicyVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= uniquePasswordPolicyVerboseNamePlural obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON UniquePasswordPolicy where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "UniquePasswordPolicy" (\obj -> (((((((((GHC.Base.pure UniquePasswordPolicy GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "bound_to")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "execution_logging")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "num_historical_passwords")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "password_field")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural"))

-- | Create a new 'UniquePasswordPolicy' with all required fields.
mkUniquePasswordPolicy ::
  -- | 'uniquePasswordPolicyBoundTo'
  GHC.Types.Int ->
  -- | 'uniquePasswordPolicyComponent'
  Data.Text.Internal.Text ->
  -- | 'uniquePasswordPolicyMetaModelName'
  Data.Text.Internal.Text ->
  -- | 'uniquePasswordPolicyName'
  Data.Text.Internal.Text ->
  -- | 'uniquePasswordPolicyPk'
  Data.Text.Internal.Text ->
  -- | 'uniquePasswordPolicyVerboseName'
  Data.Text.Internal.Text ->
  -- | 'uniquePasswordPolicyVerboseNamePlural'
  Data.Text.Internal.Text ->
  UniquePasswordPolicy
mkUniquePasswordPolicy uniquePasswordPolicyBoundTo uniquePasswordPolicyComponent uniquePasswordPolicyMetaModelName uniquePasswordPolicyName uniquePasswordPolicyPk uniquePasswordPolicyVerboseName uniquePasswordPolicyVerboseNamePlural =
  UniquePasswordPolicy
    { uniquePasswordPolicyBoundTo = uniquePasswordPolicyBoundTo,
      uniquePasswordPolicyComponent = uniquePasswordPolicyComponent,
      uniquePasswordPolicyExecutionLogging = GHC.Maybe.Nothing,
      uniquePasswordPolicyMetaModelName = uniquePasswordPolicyMetaModelName,
      uniquePasswordPolicyName = uniquePasswordPolicyName,
      uniquePasswordPolicyNumHistoricalPasswords = GHC.Maybe.Nothing,
      uniquePasswordPolicyPasswordField = GHC.Maybe.Nothing,
      uniquePasswordPolicyPk = uniquePasswordPolicyPk,
      uniquePasswordPolicyVerboseName = uniquePasswordPolicyVerboseName,
      uniquePasswordPolicyVerboseNamePlural = uniquePasswordPolicyVerboseNamePlural
    }

{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema ExpressionPolicy
module AuthentikAPI.Types.ExpressionPolicy where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.ExpressionPolicy@ in the specification.
--
-- Group Membership Policy Serializer
data ExpressionPolicy = ExpressionPolicy
  { -- | bound_to: Return objects policy is bound to
    expressionPolicyBoundTo :: GHC.Types.Int,
    -- | component: Get object component so that we know how to edit the object
    expressionPolicyComponent :: Data.Text.Internal.Text,
    -- | execution_logging: When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.
    expressionPolicyExecutionLogging :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | expression
    expressionPolicyExpression :: Data.Text.Internal.Text,
    -- | meta_model_name: Return internal model name
    expressionPolicyMetaModelName :: Data.Text.Internal.Text,
    -- | name
    expressionPolicyName :: Data.Text.Internal.Text,
    -- | pk
    expressionPolicyPk :: Data.Text.Internal.Text,
    -- | verbose_name: Return object\'s verbose_name
    expressionPolicyVerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    expressionPolicyVerboseNamePlural :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON ExpressionPolicy where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["bound_to" Data.Aeson.Types.ToJSON..= expressionPolicyBoundTo obj] : ["component" Data.Aeson.Types.ToJSON..= expressionPolicyComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("execution_logging" Data.Aeson.Types.ToJSON..=)) (expressionPolicyExecutionLogging obj) : ["expression" Data.Aeson.Types.ToJSON..= expressionPolicyExpression obj] : ["meta_model_name" Data.Aeson.Types.ToJSON..= expressionPolicyMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= expressionPolicyName obj] : ["pk" Data.Aeson.Types.ToJSON..= expressionPolicyPk obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= expressionPolicyVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= expressionPolicyVerboseNamePlural obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["bound_to" Data.Aeson.Types.ToJSON..= expressionPolicyBoundTo obj] : ["component" Data.Aeson.Types.ToJSON..= expressionPolicyComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("execution_logging" Data.Aeson.Types.ToJSON..=)) (expressionPolicyExecutionLogging obj) : ["expression" Data.Aeson.Types.ToJSON..= expressionPolicyExpression obj] : ["meta_model_name" Data.Aeson.Types.ToJSON..= expressionPolicyMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= expressionPolicyName obj] : ["pk" Data.Aeson.Types.ToJSON..= expressionPolicyPk obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= expressionPolicyVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= expressionPolicyVerboseNamePlural obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON ExpressionPolicy where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "ExpressionPolicy" (\obj -> ((((((((GHC.Base.pure ExpressionPolicy GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "bound_to")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "execution_logging")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "expression")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural"))

-- | Create a new 'ExpressionPolicy' with all required fields.
mkExpressionPolicy ::
  -- | 'expressionPolicyBoundTo'
  GHC.Types.Int ->
  -- | 'expressionPolicyComponent'
  Data.Text.Internal.Text ->
  -- | 'expressionPolicyExpression'
  Data.Text.Internal.Text ->
  -- | 'expressionPolicyMetaModelName'
  Data.Text.Internal.Text ->
  -- | 'expressionPolicyName'
  Data.Text.Internal.Text ->
  -- | 'expressionPolicyPk'
  Data.Text.Internal.Text ->
  -- | 'expressionPolicyVerboseName'
  Data.Text.Internal.Text ->
  -- | 'expressionPolicyVerboseNamePlural'
  Data.Text.Internal.Text ->
  ExpressionPolicy
mkExpressionPolicy expressionPolicyBoundTo expressionPolicyComponent expressionPolicyExpression expressionPolicyMetaModelName expressionPolicyName expressionPolicyPk expressionPolicyVerboseName expressionPolicyVerboseNamePlural =
  ExpressionPolicy
    { expressionPolicyBoundTo = expressionPolicyBoundTo,
      expressionPolicyComponent = expressionPolicyComponent,
      expressionPolicyExecutionLogging = GHC.Maybe.Nothing,
      expressionPolicyExpression = expressionPolicyExpression,
      expressionPolicyMetaModelName = expressionPolicyMetaModelName,
      expressionPolicyName = expressionPolicyName,
      expressionPolicyPk = expressionPolicyPk,
      expressionPolicyVerboseName = expressionPolicyVerboseName,
      expressionPolicyVerboseNamePlural = expressionPolicyVerboseNamePlural
    }

{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema SCIMProviderRequest
module AuthentikAPI.Types.SCIMProviderRequest where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.SCIMProviderRequest@ in the specification.
--
-- SCIMProvider Serializer
data SCIMProviderRequest = SCIMProviderRequest
  { -- | compatibility_mode: Alter authentik behavior for vendor-specific SCIM implementations.
    sCIMProviderRequestCompatibilityMode :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | dry_run: When enabled, provider will not modify or create objects in the remote system.
    sCIMProviderRequestDryRun :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | exclude_users_service_account
    sCIMProviderRequestExcludeUsersServiceAccount :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | filter_group
    sCIMProviderRequestFilterGroup :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | name
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    sCIMProviderRequestName :: Data.Text.Internal.Text,
    -- | property_mappings
    sCIMProviderRequestPropertyMappings :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | property_mappings_group: Property mappings used for group creation\/updating.
    sCIMProviderRequestPropertyMappingsGroup :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | token: Authentication token
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    sCIMProviderRequestToken :: Data.Text.Internal.Text,
    -- | url: Base URL to SCIM requests, usually ends in \/v2
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    sCIMProviderRequestUrl :: Data.Text.Internal.Text,
    -- | verify_certificates
    sCIMProviderRequestVerifyCertificates :: (GHC.Maybe.Maybe GHC.Types.Bool)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SCIMProviderRequest where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("compatibility_mode" Data.Aeson.Types.ToJSON..=)) (sCIMProviderRequestCompatibilityMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dry_run" Data.Aeson.Types.ToJSON..=)) (sCIMProviderRequestDryRun obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exclude_users_service_account" Data.Aeson.Types.ToJSON..=)) (sCIMProviderRequestExcludeUsersServiceAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("filter_group" Data.Aeson.Types.ToJSON..=)) (sCIMProviderRequestFilterGroup obj) : ["name" Data.Aeson.Types.ToJSON..= sCIMProviderRequestName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings" Data.Aeson.Types.ToJSON..=)) (sCIMProviderRequestPropertyMappings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings_group" Data.Aeson.Types.ToJSON..=)) (sCIMProviderRequestPropertyMappingsGroup obj) : ["token" Data.Aeson.Types.ToJSON..= sCIMProviderRequestToken obj] : ["url" Data.Aeson.Types.ToJSON..= sCIMProviderRequestUrl obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verify_certificates" Data.Aeson.Types.ToJSON..=)) (sCIMProviderRequestVerifyCertificates obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("compatibility_mode" Data.Aeson.Types.ToJSON..=)) (sCIMProviderRequestCompatibilityMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dry_run" Data.Aeson.Types.ToJSON..=)) (sCIMProviderRequestDryRun obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exclude_users_service_account" Data.Aeson.Types.ToJSON..=)) (sCIMProviderRequestExcludeUsersServiceAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("filter_group" Data.Aeson.Types.ToJSON..=)) (sCIMProviderRequestFilterGroup obj) : ["name" Data.Aeson.Types.ToJSON..= sCIMProviderRequestName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings" Data.Aeson.Types.ToJSON..=)) (sCIMProviderRequestPropertyMappings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings_group" Data.Aeson.Types.ToJSON..=)) (sCIMProviderRequestPropertyMappingsGroup obj) : ["token" Data.Aeson.Types.ToJSON..= sCIMProviderRequestToken obj] : ["url" Data.Aeson.Types.ToJSON..= sCIMProviderRequestUrl obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verify_certificates" Data.Aeson.Types.ToJSON..=)) (sCIMProviderRequestVerifyCertificates obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SCIMProviderRequest where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SCIMProviderRequest" (\obj -> (((((((((GHC.Base.pure SCIMProviderRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "compatibility_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "dry_run")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "exclude_users_service_account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "filter_group")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "property_mappings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "property_mappings_group")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "token")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verify_certificates"))

-- | Create a new 'SCIMProviderRequest' with all required fields.
mkSCIMProviderRequest ::
  -- | 'sCIMProviderRequestName'
  Data.Text.Internal.Text ->
  -- | 'sCIMProviderRequestToken'
  Data.Text.Internal.Text ->
  -- | 'sCIMProviderRequestUrl'
  Data.Text.Internal.Text ->
  SCIMProviderRequest
mkSCIMProviderRequest sCIMProviderRequestName sCIMProviderRequestToken sCIMProviderRequestUrl =
  SCIMProviderRequest
    { sCIMProviderRequestCompatibilityMode = GHC.Maybe.Nothing,
      sCIMProviderRequestDryRun = GHC.Maybe.Nothing,
      sCIMProviderRequestExcludeUsersServiceAccount = GHC.Maybe.Nothing,
      sCIMProviderRequestFilterGroup = GHC.Maybe.Nothing,
      sCIMProviderRequestName = sCIMProviderRequestName,
      sCIMProviderRequestPropertyMappings = GHC.Maybe.Nothing,
      sCIMProviderRequestPropertyMappingsGroup = GHC.Maybe.Nothing,
      sCIMProviderRequestToken = sCIMProviderRequestToken,
      sCIMProviderRequestUrl = sCIMProviderRequestUrl,
      sCIMProviderRequestVerifyCertificates = GHC.Maybe.Nothing
    }

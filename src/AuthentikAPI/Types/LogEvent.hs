{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema LogEvent
module AuthentikAPI.Types.LogEvent where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.LogLevelEnum
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.LogEvent@ in the specification.
--
-- Single log message with all context logged.
data LogEvent = LogEvent
  { -- | attributes
    logEventAttributes :: Data.Aeson.Types.Internal.Object,
    -- | event
    logEventEvent :: Data.Text.Internal.Text,
    -- | log_level
    logEventLogLevel :: LogLevelEnum,
    -- | logger
    logEventLogger :: Data.Text.Internal.Text,
    -- | timestamp
    logEventTimestamp :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON LogEvent where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["attributes" Data.Aeson.Types.ToJSON..= logEventAttributes obj] : ["event" Data.Aeson.Types.ToJSON..= logEventEvent obj] : ["log_level" Data.Aeson.Types.ToJSON..= logEventLogLevel obj] : ["logger" Data.Aeson.Types.ToJSON..= logEventLogger obj] : ["timestamp" Data.Aeson.Types.ToJSON..= logEventTimestamp obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["attributes" Data.Aeson.Types.ToJSON..= logEventAttributes obj] : ["event" Data.Aeson.Types.ToJSON..= logEventEvent obj] : ["log_level" Data.Aeson.Types.ToJSON..= logEventLogLevel obj] : ["logger" Data.Aeson.Types.ToJSON..= logEventLogger obj] : ["timestamp" Data.Aeson.Types.ToJSON..= logEventTimestamp obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON LogEvent where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "LogEvent" (\obj -> ((((GHC.Base.pure LogEvent GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "attributes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "event")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "log_level")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "logger")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "timestamp"))

-- | Create a new 'LogEvent' with all required fields.
mkLogEvent ::
  -- | 'logEventAttributes'
  Data.Aeson.Types.Internal.Object ->
  -- | 'logEventEvent'
  Data.Text.Internal.Text ->
  -- | 'logEventLogLevel'
  LogLevelEnum ->
  -- | 'logEventLogger'
  Data.Text.Internal.Text ->
  -- | 'logEventTimestamp'
  Data.Text.Internal.Text ->
  LogEvent
mkLogEvent logEventAttributes logEventEvent logEventLogLevel logEventLogger logEventTimestamp =
  LogEvent
    { logEventAttributes = logEventAttributes,
      logEventEvent = logEventEvent,
      logEventLogLevel = logEventLogLevel,
      logEventLogger = logEventLogger,
      logEventTimestamp = logEventTimestamp
    }

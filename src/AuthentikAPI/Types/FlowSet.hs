{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema FlowSet
module AuthentikAPI.Types.FlowSet where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.FlowLayoutEnum
import {-# SOURCE #-} AuthentikAPI.Types.PolicyEngineMode
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.FlowSet@ in the specification.
--
-- Stripped down flow serializer
data FlowSet = FlowSet
  { -- | background: Get the URL to the background image. If the name is \/static or starts with http
    -- it is returned as-is
    flowSetBackground :: Data.Text.Internal.Text,
    -- | compatibility_mode: Enable compatibility mode, increases compatibility with password managers on mobile devices.
    flowSetCompatibilityMode :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | denied_action: Configure what should happen when a flow denies access to a user.
    flowSetDeniedAction :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | designation: Decides what this Flow is used for. For example, the Authentication flow is redirect to when an un-authenticated user visits authentik.
    flowSetDesignation :: Data.Aeson.Types.Internal.Object,
    -- | export_url: Get export URL for flow
    flowSetExportUrl :: Data.Text.Internal.Text,
    -- | layout
    flowSetLayout :: (GHC.Maybe.Maybe FlowLayoutEnum),
    -- | name
    flowSetName :: Data.Text.Internal.Text,
    -- | pk
    flowSetPk :: Data.Text.Internal.Text,
    -- | policy_engine_mode
    flowSetPolicyEngineMode :: (GHC.Maybe.Maybe PolicyEngineMode),
    -- | policybindingmodel_ptr_id
    flowSetPolicybindingmodelPtrId :: Data.Text.Internal.Text,
    -- | slug: Visible in the URL.
    --
    -- Constraints:
    --
    -- * Maximum length of 50
    -- * Must match pattern \'^[-a-zA-Z0-9_]+\$\'
    flowSetSlug :: Data.Text.Internal.Text,
    -- | title: Shown as the Title in Flow pages.
    flowSetTitle :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON FlowSet where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["background" Data.Aeson.Types.ToJSON..= flowSetBackground obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("compatibility_mode" Data.Aeson.Types.ToJSON..=)) (flowSetCompatibilityMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("denied_action" Data.Aeson.Types.ToJSON..=)) (flowSetDeniedAction obj) : ["designation" Data.Aeson.Types.ToJSON..= flowSetDesignation obj] : ["export_url" Data.Aeson.Types.ToJSON..= flowSetExportUrl obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("layout" Data.Aeson.Types.ToJSON..=)) (flowSetLayout obj) : ["name" Data.Aeson.Types.ToJSON..= flowSetName obj] : ["pk" Data.Aeson.Types.ToJSON..= flowSetPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("policy_engine_mode" Data.Aeson.Types.ToJSON..=)) (flowSetPolicyEngineMode obj) : ["policybindingmodel_ptr_id" Data.Aeson.Types.ToJSON..= flowSetPolicybindingmodelPtrId obj] : ["slug" Data.Aeson.Types.ToJSON..= flowSetSlug obj] : ["title" Data.Aeson.Types.ToJSON..= flowSetTitle obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["background" Data.Aeson.Types.ToJSON..= flowSetBackground obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("compatibility_mode" Data.Aeson.Types.ToJSON..=)) (flowSetCompatibilityMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("denied_action" Data.Aeson.Types.ToJSON..=)) (flowSetDeniedAction obj) : ["designation" Data.Aeson.Types.ToJSON..= flowSetDesignation obj] : ["export_url" Data.Aeson.Types.ToJSON..= flowSetExportUrl obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("layout" Data.Aeson.Types.ToJSON..=)) (flowSetLayout obj) : ["name" Data.Aeson.Types.ToJSON..= flowSetName obj] : ["pk" Data.Aeson.Types.ToJSON..= flowSetPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("policy_engine_mode" Data.Aeson.Types.ToJSON..=)) (flowSetPolicyEngineMode obj) : ["policybindingmodel_ptr_id" Data.Aeson.Types.ToJSON..= flowSetPolicybindingmodelPtrId obj] : ["slug" Data.Aeson.Types.ToJSON..= flowSetSlug obj] : ["title" Data.Aeson.Types.ToJSON..= flowSetTitle obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON FlowSet where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "FlowSet" (\obj -> (((((((((((GHC.Base.pure FlowSet GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "background")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "compatibility_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "denied_action")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "designation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "export_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "layout")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "policy_engine_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "policybindingmodel_ptr_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "slug")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "title"))

-- | Create a new 'FlowSet' with all required fields.
mkFlowSet ::
  -- | 'flowSetBackground'
  Data.Text.Internal.Text ->
  -- | 'flowSetDesignation'
  Data.Aeson.Types.Internal.Object ->
  -- | 'flowSetExportUrl'
  Data.Text.Internal.Text ->
  -- | 'flowSetName'
  Data.Text.Internal.Text ->
  -- | 'flowSetPk'
  Data.Text.Internal.Text ->
  -- | 'flowSetPolicybindingmodelPtrId'
  Data.Text.Internal.Text ->
  -- | 'flowSetSlug'
  Data.Text.Internal.Text ->
  -- | 'flowSetTitle'
  Data.Text.Internal.Text ->
  FlowSet
mkFlowSet flowSetBackground flowSetDesignation flowSetExportUrl flowSetName flowSetPk flowSetPolicybindingmodelPtrId flowSetSlug flowSetTitle =
  FlowSet
    { flowSetBackground = flowSetBackground,
      flowSetCompatibilityMode = GHC.Maybe.Nothing,
      flowSetDeniedAction = GHC.Maybe.Nothing,
      flowSetDesignation = flowSetDesignation,
      flowSetExportUrl = flowSetExportUrl,
      flowSetLayout = GHC.Maybe.Nothing,
      flowSetName = flowSetName,
      flowSetPk = flowSetPk,
      flowSetPolicyEngineMode = GHC.Maybe.Nothing,
      flowSetPolicybindingmodelPtrId = flowSetPolicybindingmodelPtrId,
      flowSetSlug = flowSetSlug,
      flowSetTitle = flowSetTitle
    }

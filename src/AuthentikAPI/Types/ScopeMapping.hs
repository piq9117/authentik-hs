{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema ScopeMapping
module AuthentikAPI.Types.ScopeMapping where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.ScopeMapping@ in the specification.
--
-- ScopeMapping Serializer
data ScopeMapping = ScopeMapping
  { -- | component: Get object\'s component so that we know how to edit the object
    scopeMappingComponent :: Data.Text.Internal.Text,
    -- | description: Description shown to the user when consenting. If left empty, the user won\'t be informed.
    scopeMappingDescription :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | expression
    scopeMappingExpression :: Data.Text.Internal.Text,
    -- | managed: Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
    scopeMappingManaged :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | meta_model_name: Return internal model name
    scopeMappingMetaModelName :: Data.Text.Internal.Text,
    -- | name
    scopeMappingName :: Data.Text.Internal.Text,
    -- | pk
    scopeMappingPk :: Data.Text.Internal.Text,
    -- | scope_name: Scope name requested by the client
    scopeMappingScopeName :: Data.Text.Internal.Text,
    -- | verbose_name: Return object\'s verbose_name
    scopeMappingVerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    scopeMappingVerboseNamePlural :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON ScopeMapping where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["component" Data.Aeson.Types.ToJSON..= scopeMappingComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (scopeMappingDescription obj) : ["expression" Data.Aeson.Types.ToJSON..= scopeMappingExpression obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("managed" Data.Aeson.Types.ToJSON..=)) (scopeMappingManaged obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= scopeMappingMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= scopeMappingName obj] : ["pk" Data.Aeson.Types.ToJSON..= scopeMappingPk obj] : ["scope_name" Data.Aeson.Types.ToJSON..= scopeMappingScopeName obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= scopeMappingVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= scopeMappingVerboseNamePlural obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["component" Data.Aeson.Types.ToJSON..= scopeMappingComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (scopeMappingDescription obj) : ["expression" Data.Aeson.Types.ToJSON..= scopeMappingExpression obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("managed" Data.Aeson.Types.ToJSON..=)) (scopeMappingManaged obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= scopeMappingMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= scopeMappingName obj] : ["pk" Data.Aeson.Types.ToJSON..= scopeMappingPk obj] : ["scope_name" Data.Aeson.Types.ToJSON..= scopeMappingScopeName obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= scopeMappingVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= scopeMappingVerboseNamePlural obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON ScopeMapping where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "ScopeMapping" (\obj -> (((((((((GHC.Base.pure ScopeMapping GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "expression")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "managed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "scope_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural"))

-- | Create a new 'ScopeMapping' with all required fields.
mkScopeMapping ::
  -- | 'scopeMappingComponent'
  Data.Text.Internal.Text ->
  -- | 'scopeMappingExpression'
  Data.Text.Internal.Text ->
  -- | 'scopeMappingMetaModelName'
  Data.Text.Internal.Text ->
  -- | 'scopeMappingName'
  Data.Text.Internal.Text ->
  -- | 'scopeMappingPk'
  Data.Text.Internal.Text ->
  -- | 'scopeMappingScopeName'
  Data.Text.Internal.Text ->
  -- | 'scopeMappingVerboseName'
  Data.Text.Internal.Text ->
  -- | 'scopeMappingVerboseNamePlural'
  Data.Text.Internal.Text ->
  ScopeMapping
mkScopeMapping scopeMappingComponent scopeMappingExpression scopeMappingMetaModelName scopeMappingName scopeMappingPk scopeMappingScopeName scopeMappingVerboseName scopeMappingVerboseNamePlural =
  ScopeMapping
    { scopeMappingComponent = scopeMappingComponent,
      scopeMappingDescription = GHC.Maybe.Nothing,
      scopeMappingExpression = scopeMappingExpression,
      scopeMappingManaged = GHC.Maybe.Nothing,
      scopeMappingMetaModelName = scopeMappingMetaModelName,
      scopeMappingName = scopeMappingName,
      scopeMappingPk = scopeMappingPk,
      scopeMappingScopeName = scopeMappingScopeName,
      scopeMappingVerboseName = scopeMappingVerboseName,
      scopeMappingVerboseNamePlural = scopeMappingVerboseNamePlural
    }

{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema SAMLProvider
module AuthentikAPI.Types.SAMLProvider where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.DigestAlgorithmEnum
import {-# SOURCE #-} AuthentikAPI.Types.SignatureAlgorithmEnum
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.SAMLProvider@ in the specification.
--
-- SAMLProvider Serializer
data SAMLProvider = SAMLProvider
  { -- | acs_url
    sAMLProviderAcsUrl :: Data.Text.Internal.Text,
    -- | assertion_valid_not_before: Assertion valid not before current time + this value (Format: hours=-1;minutes=-2;seconds=-3).
    sAMLProviderAssertionValidNotBefore :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | assertion_valid_not_on_or_after: Assertion not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).
    sAMLProviderAssertionValidNotOnOrAfter :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | assigned_application_name: Application\'s display Name.
    sAMLProviderAssignedApplicationName :: Data.Text.Internal.Text,
    -- | assigned_application_slug: Internal application name, used in URLs.
    sAMLProviderAssignedApplicationSlug :: Data.Text.Internal.Text,
    -- | assigned_backchannel_application_name: Application\'s display Name.
    sAMLProviderAssignedBackchannelApplicationName :: Data.Text.Internal.Text,
    -- | assigned_backchannel_application_slug: Internal application name, used in URLs.
    sAMLProviderAssignedBackchannelApplicationSlug :: Data.Text.Internal.Text,
    -- | audience: Value of the audience restriction field of the assertion. When left empty, no audience restriction will be added.
    sAMLProviderAudience :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | authentication_flow: Flow used for authentication when the associated application is accessed by an un-authenticated user.
    sAMLProviderAuthenticationFlow :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | authn_context_class_ref_mapping: Configure how the AuthnContextClassRef value will be created. When left empty, the AuthnContextClassRef will be set based on which authentication methods the user used to authenticate.
    sAMLProviderAuthnContextClassRefMapping :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | authorization_flow: Flow used when authorizing this provider.
    sAMLProviderAuthorizationFlow :: Data.Text.Internal.Text,
    -- | component: Get object component so that we know how to edit the object
    sAMLProviderComponent :: Data.Text.Internal.Text,
    -- | default_relay_state: Default relay_state value for IDP-initiated logins
    sAMLProviderDefaultRelayState :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | digest_algorithm
    sAMLProviderDigestAlgorithm :: (GHC.Maybe.Maybe DigestAlgorithmEnum),
    -- | encryption_kp: When selected, incoming assertions are encrypted by the IdP using the public key of the encryption keypair. The assertion is decrypted by the SP using the the private key.
    sAMLProviderEncryptionKp :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | invalidation_flow: Flow used ending the session from a provider.
    sAMLProviderInvalidationFlow :: Data.Text.Internal.Text,
    -- | issuer: Also known as EntityID
    sAMLProviderIssuer :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | meta_model_name: Return internal model name
    sAMLProviderMetaModelName :: Data.Text.Internal.Text,
    -- | name
    sAMLProviderName :: Data.Text.Internal.Text,
    -- | name_id_mapping: Configure how the NameID value will be created. When left empty, the NameIDPolicy of the incoming request will be considered
    sAMLProviderNameIdMapping :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | pk
    sAMLProviderPk :: GHC.Types.Int,
    -- | property_mappings
    sAMLProviderPropertyMappings :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | session_valid_not_on_or_after: Session not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).
    sAMLProviderSessionValidNotOnOrAfter :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | sign_assertion
    sAMLProviderSignAssertion :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | sign_response
    sAMLProviderSignResponse :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | signature_algorithm
    sAMLProviderSignatureAlgorithm :: (GHC.Maybe.Maybe SignatureAlgorithmEnum),
    -- | signing_kp: Keypair used to sign outgoing Responses going to the Service Provider.
    sAMLProviderSigningKp :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | sp_binding: This determines how authentik sends the response back to the Service Provider.
    sAMLProviderSpBinding :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | url_download_metadata: Get metadata download URL
    sAMLProviderUrlDownloadMetadata :: Data.Text.Internal.Text,
    -- | url_slo_post: Get SLO POST URL
    sAMLProviderUrlSloPost :: Data.Text.Internal.Text,
    -- | url_slo_redirect: Get SLO redirect URL
    sAMLProviderUrlSloRedirect :: Data.Text.Internal.Text,
    -- | url_sso_init: Get SSO IDP-Initiated URL
    sAMLProviderUrlSsoInit :: Data.Text.Internal.Text,
    -- | url_sso_post: Get SSO Post URL
    sAMLProviderUrlSsoPost :: Data.Text.Internal.Text,
    -- | url_sso_redirect: Get SSO Redirect URL
    sAMLProviderUrlSsoRedirect :: Data.Text.Internal.Text,
    -- | verbose_name: Return object\'s verbose_name
    sAMLProviderVerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    sAMLProviderVerboseNamePlural :: Data.Text.Internal.Text,
    -- | verification_kp: When selected, incoming assertion\'s Signatures will be validated against this certificate. To allow unsigned Requests, leave on default.
    sAMLProviderVerificationKp :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SAMLProvider where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["acs_url" Data.Aeson.Types.ToJSON..= sAMLProviderAcsUrl obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("assertion_valid_not_before" Data.Aeson.Types.ToJSON..=)) (sAMLProviderAssertionValidNotBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("assertion_valid_not_on_or_after" Data.Aeson.Types.ToJSON..=)) (sAMLProviderAssertionValidNotOnOrAfter obj) : ["assigned_application_name" Data.Aeson.Types.ToJSON..= sAMLProviderAssignedApplicationName obj] : ["assigned_application_slug" Data.Aeson.Types.ToJSON..= sAMLProviderAssignedApplicationSlug obj] : ["assigned_backchannel_application_name" Data.Aeson.Types.ToJSON..= sAMLProviderAssignedBackchannelApplicationName obj] : ["assigned_backchannel_application_slug" Data.Aeson.Types.ToJSON..= sAMLProviderAssignedBackchannelApplicationSlug obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("audience" Data.Aeson.Types.ToJSON..=)) (sAMLProviderAudience obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication_flow" Data.Aeson.Types.ToJSON..=)) (sAMLProviderAuthenticationFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authn_context_class_ref_mapping" Data.Aeson.Types.ToJSON..=)) (sAMLProviderAuthnContextClassRefMapping obj) : ["authorization_flow" Data.Aeson.Types.ToJSON..= sAMLProviderAuthorizationFlow obj] : ["component" Data.Aeson.Types.ToJSON..= sAMLProviderComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("default_relay_state" Data.Aeson.Types.ToJSON..=)) (sAMLProviderDefaultRelayState obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("digest_algorithm" Data.Aeson.Types.ToJSON..=)) (sAMLProviderDigestAlgorithm obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("encryption_kp" Data.Aeson.Types.ToJSON..=)) (sAMLProviderEncryptionKp obj) : ["invalidation_flow" Data.Aeson.Types.ToJSON..= sAMLProviderInvalidationFlow obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("issuer" Data.Aeson.Types.ToJSON..=)) (sAMLProviderIssuer obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= sAMLProviderMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= sAMLProviderName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name_id_mapping" Data.Aeson.Types.ToJSON..=)) (sAMLProviderNameIdMapping obj) : ["pk" Data.Aeson.Types.ToJSON..= sAMLProviderPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings" Data.Aeson.Types.ToJSON..=)) (sAMLProviderPropertyMappings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("session_valid_not_on_or_after" Data.Aeson.Types.ToJSON..=)) (sAMLProviderSessionValidNotOnOrAfter obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sign_assertion" Data.Aeson.Types.ToJSON..=)) (sAMLProviderSignAssertion obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sign_response" Data.Aeson.Types.ToJSON..=)) (sAMLProviderSignResponse obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("signature_algorithm" Data.Aeson.Types.ToJSON..=)) (sAMLProviderSignatureAlgorithm obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("signing_kp" Data.Aeson.Types.ToJSON..=)) (sAMLProviderSigningKp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sp_binding" Data.Aeson.Types.ToJSON..=)) (sAMLProviderSpBinding obj) : ["url_download_metadata" Data.Aeson.Types.ToJSON..= sAMLProviderUrlDownloadMetadata obj] : ["url_slo_post" Data.Aeson.Types.ToJSON..= sAMLProviderUrlSloPost obj] : ["url_slo_redirect" Data.Aeson.Types.ToJSON..= sAMLProviderUrlSloRedirect obj] : ["url_sso_init" Data.Aeson.Types.ToJSON..= sAMLProviderUrlSsoInit obj] : ["url_sso_post" Data.Aeson.Types.ToJSON..= sAMLProviderUrlSsoPost obj] : ["url_sso_redirect" Data.Aeson.Types.ToJSON..= sAMLProviderUrlSsoRedirect obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= sAMLProviderVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= sAMLProviderVerboseNamePlural obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_kp" Data.Aeson.Types.ToJSON..=)) (sAMLProviderVerificationKp obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["acs_url" Data.Aeson.Types.ToJSON..= sAMLProviderAcsUrl obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("assertion_valid_not_before" Data.Aeson.Types.ToJSON..=)) (sAMLProviderAssertionValidNotBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("assertion_valid_not_on_or_after" Data.Aeson.Types.ToJSON..=)) (sAMLProviderAssertionValidNotOnOrAfter obj) : ["assigned_application_name" Data.Aeson.Types.ToJSON..= sAMLProviderAssignedApplicationName obj] : ["assigned_application_slug" Data.Aeson.Types.ToJSON..= sAMLProviderAssignedApplicationSlug obj] : ["assigned_backchannel_application_name" Data.Aeson.Types.ToJSON..= sAMLProviderAssignedBackchannelApplicationName obj] : ["assigned_backchannel_application_slug" Data.Aeson.Types.ToJSON..= sAMLProviderAssignedBackchannelApplicationSlug obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("audience" Data.Aeson.Types.ToJSON..=)) (sAMLProviderAudience obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication_flow" Data.Aeson.Types.ToJSON..=)) (sAMLProviderAuthenticationFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authn_context_class_ref_mapping" Data.Aeson.Types.ToJSON..=)) (sAMLProviderAuthnContextClassRefMapping obj) : ["authorization_flow" Data.Aeson.Types.ToJSON..= sAMLProviderAuthorizationFlow obj] : ["component" Data.Aeson.Types.ToJSON..= sAMLProviderComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("default_relay_state" Data.Aeson.Types.ToJSON..=)) (sAMLProviderDefaultRelayState obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("digest_algorithm" Data.Aeson.Types.ToJSON..=)) (sAMLProviderDigestAlgorithm obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("encryption_kp" Data.Aeson.Types.ToJSON..=)) (sAMLProviderEncryptionKp obj) : ["invalidation_flow" Data.Aeson.Types.ToJSON..= sAMLProviderInvalidationFlow obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("issuer" Data.Aeson.Types.ToJSON..=)) (sAMLProviderIssuer obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= sAMLProviderMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= sAMLProviderName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name_id_mapping" Data.Aeson.Types.ToJSON..=)) (sAMLProviderNameIdMapping obj) : ["pk" Data.Aeson.Types.ToJSON..= sAMLProviderPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings" Data.Aeson.Types.ToJSON..=)) (sAMLProviderPropertyMappings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("session_valid_not_on_or_after" Data.Aeson.Types.ToJSON..=)) (sAMLProviderSessionValidNotOnOrAfter obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sign_assertion" Data.Aeson.Types.ToJSON..=)) (sAMLProviderSignAssertion obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sign_response" Data.Aeson.Types.ToJSON..=)) (sAMLProviderSignResponse obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("signature_algorithm" Data.Aeson.Types.ToJSON..=)) (sAMLProviderSignatureAlgorithm obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("signing_kp" Data.Aeson.Types.ToJSON..=)) (sAMLProviderSigningKp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sp_binding" Data.Aeson.Types.ToJSON..=)) (sAMLProviderSpBinding obj) : ["url_download_metadata" Data.Aeson.Types.ToJSON..= sAMLProviderUrlDownloadMetadata obj] : ["url_slo_post" Data.Aeson.Types.ToJSON..= sAMLProviderUrlSloPost obj] : ["url_slo_redirect" Data.Aeson.Types.ToJSON..= sAMLProviderUrlSloRedirect obj] : ["url_sso_init" Data.Aeson.Types.ToJSON..= sAMLProviderUrlSsoInit obj] : ["url_sso_post" Data.Aeson.Types.ToJSON..= sAMLProviderUrlSsoPost obj] : ["url_sso_redirect" Data.Aeson.Types.ToJSON..= sAMLProviderUrlSsoRedirect obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= sAMLProviderVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= sAMLProviderVerboseNamePlural obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_kp" Data.Aeson.Types.ToJSON..=)) (sAMLProviderVerificationKp obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SAMLProvider where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SAMLProvider" (\obj -> ((((((((((((((((((((((((((((((((((((GHC.Base.pure SAMLProvider GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "acs_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "assertion_valid_not_before")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "assertion_valid_not_on_or_after")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assigned_application_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assigned_application_slug")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assigned_backchannel_application_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assigned_backchannel_application_slug")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "audience")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "authentication_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "authn_context_class_ref_mapping")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "authorization_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "default_relay_state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "digest_algorithm")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "encryption_kp")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "invalidation_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "issuer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "name_id_mapping")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "property_mappings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "session_valid_not_on_or_after")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sign_assertion")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sign_response")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "signature_algorithm")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "signing_kp")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sp_binding")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url_download_metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url_slo_post")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url_slo_redirect")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url_sso_init")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url_sso_post")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url_sso_redirect")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_kp"))

-- | Create a new 'SAMLProvider' with all required fields.
mkSAMLProvider ::
  -- | 'sAMLProviderAcsUrl'
  Data.Text.Internal.Text ->
  -- | 'sAMLProviderAssignedApplicationName'
  Data.Text.Internal.Text ->
  -- | 'sAMLProviderAssignedApplicationSlug'
  Data.Text.Internal.Text ->
  -- | 'sAMLProviderAssignedBackchannelApplicationName'
  Data.Text.Internal.Text ->
  -- | 'sAMLProviderAssignedBackchannelApplicationSlug'
  Data.Text.Internal.Text ->
  -- | 'sAMLProviderAuthorizationFlow'
  Data.Text.Internal.Text ->
  -- | 'sAMLProviderComponent'
  Data.Text.Internal.Text ->
  -- | 'sAMLProviderInvalidationFlow'
  Data.Text.Internal.Text ->
  -- | 'sAMLProviderMetaModelName'
  Data.Text.Internal.Text ->
  -- | 'sAMLProviderName'
  Data.Text.Internal.Text ->
  -- | 'sAMLProviderPk'
  GHC.Types.Int ->
  -- | 'sAMLProviderUrlDownloadMetadata'
  Data.Text.Internal.Text ->
  -- | 'sAMLProviderUrlSloPost'
  Data.Text.Internal.Text ->
  -- | 'sAMLProviderUrlSloRedirect'
  Data.Text.Internal.Text ->
  -- | 'sAMLProviderUrlSsoInit'
  Data.Text.Internal.Text ->
  -- | 'sAMLProviderUrlSsoPost'
  Data.Text.Internal.Text ->
  -- | 'sAMLProviderUrlSsoRedirect'
  Data.Text.Internal.Text ->
  -- | 'sAMLProviderVerboseName'
  Data.Text.Internal.Text ->
  -- | 'sAMLProviderVerboseNamePlural'
  Data.Text.Internal.Text ->
  SAMLProvider
mkSAMLProvider sAMLProviderAcsUrl sAMLProviderAssignedApplicationName sAMLProviderAssignedApplicationSlug sAMLProviderAssignedBackchannelApplicationName sAMLProviderAssignedBackchannelApplicationSlug sAMLProviderAuthorizationFlow sAMLProviderComponent sAMLProviderInvalidationFlow sAMLProviderMetaModelName sAMLProviderName sAMLProviderPk sAMLProviderUrlDownloadMetadata sAMLProviderUrlSloPost sAMLProviderUrlSloRedirect sAMLProviderUrlSsoInit sAMLProviderUrlSsoPost sAMLProviderUrlSsoRedirect sAMLProviderVerboseName sAMLProviderVerboseNamePlural =
  SAMLProvider
    { sAMLProviderAcsUrl = sAMLProviderAcsUrl,
      sAMLProviderAssertionValidNotBefore = GHC.Maybe.Nothing,
      sAMLProviderAssertionValidNotOnOrAfter = GHC.Maybe.Nothing,
      sAMLProviderAssignedApplicationName = sAMLProviderAssignedApplicationName,
      sAMLProviderAssignedApplicationSlug = sAMLProviderAssignedApplicationSlug,
      sAMLProviderAssignedBackchannelApplicationName = sAMLProviderAssignedBackchannelApplicationName,
      sAMLProviderAssignedBackchannelApplicationSlug = sAMLProviderAssignedBackchannelApplicationSlug,
      sAMLProviderAudience = GHC.Maybe.Nothing,
      sAMLProviderAuthenticationFlow = GHC.Maybe.Nothing,
      sAMLProviderAuthnContextClassRefMapping = GHC.Maybe.Nothing,
      sAMLProviderAuthorizationFlow = sAMLProviderAuthorizationFlow,
      sAMLProviderComponent = sAMLProviderComponent,
      sAMLProviderDefaultRelayState = GHC.Maybe.Nothing,
      sAMLProviderDigestAlgorithm = GHC.Maybe.Nothing,
      sAMLProviderEncryptionKp = GHC.Maybe.Nothing,
      sAMLProviderInvalidationFlow = sAMLProviderInvalidationFlow,
      sAMLProviderIssuer = GHC.Maybe.Nothing,
      sAMLProviderMetaModelName = sAMLProviderMetaModelName,
      sAMLProviderName = sAMLProviderName,
      sAMLProviderNameIdMapping = GHC.Maybe.Nothing,
      sAMLProviderPk = sAMLProviderPk,
      sAMLProviderPropertyMappings = GHC.Maybe.Nothing,
      sAMLProviderSessionValidNotOnOrAfter = GHC.Maybe.Nothing,
      sAMLProviderSignAssertion = GHC.Maybe.Nothing,
      sAMLProviderSignResponse = GHC.Maybe.Nothing,
      sAMLProviderSignatureAlgorithm = GHC.Maybe.Nothing,
      sAMLProviderSigningKp = GHC.Maybe.Nothing,
      sAMLProviderSpBinding = GHC.Maybe.Nothing,
      sAMLProviderUrlDownloadMetadata = sAMLProviderUrlDownloadMetadata,
      sAMLProviderUrlSloPost = sAMLProviderUrlSloPost,
      sAMLProviderUrlSloRedirect = sAMLProviderUrlSloRedirect,
      sAMLProviderUrlSsoInit = sAMLProviderUrlSsoInit,
      sAMLProviderUrlSsoPost = sAMLProviderUrlSsoPost,
      sAMLProviderUrlSsoRedirect = sAMLProviderUrlSsoRedirect,
      sAMLProviderVerboseName = sAMLProviderVerboseName,
      sAMLProviderVerboseNamePlural = sAMLProviderVerboseNamePlural,
      sAMLProviderVerificationKp = GHC.Maybe.Nothing
    }

{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema ConsentChallenge
module AuthentikAPI.Types.ConsentChallenge where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.ConsentPermission
import {-# SOURCE #-} AuthentikAPI.Types.ContextualFlowInfo
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.ConsentChallenge@ in the specification.
--
-- Challenge info for consent screens
data ConsentChallenge = ConsentChallenge
  { -- | additional_permissions
    consentChallengeAdditionalPermissions :: [ConsentPermission],
    -- | component
    consentChallengeComponent :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | flow_info: Contextual flow information for a challenge
    consentChallengeFlowInfo :: (GHC.Maybe.Maybe ContextualFlowInfo),
    -- | header_text
    consentChallengeHeaderText :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | pending_user
    consentChallengePendingUser :: Data.Text.Internal.Text,
    -- | pending_user_avatar
    consentChallengePendingUserAvatar :: Data.Text.Internal.Text,
    -- | permissions
    consentChallengePermissions :: [ConsentPermission],
    -- | response_errors
    consentChallengeResponseErrors :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | token
    consentChallengeToken :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON ConsentChallenge where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["additional_permissions" Data.Aeson.Types.ToJSON..= consentChallengeAdditionalPermissions obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("component" Data.Aeson.Types.ToJSON..=)) (consentChallengeComponent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_info" Data.Aeson.Types.ToJSON..=)) (consentChallengeFlowInfo obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("header_text" Data.Aeson.Types.ToJSON..=)) (consentChallengeHeaderText obj) : ["pending_user" Data.Aeson.Types.ToJSON..= consentChallengePendingUser obj] : ["pending_user_avatar" Data.Aeson.Types.ToJSON..= consentChallengePendingUserAvatar obj] : ["permissions" Data.Aeson.Types.ToJSON..= consentChallengePermissions obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("response_errors" Data.Aeson.Types.ToJSON..=)) (consentChallengeResponseErrors obj) : ["token" Data.Aeson.Types.ToJSON..= consentChallengeToken obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["additional_permissions" Data.Aeson.Types.ToJSON..= consentChallengeAdditionalPermissions obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("component" Data.Aeson.Types.ToJSON..=)) (consentChallengeComponent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_info" Data.Aeson.Types.ToJSON..=)) (consentChallengeFlowInfo obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("header_text" Data.Aeson.Types.ToJSON..=)) (consentChallengeHeaderText obj) : ["pending_user" Data.Aeson.Types.ToJSON..= consentChallengePendingUser obj] : ["pending_user_avatar" Data.Aeson.Types.ToJSON..= consentChallengePendingUserAvatar obj] : ["permissions" Data.Aeson.Types.ToJSON..= consentChallengePermissions obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("response_errors" Data.Aeson.Types.ToJSON..=)) (consentChallengeResponseErrors obj) : ["token" Data.Aeson.Types.ToJSON..= consentChallengeToken obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON ConsentChallenge where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "ConsentChallenge" (\obj -> ((((((((GHC.Base.pure ConsentChallenge GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "additional_permissions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_info")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "header_text")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pending_user")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pending_user_avatar")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "permissions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "response_errors")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "token"))

-- | Create a new 'ConsentChallenge' with all required fields.
mkConsentChallenge ::
  -- | 'consentChallengeAdditionalPermissions'
  [ConsentPermission] ->
  -- | 'consentChallengePendingUser'
  Data.Text.Internal.Text ->
  -- | 'consentChallengePendingUserAvatar'
  Data.Text.Internal.Text ->
  -- | 'consentChallengePermissions'
  [ConsentPermission] ->
  -- | 'consentChallengeToken'
  Data.Text.Internal.Text ->
  ConsentChallenge
mkConsentChallenge consentChallengeAdditionalPermissions consentChallengePendingUser consentChallengePendingUserAvatar consentChallengePermissions consentChallengeToken =
  ConsentChallenge
    { consentChallengeAdditionalPermissions = consentChallengeAdditionalPermissions,
      consentChallengeComponent = GHC.Maybe.Nothing,
      consentChallengeFlowInfo = GHC.Maybe.Nothing,
      consentChallengeHeaderText = GHC.Maybe.Nothing,
      consentChallengePendingUser = consentChallengePendingUser,
      consentChallengePendingUserAvatar = consentChallengePendingUserAvatar,
      consentChallengePermissions = consentChallengePermissions,
      consentChallengeResponseErrors = GHC.Maybe.Nothing,
      consentChallengeToken = consentChallengeToken
    }

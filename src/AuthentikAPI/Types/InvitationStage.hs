{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema InvitationStage
module AuthentikAPI.Types.InvitationStage where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.FlowSet
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.InvitationStage@ in the specification.
--
-- InvitationStage Serializer
data InvitationStage = InvitationStage
  { -- | component: Get object type so that we know how to edit the object
    invitationStageComponent :: Data.Text.Internal.Text,
    -- | continue_flow_without_invitation: If this flag is set, this Stage will jump to the next Stage when no Invitation is given. By default this Stage will cancel the Flow when no invitation is given.
    invitationStageContinueFlowWithoutInvitation :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | flow_set
    invitationStageFlowSet :: (GHC.Maybe.Maybe [FlowSet]),
    -- | meta_model_name: Return internal model name
    invitationStageMetaModelName :: Data.Text.Internal.Text,
    -- | name
    invitationStageName :: Data.Text.Internal.Text,
    -- | pk
    invitationStagePk :: Data.Text.Internal.Text,
    -- | verbose_name: Return object\'s verbose_name
    invitationStageVerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    invitationStageVerboseNamePlural :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON InvitationStage where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["component" Data.Aeson.Types.ToJSON..= invitationStageComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("continue_flow_without_invitation" Data.Aeson.Types.ToJSON..=)) (invitationStageContinueFlowWithoutInvitation obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_set" Data.Aeson.Types.ToJSON..=)) (invitationStageFlowSet obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= invitationStageMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= invitationStageName obj] : ["pk" Data.Aeson.Types.ToJSON..= invitationStagePk obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= invitationStageVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= invitationStageVerboseNamePlural obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["component" Data.Aeson.Types.ToJSON..= invitationStageComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("continue_flow_without_invitation" Data.Aeson.Types.ToJSON..=)) (invitationStageContinueFlowWithoutInvitation obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_set" Data.Aeson.Types.ToJSON..=)) (invitationStageFlowSet obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= invitationStageMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= invitationStageName obj] : ["pk" Data.Aeson.Types.ToJSON..= invitationStagePk obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= invitationStageVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= invitationStageVerboseNamePlural obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON InvitationStage where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "InvitationStage" (\obj -> (((((((GHC.Base.pure InvitationStage GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "continue_flow_without_invitation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_set")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural"))

-- | Create a new 'InvitationStage' with all required fields.
mkInvitationStage ::
  -- | 'invitationStageComponent'
  Data.Text.Internal.Text ->
  -- | 'invitationStageMetaModelName'
  Data.Text.Internal.Text ->
  -- | 'invitationStageName'
  Data.Text.Internal.Text ->
  -- | 'invitationStagePk'
  Data.Text.Internal.Text ->
  -- | 'invitationStageVerboseName'
  Data.Text.Internal.Text ->
  -- | 'invitationStageVerboseNamePlural'
  Data.Text.Internal.Text ->
  InvitationStage
mkInvitationStage invitationStageComponent invitationStageMetaModelName invitationStageName invitationStagePk invitationStageVerboseName invitationStageVerboseNamePlural =
  InvitationStage
    { invitationStageComponent = invitationStageComponent,
      invitationStageContinueFlowWithoutInvitation = GHC.Maybe.Nothing,
      invitationStageFlowSet = GHC.Maybe.Nothing,
      invitationStageMetaModelName = invitationStageMetaModelName,
      invitationStageName = invitationStageName,
      invitationStagePk = invitationStagePk,
      invitationStageVerboseName = invitationStageVerboseName,
      invitationStageVerboseNamePlural = invitationStageVerboseNamePlural
    }

{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema ApplicationEntitlementRequest
module AuthentikAPI.Types.ApplicationEntitlementRequest where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.ApplicationEntitlementRequest@ in the specification.
--
-- ApplicationEntitlement Serializer
data ApplicationEntitlementRequest = ApplicationEntitlementRequest
  { -- | app
    applicationEntitlementRequestApp :: Data.Text.Internal.Text,
    -- | attributes
    applicationEntitlementRequestAttributes :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | name
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    applicationEntitlementRequestName :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON ApplicationEntitlementRequest where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["app" Data.Aeson.Types.ToJSON..= applicationEntitlementRequestApp obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (applicationEntitlementRequestAttributes obj) : ["name" Data.Aeson.Types.ToJSON..= applicationEntitlementRequestName obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["app" Data.Aeson.Types.ToJSON..= applicationEntitlementRequestApp obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (applicationEntitlementRequestAttributes obj) : ["name" Data.Aeson.Types.ToJSON..= applicationEntitlementRequestName obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON ApplicationEntitlementRequest where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "ApplicationEntitlementRequest" (\obj -> ((GHC.Base.pure ApplicationEntitlementRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "app")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "attributes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name"))

-- | Create a new 'ApplicationEntitlementRequest' with all required fields.
mkApplicationEntitlementRequest ::
  -- | 'applicationEntitlementRequestApp'
  Data.Text.Internal.Text ->
  -- | 'applicationEntitlementRequestName'
  Data.Text.Internal.Text ->
  ApplicationEntitlementRequest
mkApplicationEntitlementRequest applicationEntitlementRequestApp applicationEntitlementRequestName =
  ApplicationEntitlementRequest
    { applicationEntitlementRequestApp = applicationEntitlementRequestApp,
      applicationEntitlementRequestAttributes = GHC.Maybe.Nothing,
      applicationEntitlementRequestName = applicationEntitlementRequestName
    }

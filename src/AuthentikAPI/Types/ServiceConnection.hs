{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema ServiceConnection
module AuthentikAPI.Types.ServiceConnection where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.ServiceConnection@ in the specification.
--
-- ServiceConnection Serializer
data ServiceConnection = ServiceConnection
  { -- | component: Return component used to edit this object
    serviceConnectionComponent :: Data.Text.Internal.Text,
    -- | local: If enabled, use the local connection. Required Docker socket\/Kubernetes Integration
    serviceConnectionLocal :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | meta_model_name: Return internal model name
    serviceConnectionMetaModelName :: Data.Text.Internal.Text,
    -- | name
    serviceConnectionName :: Data.Text.Internal.Text,
    -- | pk
    serviceConnectionPk :: Data.Text.Internal.Text,
    -- | verbose_name: Return object\'s verbose_name
    serviceConnectionVerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    serviceConnectionVerboseNamePlural :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON ServiceConnection where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["component" Data.Aeson.Types.ToJSON..= serviceConnectionComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("local" Data.Aeson.Types.ToJSON..=)) (serviceConnectionLocal obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= serviceConnectionMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= serviceConnectionName obj] : ["pk" Data.Aeson.Types.ToJSON..= serviceConnectionPk obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= serviceConnectionVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= serviceConnectionVerboseNamePlural obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["component" Data.Aeson.Types.ToJSON..= serviceConnectionComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("local" Data.Aeson.Types.ToJSON..=)) (serviceConnectionLocal obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= serviceConnectionMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= serviceConnectionName obj] : ["pk" Data.Aeson.Types.ToJSON..= serviceConnectionPk obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= serviceConnectionVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= serviceConnectionVerboseNamePlural obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON ServiceConnection where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "ServiceConnection" (\obj -> ((((((GHC.Base.pure ServiceConnection GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "local")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural"))

-- | Create a new 'ServiceConnection' with all required fields.
mkServiceConnection ::
  -- | 'serviceConnectionComponent'
  Data.Text.Internal.Text ->
  -- | 'serviceConnectionMetaModelName'
  Data.Text.Internal.Text ->
  -- | 'serviceConnectionName'
  Data.Text.Internal.Text ->
  -- | 'serviceConnectionPk'
  Data.Text.Internal.Text ->
  -- | 'serviceConnectionVerboseName'
  Data.Text.Internal.Text ->
  -- | 'serviceConnectionVerboseNamePlural'
  Data.Text.Internal.Text ->
  ServiceConnection
mkServiceConnection serviceConnectionComponent serviceConnectionMetaModelName serviceConnectionName serviceConnectionPk serviceConnectionVerboseName serviceConnectionVerboseNamePlural =
  ServiceConnection
    { serviceConnectionComponent = serviceConnectionComponent,
      serviceConnectionLocal = GHC.Maybe.Nothing,
      serviceConnectionMetaModelName = serviceConnectionMetaModelName,
      serviceConnectionName = serviceConnectionName,
      serviceConnectionPk = serviceConnectionPk,
      serviceConnectionVerboseName = serviceConnectionVerboseName,
      serviceConnectionVerboseNamePlural = serviceConnectionVerboseNamePlural
    }

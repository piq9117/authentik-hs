{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PasswordChallenge
module AuthentikAPI.Types.PasswordChallenge where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.ContextualFlowInfo
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.PasswordChallenge@ in the specification.
--
-- Password challenge UI fields
data PasswordChallenge = PasswordChallenge
  { -- | allow_show_password
    passwordChallengeAllowShowPassword :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | component
    passwordChallengeComponent :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | flow_info: Contextual flow information for a challenge
    passwordChallengeFlowInfo :: (GHC.Maybe.Maybe ContextualFlowInfo),
    -- | pending_user
    passwordChallengePendingUser :: Data.Text.Internal.Text,
    -- | pending_user_avatar
    passwordChallengePendingUserAvatar :: Data.Text.Internal.Text,
    -- | recovery_url
    passwordChallengeRecoveryUrl :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | response_errors
    passwordChallengeResponseErrors :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PasswordChallenge where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allow_show_password" Data.Aeson.Types.ToJSON..=)) (passwordChallengeAllowShowPassword obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("component" Data.Aeson.Types.ToJSON..=)) (passwordChallengeComponent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_info" Data.Aeson.Types.ToJSON..=)) (passwordChallengeFlowInfo obj) : ["pending_user" Data.Aeson.Types.ToJSON..= passwordChallengePendingUser obj] : ["pending_user_avatar" Data.Aeson.Types.ToJSON..= passwordChallengePendingUserAvatar obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("recovery_url" Data.Aeson.Types.ToJSON..=)) (passwordChallengeRecoveryUrl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("response_errors" Data.Aeson.Types.ToJSON..=)) (passwordChallengeResponseErrors obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allow_show_password" Data.Aeson.Types.ToJSON..=)) (passwordChallengeAllowShowPassword obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("component" Data.Aeson.Types.ToJSON..=)) (passwordChallengeComponent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_info" Data.Aeson.Types.ToJSON..=)) (passwordChallengeFlowInfo obj) : ["pending_user" Data.Aeson.Types.ToJSON..= passwordChallengePendingUser obj] : ["pending_user_avatar" Data.Aeson.Types.ToJSON..= passwordChallengePendingUserAvatar obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("recovery_url" Data.Aeson.Types.ToJSON..=)) (passwordChallengeRecoveryUrl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("response_errors" Data.Aeson.Types.ToJSON..=)) (passwordChallengeResponseErrors obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PasswordChallenge where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PasswordChallenge" (\obj -> ((((((GHC.Base.pure PasswordChallenge GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "allow_show_password")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_info")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pending_user")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pending_user_avatar")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "recovery_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "response_errors"))

-- | Create a new 'PasswordChallenge' with all required fields.
mkPasswordChallenge ::
  -- | 'passwordChallengePendingUser'
  Data.Text.Internal.Text ->
  -- | 'passwordChallengePendingUserAvatar'
  Data.Text.Internal.Text ->
  PasswordChallenge
mkPasswordChallenge passwordChallengePendingUser passwordChallengePendingUserAvatar =
  PasswordChallenge
    { passwordChallengeAllowShowPassword = GHC.Maybe.Nothing,
      passwordChallengeComponent = GHC.Maybe.Nothing,
      passwordChallengeFlowInfo = GHC.Maybe.Nothing,
      passwordChallengePendingUser = passwordChallengePendingUser,
      passwordChallengePendingUserAvatar = passwordChallengePendingUserAvatar,
      passwordChallengeRecoveryUrl = GHC.Maybe.Nothing,
      passwordChallengeResponseErrors = GHC.Maybe.Nothing
    }

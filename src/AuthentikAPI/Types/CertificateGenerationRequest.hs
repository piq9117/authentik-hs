{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema CertificateGenerationRequest
module AuthentikAPI.Types.CertificateGenerationRequest where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.CertificateGenerationRequest@ in the specification.
--
-- Certificate generation parameters
data CertificateGenerationRequest = CertificateGenerationRequest
  { -- | alg
    certificateGenerationRequestAlg :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | common_name
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    certificateGenerationRequestCommonName :: Data.Text.Internal.Text,
    -- | subject_alt_name
    certificateGenerationRequestSubjectAltName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | validity_days
    certificateGenerationRequestValidityDays :: GHC.Types.Int
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON CertificateGenerationRequest where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("alg" Data.Aeson.Types.ToJSON..=)) (certificateGenerationRequestAlg obj) : ["common_name" Data.Aeson.Types.ToJSON..= certificateGenerationRequestCommonName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("subject_alt_name" Data.Aeson.Types.ToJSON..=)) (certificateGenerationRequestSubjectAltName obj) : ["validity_days" Data.Aeson.Types.ToJSON..= certificateGenerationRequestValidityDays obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("alg" Data.Aeson.Types.ToJSON..=)) (certificateGenerationRequestAlg obj) : ["common_name" Data.Aeson.Types.ToJSON..= certificateGenerationRequestCommonName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("subject_alt_name" Data.Aeson.Types.ToJSON..=)) (certificateGenerationRequestSubjectAltName obj) : ["validity_days" Data.Aeson.Types.ToJSON..= certificateGenerationRequestValidityDays obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON CertificateGenerationRequest where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "CertificateGenerationRequest" (\obj -> (((GHC.Base.pure CertificateGenerationRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "alg")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "common_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "subject_alt_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "validity_days"))

-- | Create a new 'CertificateGenerationRequest' with all required fields.
mkCertificateGenerationRequest ::
  -- | 'certificateGenerationRequestCommonName'
  Data.Text.Internal.Text ->
  -- | 'certificateGenerationRequestValidityDays'
  GHC.Types.Int ->
  CertificateGenerationRequest
mkCertificateGenerationRequest certificateGenerationRequestCommonName certificateGenerationRequestValidityDays =
  CertificateGenerationRequest
    { certificateGenerationRequestAlg = GHC.Maybe.Nothing,
      certificateGenerationRequestCommonName = certificateGenerationRequestCommonName,
      certificateGenerationRequestSubjectAltName = GHC.Maybe.Nothing,
      certificateGenerationRequestValidityDays = certificateGenerationRequestValidityDays
    }

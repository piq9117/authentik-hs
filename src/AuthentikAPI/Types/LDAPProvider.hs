{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema LDAPProvider
module AuthentikAPI.Types.LDAPProvider where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.LDAPAPIAccessMode
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.LDAPProvider@ in the specification.
--
-- LDAPProvider Serializer
data LDAPProvider = LDAPProvider
  { -- | assigned_application_name: Application\'s display Name.
    lDAPProviderAssignedApplicationName :: Data.Text.Internal.Text,
    -- | assigned_application_slug: Internal application name, used in URLs.
    lDAPProviderAssignedApplicationSlug :: Data.Text.Internal.Text,
    -- | assigned_backchannel_application_name: Application\'s display Name.
    lDAPProviderAssignedBackchannelApplicationName :: Data.Text.Internal.Text,
    -- | assigned_backchannel_application_slug: Internal application name, used in URLs.
    lDAPProviderAssignedBackchannelApplicationSlug :: Data.Text.Internal.Text,
    -- | authentication_flow: Flow used for authentication when the associated application is accessed by an un-authenticated user.
    lDAPProviderAuthenticationFlow :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | authorization_flow: Flow used when authorizing this provider.
    lDAPProviderAuthorizationFlow :: Data.Text.Internal.Text,
    -- | base_dn: DN under which objects are accessible.
    lDAPProviderBaseDn :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | bind_mode
    lDAPProviderBindMode :: (GHC.Maybe.Maybe LDAPAPIAccessMode),
    -- | certificate
    lDAPProviderCertificate :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | component: Get object component so that we know how to edit the object
    lDAPProviderComponent :: Data.Text.Internal.Text,
    -- | gid_start_number: The start for gidNumbers, this number is added to a number generated from the group.pk to make sure that the numbers aren\'t too low for POSIX groups. Default is 4000 to ensure that we don\'t collide with local groups or users primary groups gidNumber
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of -2.1474836e9
    lDAPProviderGidStartNumber :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | invalidation_flow: Flow used ending the session from a provider.
    lDAPProviderInvalidationFlow :: Data.Text.Internal.Text,
    -- | meta_model_name: Return internal model name
    lDAPProviderMetaModelName :: Data.Text.Internal.Text,
    -- | mfa_support: When enabled, code-based multi-factor authentication can be used by appending a semicolon and the TOTP code to the password. This should only be enabled if all users that will bind to this provider have a TOTP device configured, as otherwise a password may incorrectly be rejected if it contains a semicolon.
    lDAPProviderMfaSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | name
    lDAPProviderName :: Data.Text.Internal.Text,
    -- | outpost_set
    lDAPProviderOutpostSet :: [Data.Text.Internal.Text],
    -- | pk
    lDAPProviderPk :: GHC.Types.Int,
    -- | property_mappings
    lDAPProviderPropertyMappings :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | search_mode
    lDAPProviderSearchMode :: (GHC.Maybe.Maybe LDAPAPIAccessMode),
    -- | tls_server_name
    lDAPProviderTlsServerName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | uid_start_number: The start for uidNumbers, this number is added to the user.pk to make sure that the numbers aren\'t too low for POSIX users. Default is 2000 to ensure that we don\'t collide with local users uidNumber
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of -2.1474836e9
    lDAPProviderUidStartNumber :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | verbose_name: Return object\'s verbose_name
    lDAPProviderVerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    lDAPProviderVerboseNamePlural :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON LDAPProvider where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["assigned_application_name" Data.Aeson.Types.ToJSON..= lDAPProviderAssignedApplicationName obj] : ["assigned_application_slug" Data.Aeson.Types.ToJSON..= lDAPProviderAssignedApplicationSlug obj] : ["assigned_backchannel_application_name" Data.Aeson.Types.ToJSON..= lDAPProviderAssignedBackchannelApplicationName obj] : ["assigned_backchannel_application_slug" Data.Aeson.Types.ToJSON..= lDAPProviderAssignedBackchannelApplicationSlug obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication_flow" Data.Aeson.Types.ToJSON..=)) (lDAPProviderAuthenticationFlow obj) : ["authorization_flow" Data.Aeson.Types.ToJSON..= lDAPProviderAuthorizationFlow obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("base_dn" Data.Aeson.Types.ToJSON..=)) (lDAPProviderBaseDn obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bind_mode" Data.Aeson.Types.ToJSON..=)) (lDAPProviderBindMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("certificate" Data.Aeson.Types.ToJSON..=)) (lDAPProviderCertificate obj) : ["component" Data.Aeson.Types.ToJSON..= lDAPProviderComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gid_start_number" Data.Aeson.Types.ToJSON..=)) (lDAPProviderGidStartNumber obj) : ["invalidation_flow" Data.Aeson.Types.ToJSON..= lDAPProviderInvalidationFlow obj] : ["meta_model_name" Data.Aeson.Types.ToJSON..= lDAPProviderMetaModelName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mfa_support" Data.Aeson.Types.ToJSON..=)) (lDAPProviderMfaSupport obj) : ["name" Data.Aeson.Types.ToJSON..= lDAPProviderName obj] : ["outpost_set" Data.Aeson.Types.ToJSON..= lDAPProviderOutpostSet obj] : ["pk" Data.Aeson.Types.ToJSON..= lDAPProviderPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings" Data.Aeson.Types.ToJSON..=)) (lDAPProviderPropertyMappings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("search_mode" Data.Aeson.Types.ToJSON..=)) (lDAPProviderSearchMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tls_server_name" Data.Aeson.Types.ToJSON..=)) (lDAPProviderTlsServerName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("uid_start_number" Data.Aeson.Types.ToJSON..=)) (lDAPProviderUidStartNumber obj) : ["verbose_name" Data.Aeson.Types.ToJSON..= lDAPProviderVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= lDAPProviderVerboseNamePlural obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["assigned_application_name" Data.Aeson.Types.ToJSON..= lDAPProviderAssignedApplicationName obj] : ["assigned_application_slug" Data.Aeson.Types.ToJSON..= lDAPProviderAssignedApplicationSlug obj] : ["assigned_backchannel_application_name" Data.Aeson.Types.ToJSON..= lDAPProviderAssignedBackchannelApplicationName obj] : ["assigned_backchannel_application_slug" Data.Aeson.Types.ToJSON..= lDAPProviderAssignedBackchannelApplicationSlug obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication_flow" Data.Aeson.Types.ToJSON..=)) (lDAPProviderAuthenticationFlow obj) : ["authorization_flow" Data.Aeson.Types.ToJSON..= lDAPProviderAuthorizationFlow obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("base_dn" Data.Aeson.Types.ToJSON..=)) (lDAPProviderBaseDn obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bind_mode" Data.Aeson.Types.ToJSON..=)) (lDAPProviderBindMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("certificate" Data.Aeson.Types.ToJSON..=)) (lDAPProviderCertificate obj) : ["component" Data.Aeson.Types.ToJSON..= lDAPProviderComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gid_start_number" Data.Aeson.Types.ToJSON..=)) (lDAPProviderGidStartNumber obj) : ["invalidation_flow" Data.Aeson.Types.ToJSON..= lDAPProviderInvalidationFlow obj] : ["meta_model_name" Data.Aeson.Types.ToJSON..= lDAPProviderMetaModelName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mfa_support" Data.Aeson.Types.ToJSON..=)) (lDAPProviderMfaSupport obj) : ["name" Data.Aeson.Types.ToJSON..= lDAPProviderName obj] : ["outpost_set" Data.Aeson.Types.ToJSON..= lDAPProviderOutpostSet obj] : ["pk" Data.Aeson.Types.ToJSON..= lDAPProviderPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings" Data.Aeson.Types.ToJSON..=)) (lDAPProviderPropertyMappings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("search_mode" Data.Aeson.Types.ToJSON..=)) (lDAPProviderSearchMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tls_server_name" Data.Aeson.Types.ToJSON..=)) (lDAPProviderTlsServerName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("uid_start_number" Data.Aeson.Types.ToJSON..=)) (lDAPProviderUidStartNumber obj) : ["verbose_name" Data.Aeson.Types.ToJSON..= lDAPProviderVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= lDAPProviderVerboseNamePlural obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON LDAPProvider where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "LDAPProvider" (\obj -> ((((((((((((((((((((((GHC.Base.pure LDAPProvider GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assigned_application_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assigned_application_slug")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assigned_backchannel_application_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assigned_backchannel_application_slug")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "authentication_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "authorization_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "base_dn")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "bind_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "certificate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "gid_start_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "invalidation_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mfa_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "outpost_set")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "property_mappings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "search_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tls_server_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "uid_start_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural"))

-- | Create a new 'LDAPProvider' with all required fields.
mkLDAPProvider ::
  -- | 'lDAPProviderAssignedApplicationName'
  Data.Text.Internal.Text ->
  -- | 'lDAPProviderAssignedApplicationSlug'
  Data.Text.Internal.Text ->
  -- | 'lDAPProviderAssignedBackchannelApplicationName'
  Data.Text.Internal.Text ->
  -- | 'lDAPProviderAssignedBackchannelApplicationSlug'
  Data.Text.Internal.Text ->
  -- | 'lDAPProviderAuthorizationFlow'
  Data.Text.Internal.Text ->
  -- | 'lDAPProviderComponent'
  Data.Text.Internal.Text ->
  -- | 'lDAPProviderInvalidationFlow'
  Data.Text.Internal.Text ->
  -- | 'lDAPProviderMetaModelName'
  Data.Text.Internal.Text ->
  -- | 'lDAPProviderName'
  Data.Text.Internal.Text ->
  -- | 'lDAPProviderOutpostSet'
  [Data.Text.Internal.Text] ->
  -- | 'lDAPProviderPk'
  GHC.Types.Int ->
  -- | 'lDAPProviderVerboseName'
  Data.Text.Internal.Text ->
  -- | 'lDAPProviderVerboseNamePlural'
  Data.Text.Internal.Text ->
  LDAPProvider
mkLDAPProvider lDAPProviderAssignedApplicationName lDAPProviderAssignedApplicationSlug lDAPProviderAssignedBackchannelApplicationName lDAPProviderAssignedBackchannelApplicationSlug lDAPProviderAuthorizationFlow lDAPProviderComponent lDAPProviderInvalidationFlow lDAPProviderMetaModelName lDAPProviderName lDAPProviderOutpostSet lDAPProviderPk lDAPProviderVerboseName lDAPProviderVerboseNamePlural =
  LDAPProvider
    { lDAPProviderAssignedApplicationName = lDAPProviderAssignedApplicationName,
      lDAPProviderAssignedApplicationSlug = lDAPProviderAssignedApplicationSlug,
      lDAPProviderAssignedBackchannelApplicationName = lDAPProviderAssignedBackchannelApplicationName,
      lDAPProviderAssignedBackchannelApplicationSlug = lDAPProviderAssignedBackchannelApplicationSlug,
      lDAPProviderAuthenticationFlow = GHC.Maybe.Nothing,
      lDAPProviderAuthorizationFlow = lDAPProviderAuthorizationFlow,
      lDAPProviderBaseDn = GHC.Maybe.Nothing,
      lDAPProviderBindMode = GHC.Maybe.Nothing,
      lDAPProviderCertificate = GHC.Maybe.Nothing,
      lDAPProviderComponent = lDAPProviderComponent,
      lDAPProviderGidStartNumber = GHC.Maybe.Nothing,
      lDAPProviderInvalidationFlow = lDAPProviderInvalidationFlow,
      lDAPProviderMetaModelName = lDAPProviderMetaModelName,
      lDAPProviderMfaSupport = GHC.Maybe.Nothing,
      lDAPProviderName = lDAPProviderName,
      lDAPProviderOutpostSet = lDAPProviderOutpostSet,
      lDAPProviderPk = lDAPProviderPk,
      lDAPProviderPropertyMappings = GHC.Maybe.Nothing,
      lDAPProviderSearchMode = GHC.Maybe.Nothing,
      lDAPProviderTlsServerName = GHC.Maybe.Nothing,
      lDAPProviderUidStartNumber = GHC.Maybe.Nothing,
      lDAPProviderVerboseName = lDAPProviderVerboseName,
      lDAPProviderVerboseNamePlural = lDAPProviderVerboseNamePlural
    }

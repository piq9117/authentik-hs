{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema LDAPOutpostConfig
module AuthentikAPI.Types.LDAPOutpostConfig where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.LDAPAPIAccessMode
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.LDAPOutpostConfig@ in the specification.
--
-- LDAPProvider Serializer
data LDAPOutpostConfig = LDAPOutpostConfig
  { -- | application_slug: Prioritise backchannel slug over direct application slug
    lDAPOutpostConfigApplicationSlug :: Data.Text.Internal.Text,
    -- | base_dn: DN under which objects are accessible.
    lDAPOutpostConfigBaseDn :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | bind_flow_slug
    lDAPOutpostConfigBindFlowSlug :: Data.Text.Internal.Text,
    -- | bind_mode
    lDAPOutpostConfigBindMode :: (GHC.Maybe.Maybe LDAPAPIAccessMode),
    -- | certificate
    lDAPOutpostConfigCertificate :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | gid_start_number: The start for gidNumbers, this number is added to a number generated from the group.pk to make sure that the numbers aren\'t too low for POSIX groups. Default is 4000 to ensure that we don\'t collide with local groups or users primary groups gidNumber
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of -2.1474836e9
    lDAPOutpostConfigGidStartNumber :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | mfa_support: When enabled, code-based multi-factor authentication can be used by appending a semicolon and the TOTP code to the password. This should only be enabled if all users that will bind to this provider have a TOTP device configured, as otherwise a password may incorrectly be rejected if it contains a semicolon.
    lDAPOutpostConfigMfaSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | name
    lDAPOutpostConfigName :: Data.Text.Internal.Text,
    -- | pk
    lDAPOutpostConfigPk :: GHC.Types.Int,
    -- | search_mode
    lDAPOutpostConfigSearchMode :: (GHC.Maybe.Maybe LDAPAPIAccessMode),
    -- | tls_server_name
    lDAPOutpostConfigTlsServerName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | uid_start_number: The start for uidNumbers, this number is added to the user.pk to make sure that the numbers aren\'t too low for POSIX users. Default is 2000 to ensure that we don\'t collide with local users uidNumber
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of -2.1474836e9
    lDAPOutpostConfigUidStartNumber :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | unbind_flow_slug: Get slug for unbind flow, defaulting to brand\'s default flow.
    lDAPOutpostConfigUnbindFlowSlug :: (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON LDAPOutpostConfig where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["application_slug" Data.Aeson.Types.ToJSON..= lDAPOutpostConfigApplicationSlug obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("base_dn" Data.Aeson.Types.ToJSON..=)) (lDAPOutpostConfigBaseDn obj) : ["bind_flow_slug" Data.Aeson.Types.ToJSON..= lDAPOutpostConfigBindFlowSlug obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bind_mode" Data.Aeson.Types.ToJSON..=)) (lDAPOutpostConfigBindMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("certificate" Data.Aeson.Types.ToJSON..=)) (lDAPOutpostConfigCertificate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gid_start_number" Data.Aeson.Types.ToJSON..=)) (lDAPOutpostConfigGidStartNumber obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mfa_support" Data.Aeson.Types.ToJSON..=)) (lDAPOutpostConfigMfaSupport obj) : ["name" Data.Aeson.Types.ToJSON..= lDAPOutpostConfigName obj] : ["pk" Data.Aeson.Types.ToJSON..= lDAPOutpostConfigPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("search_mode" Data.Aeson.Types.ToJSON..=)) (lDAPOutpostConfigSearchMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tls_server_name" Data.Aeson.Types.ToJSON..=)) (lDAPOutpostConfigTlsServerName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("uid_start_number" Data.Aeson.Types.ToJSON..=)) (lDAPOutpostConfigUidStartNumber obj) : ["unbind_flow_slug" Data.Aeson.Types.ToJSON..= lDAPOutpostConfigUnbindFlowSlug obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["application_slug" Data.Aeson.Types.ToJSON..= lDAPOutpostConfigApplicationSlug obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("base_dn" Data.Aeson.Types.ToJSON..=)) (lDAPOutpostConfigBaseDn obj) : ["bind_flow_slug" Data.Aeson.Types.ToJSON..= lDAPOutpostConfigBindFlowSlug obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bind_mode" Data.Aeson.Types.ToJSON..=)) (lDAPOutpostConfigBindMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("certificate" Data.Aeson.Types.ToJSON..=)) (lDAPOutpostConfigCertificate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gid_start_number" Data.Aeson.Types.ToJSON..=)) (lDAPOutpostConfigGidStartNumber obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mfa_support" Data.Aeson.Types.ToJSON..=)) (lDAPOutpostConfigMfaSupport obj) : ["name" Data.Aeson.Types.ToJSON..= lDAPOutpostConfigName obj] : ["pk" Data.Aeson.Types.ToJSON..= lDAPOutpostConfigPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("search_mode" Data.Aeson.Types.ToJSON..=)) (lDAPOutpostConfigSearchMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tls_server_name" Data.Aeson.Types.ToJSON..=)) (lDAPOutpostConfigTlsServerName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("uid_start_number" Data.Aeson.Types.ToJSON..=)) (lDAPOutpostConfigUidStartNumber obj) : ["unbind_flow_slug" Data.Aeson.Types.ToJSON..= lDAPOutpostConfigUnbindFlowSlug obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON LDAPOutpostConfig where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "LDAPOutpostConfig" (\obj -> ((((((((((((GHC.Base.pure LDAPOutpostConfig GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "application_slug")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "base_dn")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "bind_flow_slug")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "bind_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "certificate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "gid_start_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mfa_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "search_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tls_server_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "uid_start_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "unbind_flow_slug"))

-- | Create a new 'LDAPOutpostConfig' with all required fields.
mkLDAPOutpostConfig ::
  -- | 'lDAPOutpostConfigApplicationSlug'
  Data.Text.Internal.Text ->
  -- | 'lDAPOutpostConfigBindFlowSlug'
  Data.Text.Internal.Text ->
  -- | 'lDAPOutpostConfigName'
  Data.Text.Internal.Text ->
  -- | 'lDAPOutpostConfigPk'
  GHC.Types.Int ->
  -- | 'lDAPOutpostConfigUnbindFlowSlug'
  AuthentikAPI.Common.Nullable Data.Text.Internal.Text ->
  LDAPOutpostConfig
mkLDAPOutpostConfig lDAPOutpostConfigApplicationSlug lDAPOutpostConfigBindFlowSlug lDAPOutpostConfigName lDAPOutpostConfigPk lDAPOutpostConfigUnbindFlowSlug =
  LDAPOutpostConfig
    { lDAPOutpostConfigApplicationSlug = lDAPOutpostConfigApplicationSlug,
      lDAPOutpostConfigBaseDn = GHC.Maybe.Nothing,
      lDAPOutpostConfigBindFlowSlug = lDAPOutpostConfigBindFlowSlug,
      lDAPOutpostConfigBindMode = GHC.Maybe.Nothing,
      lDAPOutpostConfigCertificate = GHC.Maybe.Nothing,
      lDAPOutpostConfigGidStartNumber = GHC.Maybe.Nothing,
      lDAPOutpostConfigMfaSupport = GHC.Maybe.Nothing,
      lDAPOutpostConfigName = lDAPOutpostConfigName,
      lDAPOutpostConfigPk = lDAPOutpostConfigPk,
      lDAPOutpostConfigSearchMode = GHC.Maybe.Nothing,
      lDAPOutpostConfigTlsServerName = GHC.Maybe.Nothing,
      lDAPOutpostConfigUidStartNumber = GHC.Maybe.Nothing,
      lDAPOutpostConfigUnbindFlowSlug = lDAPOutpostConfigUnbindFlowSlug
    }

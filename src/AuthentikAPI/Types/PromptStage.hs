{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PromptStage
module AuthentikAPI.Types.PromptStage where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.FlowSet
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.PromptStage@ in the specification.
--
-- PromptStage Serializer
data PromptStage = PromptStage
  { -- | component: Get object type so that we know how to edit the object
    promptStageComponent :: Data.Text.Internal.Text,
    -- | fields
    promptStageFields :: [Data.Text.Internal.Text],
    -- | flow_set
    promptStageFlowSet :: (GHC.Maybe.Maybe [FlowSet]),
    -- | meta_model_name: Return internal model name
    promptStageMetaModelName :: Data.Text.Internal.Text,
    -- | name
    promptStageName :: Data.Text.Internal.Text,
    -- | pk
    promptStagePk :: Data.Text.Internal.Text,
    -- | validation_policies
    promptStageValidationPolicies :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | verbose_name: Return object\'s verbose_name
    promptStageVerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    promptStageVerboseNamePlural :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PromptStage where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["component" Data.Aeson.Types.ToJSON..= promptStageComponent obj] : ["fields" Data.Aeson.Types.ToJSON..= promptStageFields obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_set" Data.Aeson.Types.ToJSON..=)) (promptStageFlowSet obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= promptStageMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= promptStageName obj] : ["pk" Data.Aeson.Types.ToJSON..= promptStagePk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("validation_policies" Data.Aeson.Types.ToJSON..=)) (promptStageValidationPolicies obj) : ["verbose_name" Data.Aeson.Types.ToJSON..= promptStageVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= promptStageVerboseNamePlural obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["component" Data.Aeson.Types.ToJSON..= promptStageComponent obj] : ["fields" Data.Aeson.Types.ToJSON..= promptStageFields obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_set" Data.Aeson.Types.ToJSON..=)) (promptStageFlowSet obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= promptStageMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= promptStageName obj] : ["pk" Data.Aeson.Types.ToJSON..= promptStagePk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("validation_policies" Data.Aeson.Types.ToJSON..=)) (promptStageValidationPolicies obj) : ["verbose_name" Data.Aeson.Types.ToJSON..= promptStageVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= promptStageVerboseNamePlural obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PromptStage where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PromptStage" (\obj -> ((((((((GHC.Base.pure PromptStage GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "fields")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_set")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "validation_policies")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural"))

-- | Create a new 'PromptStage' with all required fields.
mkPromptStage ::
  -- | 'promptStageComponent'
  Data.Text.Internal.Text ->
  -- | 'promptStageFields'
  [Data.Text.Internal.Text] ->
  -- | 'promptStageMetaModelName'
  Data.Text.Internal.Text ->
  -- | 'promptStageName'
  Data.Text.Internal.Text ->
  -- | 'promptStagePk'
  Data.Text.Internal.Text ->
  -- | 'promptStageVerboseName'
  Data.Text.Internal.Text ->
  -- | 'promptStageVerboseNamePlural'
  Data.Text.Internal.Text ->
  PromptStage
mkPromptStage promptStageComponent promptStageFields promptStageMetaModelName promptStageName promptStagePk promptStageVerboseName promptStageVerboseNamePlural =
  PromptStage
    { promptStageComponent = promptStageComponent,
      promptStageFields = promptStageFields,
      promptStageFlowSet = GHC.Maybe.Nothing,
      promptStageMetaModelName = promptStageMetaModelName,
      promptStageName = promptStageName,
      promptStagePk = promptStagePk,
      promptStageValidationPolicies = GHC.Maybe.Nothing,
      promptStageVerboseName = promptStageVerboseName,
      promptStageVerboseNamePlural = promptStageVerboseNamePlural
    }

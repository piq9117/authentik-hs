{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema CaptchaStageRequest
module AuthentikAPI.Types.CaptchaStageRequest where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.FlowSetRequest
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.CaptchaStageRequest@ in the specification.
--
-- CaptchaStage Serializer
data CaptchaStageRequest = CaptchaStageRequest
  { -- | api_url
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    captchaStageRequestApiUrl :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | error_on_invalid_score: When enabled and the received captcha score is outside of the given threshold, the stage will show an error message. When not enabled, the flow will continue, but the data from the captcha will be available in the context for policy decisions
    captchaStageRequestErrorOnInvalidScore :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | flow_set
    captchaStageRequestFlowSet :: (GHC.Maybe.Maybe [FlowSetRequest]),
    -- | interactive
    captchaStageRequestInteractive :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | js_url
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    captchaStageRequestJsUrl :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | name
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    captchaStageRequestName :: Data.Text.Internal.Text,
    -- | private_key: Private key, acquired your captcha Provider.
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    captchaStageRequestPrivateKey :: Data.Text.Internal.Text,
    -- | public_key: Public key, acquired your captcha Provider.
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    captchaStageRequestPublicKey :: Data.Text.Internal.Text,
    -- | score_max_threshold
    captchaStageRequestScoreMaxThreshold :: (GHC.Maybe.Maybe GHC.Types.Double),
    -- | score_min_threshold
    captchaStageRequestScoreMinThreshold :: (GHC.Maybe.Maybe GHC.Types.Double)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON CaptchaStageRequest where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("api_url" Data.Aeson.Types.ToJSON..=)) (captchaStageRequestApiUrl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("error_on_invalid_score" Data.Aeson.Types.ToJSON..=)) (captchaStageRequestErrorOnInvalidScore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_set" Data.Aeson.Types.ToJSON..=)) (captchaStageRequestFlowSet obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("interactive" Data.Aeson.Types.ToJSON..=)) (captchaStageRequestInteractive obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("js_url" Data.Aeson.Types.ToJSON..=)) (captchaStageRequestJsUrl obj) : ["name" Data.Aeson.Types.ToJSON..= captchaStageRequestName obj] : ["private_key" Data.Aeson.Types.ToJSON..= captchaStageRequestPrivateKey obj] : ["public_key" Data.Aeson.Types.ToJSON..= captchaStageRequestPublicKey obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("score_max_threshold" Data.Aeson.Types.ToJSON..=)) (captchaStageRequestScoreMaxThreshold obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("score_min_threshold" Data.Aeson.Types.ToJSON..=)) (captchaStageRequestScoreMinThreshold obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("api_url" Data.Aeson.Types.ToJSON..=)) (captchaStageRequestApiUrl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("error_on_invalid_score" Data.Aeson.Types.ToJSON..=)) (captchaStageRequestErrorOnInvalidScore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_set" Data.Aeson.Types.ToJSON..=)) (captchaStageRequestFlowSet obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("interactive" Data.Aeson.Types.ToJSON..=)) (captchaStageRequestInteractive obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("js_url" Data.Aeson.Types.ToJSON..=)) (captchaStageRequestJsUrl obj) : ["name" Data.Aeson.Types.ToJSON..= captchaStageRequestName obj] : ["private_key" Data.Aeson.Types.ToJSON..= captchaStageRequestPrivateKey obj] : ["public_key" Data.Aeson.Types.ToJSON..= captchaStageRequestPublicKey obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("score_max_threshold" Data.Aeson.Types.ToJSON..=)) (captchaStageRequestScoreMaxThreshold obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("score_min_threshold" Data.Aeson.Types.ToJSON..=)) (captchaStageRequestScoreMinThreshold obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON CaptchaStageRequest where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "CaptchaStageRequest" (\obj -> (((((((((GHC.Base.pure CaptchaStageRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "api_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "error_on_invalid_score")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_set")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "interactive")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "js_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "private_key")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "public_key")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "score_max_threshold")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "score_min_threshold"))

-- | Create a new 'CaptchaStageRequest' with all required fields.
mkCaptchaStageRequest ::
  -- | 'captchaStageRequestName'
  Data.Text.Internal.Text ->
  -- | 'captchaStageRequestPrivateKey'
  Data.Text.Internal.Text ->
  -- | 'captchaStageRequestPublicKey'
  Data.Text.Internal.Text ->
  CaptchaStageRequest
mkCaptchaStageRequest captchaStageRequestName captchaStageRequestPrivateKey captchaStageRequestPublicKey =
  CaptchaStageRequest
    { captchaStageRequestApiUrl = GHC.Maybe.Nothing,
      captchaStageRequestErrorOnInvalidScore = GHC.Maybe.Nothing,
      captchaStageRequestFlowSet = GHC.Maybe.Nothing,
      captchaStageRequestInteractive = GHC.Maybe.Nothing,
      captchaStageRequestJsUrl = GHC.Maybe.Nothing,
      captchaStageRequestName = captchaStageRequestName,
      captchaStageRequestPrivateKey = captchaStageRequestPrivateKey,
      captchaStageRequestPublicKey = captchaStageRequestPublicKey,
      captchaStageRequestScoreMaxThreshold = GHC.Maybe.Nothing,
      captchaStageRequestScoreMinThreshold = GHC.Maybe.Nothing
    }

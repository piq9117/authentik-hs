{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema DummyPolicy
module AuthentikAPI.Types.DummyPolicy where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.DummyPolicy@ in the specification.
--
-- Dummy Policy Serializer
data DummyPolicy = DummyPolicy
  { -- | bound_to: Return objects policy is bound to
    dummyPolicyBoundTo :: GHC.Types.Int,
    -- | component: Get object component so that we know how to edit the object
    dummyPolicyComponent :: Data.Text.Internal.Text,
    -- | execution_logging: When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.
    dummyPolicyExecutionLogging :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | meta_model_name: Return internal model name
    dummyPolicyMetaModelName :: Data.Text.Internal.Text,
    -- | name
    dummyPolicyName :: Data.Text.Internal.Text,
    -- | pk
    dummyPolicyPk :: Data.Text.Internal.Text,
    -- | result
    dummyPolicyResult :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | verbose_name: Return object\'s verbose_name
    dummyPolicyVerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    dummyPolicyVerboseNamePlural :: Data.Text.Internal.Text,
    -- | wait_max
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of -2.1474836e9
    dummyPolicyWaitMax :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | wait_min
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of -2.1474836e9
    dummyPolicyWaitMin :: (GHC.Maybe.Maybe GHC.Types.Int)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DummyPolicy where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["bound_to" Data.Aeson.Types.ToJSON..= dummyPolicyBoundTo obj] : ["component" Data.Aeson.Types.ToJSON..= dummyPolicyComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("execution_logging" Data.Aeson.Types.ToJSON..=)) (dummyPolicyExecutionLogging obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= dummyPolicyMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= dummyPolicyName obj] : ["pk" Data.Aeson.Types.ToJSON..= dummyPolicyPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("result" Data.Aeson.Types.ToJSON..=)) (dummyPolicyResult obj) : ["verbose_name" Data.Aeson.Types.ToJSON..= dummyPolicyVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= dummyPolicyVerboseNamePlural obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wait_max" Data.Aeson.Types.ToJSON..=)) (dummyPolicyWaitMax obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wait_min" Data.Aeson.Types.ToJSON..=)) (dummyPolicyWaitMin obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["bound_to" Data.Aeson.Types.ToJSON..= dummyPolicyBoundTo obj] : ["component" Data.Aeson.Types.ToJSON..= dummyPolicyComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("execution_logging" Data.Aeson.Types.ToJSON..=)) (dummyPolicyExecutionLogging obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= dummyPolicyMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= dummyPolicyName obj] : ["pk" Data.Aeson.Types.ToJSON..= dummyPolicyPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("result" Data.Aeson.Types.ToJSON..=)) (dummyPolicyResult obj) : ["verbose_name" Data.Aeson.Types.ToJSON..= dummyPolicyVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= dummyPolicyVerboseNamePlural obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wait_max" Data.Aeson.Types.ToJSON..=)) (dummyPolicyWaitMax obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wait_min" Data.Aeson.Types.ToJSON..=)) (dummyPolicyWaitMin obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON DummyPolicy where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DummyPolicy" (\obj -> ((((((((((GHC.Base.pure DummyPolicy GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "bound_to")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "execution_logging")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "result")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "wait_max")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "wait_min"))

-- | Create a new 'DummyPolicy' with all required fields.
mkDummyPolicy ::
  -- | 'dummyPolicyBoundTo'
  GHC.Types.Int ->
  -- | 'dummyPolicyComponent'
  Data.Text.Internal.Text ->
  -- | 'dummyPolicyMetaModelName'
  Data.Text.Internal.Text ->
  -- | 'dummyPolicyName'
  Data.Text.Internal.Text ->
  -- | 'dummyPolicyPk'
  Data.Text.Internal.Text ->
  -- | 'dummyPolicyVerboseName'
  Data.Text.Internal.Text ->
  -- | 'dummyPolicyVerboseNamePlural'
  Data.Text.Internal.Text ->
  DummyPolicy
mkDummyPolicy dummyPolicyBoundTo dummyPolicyComponent dummyPolicyMetaModelName dummyPolicyName dummyPolicyPk dummyPolicyVerboseName dummyPolicyVerboseNamePlural =
  DummyPolicy
    { dummyPolicyBoundTo = dummyPolicyBoundTo,
      dummyPolicyComponent = dummyPolicyComponent,
      dummyPolicyExecutionLogging = GHC.Maybe.Nothing,
      dummyPolicyMetaModelName = dummyPolicyMetaModelName,
      dummyPolicyName = dummyPolicyName,
      dummyPolicyPk = dummyPolicyPk,
      dummyPolicyResult = GHC.Maybe.Nothing,
      dummyPolicyVerboseName = dummyPolicyVerboseName,
      dummyPolicyVerboseNamePlural = dummyPolicyVerboseNamePlural,
      dummyPolicyWaitMax = GHC.Maybe.Nothing,
      dummyPolicyWaitMin = GHC.Maybe.Nothing
    }

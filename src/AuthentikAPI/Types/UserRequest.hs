{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema UserRequest
module AuthentikAPI.Types.UserRequest where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.UserTypeEnum
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.UserRequest@ in the specification.
--
-- User Serializer
data UserRequest = UserRequest
  { -- | attributes
    userRequestAttributes :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | email
    --
    -- Constraints:
    --
    -- * Maximum length of 254
    userRequestEmail :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | groups
    userRequestGroups :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | is_active: Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
    userRequestIsActive :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | last_login
    userRequestLastLogin :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | name: User\'s display name.
    userRequestName :: Data.Text.Internal.Text,
    -- | path
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    userRequestPath :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | type
    userRequestType :: (GHC.Maybe.Maybe UserTypeEnum),
    -- | username
    --
    -- Constraints:
    --
    -- * Maximum length of 150
    -- * Minimum length of 1
    userRequestUsername :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON UserRequest where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (userRequestAttributes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (userRequestEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("groups" Data.Aeson.Types.ToJSON..=)) (userRequestGroups obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_active" Data.Aeson.Types.ToJSON..=)) (userRequestIsActive obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_login" Data.Aeson.Types.ToJSON..=)) (userRequestLastLogin obj) : ["name" Data.Aeson.Types.ToJSON..= userRequestName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("path" Data.Aeson.Types.ToJSON..=)) (userRequestPath obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (userRequestType obj) : ["username" Data.Aeson.Types.ToJSON..= userRequestUsername obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (userRequestAttributes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (userRequestEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("groups" Data.Aeson.Types.ToJSON..=)) (userRequestGroups obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_active" Data.Aeson.Types.ToJSON..=)) (userRequestIsActive obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_login" Data.Aeson.Types.ToJSON..=)) (userRequestLastLogin obj) : ["name" Data.Aeson.Types.ToJSON..= userRequestName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("path" Data.Aeson.Types.ToJSON..=)) (userRequestPath obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (userRequestType obj) : ["username" Data.Aeson.Types.ToJSON..= userRequestUsername obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON UserRequest where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "UserRequest" (\obj -> ((((((((GHC.Base.pure UserRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "attributes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "groups")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "is_active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "last_login")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "path")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "username"))

-- | Create a new 'UserRequest' with all required fields.
mkUserRequest ::
  -- | 'userRequestName'
  Data.Text.Internal.Text ->
  -- | 'userRequestUsername'
  Data.Text.Internal.Text ->
  UserRequest
mkUserRequest userRequestName userRequestUsername =
  UserRequest
    { userRequestAttributes = GHC.Maybe.Nothing,
      userRequestEmail = GHC.Maybe.Nothing,
      userRequestGroups = GHC.Maybe.Nothing,
      userRequestIsActive = GHC.Maybe.Nothing,
      userRequestLastLogin = GHC.Maybe.Nothing,
      userRequestName = userRequestName,
      userRequestPath = GHC.Maybe.Nothing,
      userRequestType = GHC.Maybe.Nothing,
      userRequestUsername = userRequestUsername
    }

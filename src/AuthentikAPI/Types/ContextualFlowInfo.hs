{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema ContextualFlowInfo
module AuthentikAPI.Types.ContextualFlowInfo where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.ContextualFlowInfoLayoutEnum
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.ContextualFlowInfo@ in the specification.
--
-- Contextual flow information for a challenge
data ContextualFlowInfo = ContextualFlowInfo
  { -- | background
    contextualFlowInfoBackground :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | cancel_url
    contextualFlowInfoCancelUrl :: Data.Text.Internal.Text,
    -- | layout
    contextualFlowInfoLayout :: ContextualFlowInfoLayoutEnum,
    -- | title
    contextualFlowInfoTitle :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON ContextualFlowInfo where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("background" Data.Aeson.Types.ToJSON..=)) (contextualFlowInfoBackground obj) : ["cancel_url" Data.Aeson.Types.ToJSON..= contextualFlowInfoCancelUrl obj] : ["layout" Data.Aeson.Types.ToJSON..= contextualFlowInfoLayout obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("title" Data.Aeson.Types.ToJSON..=)) (contextualFlowInfoTitle obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("background" Data.Aeson.Types.ToJSON..=)) (contextualFlowInfoBackground obj) : ["cancel_url" Data.Aeson.Types.ToJSON..= contextualFlowInfoCancelUrl obj] : ["layout" Data.Aeson.Types.ToJSON..= contextualFlowInfoLayout obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("title" Data.Aeson.Types.ToJSON..=)) (contextualFlowInfoTitle obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON ContextualFlowInfo where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "ContextualFlowInfo" (\obj -> (((GHC.Base.pure ContextualFlowInfo GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "background")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cancel_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "layout")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "title"))

-- | Create a new 'ContextualFlowInfo' with all required fields.
mkContextualFlowInfo ::
  -- | 'contextualFlowInfoCancelUrl'
  Data.Text.Internal.Text ->
  -- | 'contextualFlowInfoLayout'
  ContextualFlowInfoLayoutEnum ->
  ContextualFlowInfo
mkContextualFlowInfo contextualFlowInfoCancelUrl contextualFlowInfoLayout =
  ContextualFlowInfo
    { contextualFlowInfoBackground = GHC.Maybe.Nothing,
      contextualFlowInfoCancelUrl = contextualFlowInfoCancelUrl,
      contextualFlowInfoLayout = contextualFlowInfoLayout,
      contextualFlowInfoTitle = GHC.Maybe.Nothing
    }

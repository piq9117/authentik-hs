{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema AuthenticatorStaticChallenge
module AuthentikAPI.Types.AuthenticatorStaticChallenge where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.ContextualFlowInfo
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.AuthenticatorStaticChallenge@ in the specification.
--
-- Static authenticator challenge
data AuthenticatorStaticChallenge = AuthenticatorStaticChallenge
  { -- | codes
    authenticatorStaticChallengeCodes :: [Data.Text.Internal.Text],
    -- | component
    authenticatorStaticChallengeComponent :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | flow_info: Contextual flow information for a challenge
    authenticatorStaticChallengeFlowInfo :: (GHC.Maybe.Maybe ContextualFlowInfo),
    -- | pending_user
    authenticatorStaticChallengePendingUser :: Data.Text.Internal.Text,
    -- | pending_user_avatar
    authenticatorStaticChallengePendingUserAvatar :: Data.Text.Internal.Text,
    -- | response_errors
    authenticatorStaticChallengeResponseErrors :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON AuthenticatorStaticChallenge where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["codes" Data.Aeson.Types.ToJSON..= authenticatorStaticChallengeCodes obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("component" Data.Aeson.Types.ToJSON..=)) (authenticatorStaticChallengeComponent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_info" Data.Aeson.Types.ToJSON..=)) (authenticatorStaticChallengeFlowInfo obj) : ["pending_user" Data.Aeson.Types.ToJSON..= authenticatorStaticChallengePendingUser obj] : ["pending_user_avatar" Data.Aeson.Types.ToJSON..= authenticatorStaticChallengePendingUserAvatar obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("response_errors" Data.Aeson.Types.ToJSON..=)) (authenticatorStaticChallengeResponseErrors obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["codes" Data.Aeson.Types.ToJSON..= authenticatorStaticChallengeCodes obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("component" Data.Aeson.Types.ToJSON..=)) (authenticatorStaticChallengeComponent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_info" Data.Aeson.Types.ToJSON..=)) (authenticatorStaticChallengeFlowInfo obj) : ["pending_user" Data.Aeson.Types.ToJSON..= authenticatorStaticChallengePendingUser obj] : ["pending_user_avatar" Data.Aeson.Types.ToJSON..= authenticatorStaticChallengePendingUserAvatar obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("response_errors" Data.Aeson.Types.ToJSON..=)) (authenticatorStaticChallengeResponseErrors obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON AuthenticatorStaticChallenge where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "AuthenticatorStaticChallenge" (\obj -> (((((GHC.Base.pure AuthenticatorStaticChallenge GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "codes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_info")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pending_user")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pending_user_avatar")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "response_errors"))

-- | Create a new 'AuthenticatorStaticChallenge' with all required fields.
mkAuthenticatorStaticChallenge ::
  -- | 'authenticatorStaticChallengeCodes'
  [Data.Text.Internal.Text] ->
  -- | 'authenticatorStaticChallengePendingUser'
  Data.Text.Internal.Text ->
  -- | 'authenticatorStaticChallengePendingUserAvatar'
  Data.Text.Internal.Text ->
  AuthenticatorStaticChallenge
mkAuthenticatorStaticChallenge authenticatorStaticChallengeCodes authenticatorStaticChallengePendingUser authenticatorStaticChallengePendingUserAvatar =
  AuthenticatorStaticChallenge
    { authenticatorStaticChallengeCodes = authenticatorStaticChallengeCodes,
      authenticatorStaticChallengeComponent = GHC.Maybe.Nothing,
      authenticatorStaticChallengeFlowInfo = GHC.Maybe.Nothing,
      authenticatorStaticChallengePendingUser = authenticatorStaticChallengePendingUser,
      authenticatorStaticChallengePendingUserAvatar = authenticatorStaticChallengePendingUserAvatar,
      authenticatorStaticChallengeResponseErrors = GHC.Maybe.Nothing
    }

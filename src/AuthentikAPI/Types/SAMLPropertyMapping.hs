{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema SAMLPropertyMapping
module AuthentikAPI.Types.SAMLPropertyMapping where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.SAMLPropertyMapping@ in the specification.
--
-- SAMLPropertyMapping Serializer
data SAMLPropertyMapping = SAMLPropertyMapping
  { -- | component: Get object\'s component so that we know how to edit the object
    sAMLPropertyMappingComponent :: Data.Text.Internal.Text,
    -- | expression
    sAMLPropertyMappingExpression :: Data.Text.Internal.Text,
    -- | friendly_name
    sAMLPropertyMappingFriendlyName :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | managed: Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
    sAMLPropertyMappingManaged :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | meta_model_name: Return internal model name
    sAMLPropertyMappingMetaModelName :: Data.Text.Internal.Text,
    -- | name
    sAMLPropertyMappingName :: Data.Text.Internal.Text,
    -- | pk
    sAMLPropertyMappingPk :: Data.Text.Internal.Text,
    -- | saml_name
    sAMLPropertyMappingSamlName :: Data.Text.Internal.Text,
    -- | verbose_name: Return object\'s verbose_name
    sAMLPropertyMappingVerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    sAMLPropertyMappingVerboseNamePlural :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SAMLPropertyMapping where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["component" Data.Aeson.Types.ToJSON..= sAMLPropertyMappingComponent obj] : ["expression" Data.Aeson.Types.ToJSON..= sAMLPropertyMappingExpression obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("friendly_name" Data.Aeson.Types.ToJSON..=)) (sAMLPropertyMappingFriendlyName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("managed" Data.Aeson.Types.ToJSON..=)) (sAMLPropertyMappingManaged obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= sAMLPropertyMappingMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= sAMLPropertyMappingName obj] : ["pk" Data.Aeson.Types.ToJSON..= sAMLPropertyMappingPk obj] : ["saml_name" Data.Aeson.Types.ToJSON..= sAMLPropertyMappingSamlName obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= sAMLPropertyMappingVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= sAMLPropertyMappingVerboseNamePlural obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["component" Data.Aeson.Types.ToJSON..= sAMLPropertyMappingComponent obj] : ["expression" Data.Aeson.Types.ToJSON..= sAMLPropertyMappingExpression obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("friendly_name" Data.Aeson.Types.ToJSON..=)) (sAMLPropertyMappingFriendlyName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("managed" Data.Aeson.Types.ToJSON..=)) (sAMLPropertyMappingManaged obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= sAMLPropertyMappingMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= sAMLPropertyMappingName obj] : ["pk" Data.Aeson.Types.ToJSON..= sAMLPropertyMappingPk obj] : ["saml_name" Data.Aeson.Types.ToJSON..= sAMLPropertyMappingSamlName obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= sAMLPropertyMappingVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= sAMLPropertyMappingVerboseNamePlural obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SAMLPropertyMapping where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SAMLPropertyMapping" (\obj -> (((((((((GHC.Base.pure SAMLPropertyMapping GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "expression")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "friendly_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "managed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "saml_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural"))

-- | Create a new 'SAMLPropertyMapping' with all required fields.
mkSAMLPropertyMapping ::
  -- | 'sAMLPropertyMappingComponent'
  Data.Text.Internal.Text ->
  -- | 'sAMLPropertyMappingExpression'
  Data.Text.Internal.Text ->
  -- | 'sAMLPropertyMappingMetaModelName'
  Data.Text.Internal.Text ->
  -- | 'sAMLPropertyMappingName'
  Data.Text.Internal.Text ->
  -- | 'sAMLPropertyMappingPk'
  Data.Text.Internal.Text ->
  -- | 'sAMLPropertyMappingSamlName'
  Data.Text.Internal.Text ->
  -- | 'sAMLPropertyMappingVerboseName'
  Data.Text.Internal.Text ->
  -- | 'sAMLPropertyMappingVerboseNamePlural'
  Data.Text.Internal.Text ->
  SAMLPropertyMapping
mkSAMLPropertyMapping sAMLPropertyMappingComponent sAMLPropertyMappingExpression sAMLPropertyMappingMetaModelName sAMLPropertyMappingName sAMLPropertyMappingPk sAMLPropertyMappingSamlName sAMLPropertyMappingVerboseName sAMLPropertyMappingVerboseNamePlural =
  SAMLPropertyMapping
    { sAMLPropertyMappingComponent = sAMLPropertyMappingComponent,
      sAMLPropertyMappingExpression = sAMLPropertyMappingExpression,
      sAMLPropertyMappingFriendlyName = GHC.Maybe.Nothing,
      sAMLPropertyMappingManaged = GHC.Maybe.Nothing,
      sAMLPropertyMappingMetaModelName = sAMLPropertyMappingMetaModelName,
      sAMLPropertyMappingName = sAMLPropertyMappingName,
      sAMLPropertyMappingPk = sAMLPropertyMappingPk,
      sAMLPropertyMappingSamlName = sAMLPropertyMappingSamlName,
      sAMLPropertyMappingVerboseName = sAMLPropertyMappingVerboseName,
      sAMLPropertyMappingVerboseNamePlural = sAMLPropertyMappingVerboseNamePlural
    }

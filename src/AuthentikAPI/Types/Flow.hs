{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Flow
module AuthentikAPI.Types.Flow where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.FlowLayoutEnum
import {-# SOURCE #-} AuthentikAPI.Types.PolicyEngineMode
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.Flow@ in the specification.
--
-- Flow Serializer
data Flow = Flow
  { -- | authentication: Required level of authentication and authorization to access a flow.
    flowAuthentication :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | background: Get the URL to the background image. If the name is \/static or starts with http
    -- it is returned as-is
    flowBackground :: Data.Text.Internal.Text,
    -- | cache_count: Get count of cached flows
    flowCacheCount :: GHC.Types.Int,
    -- | compatibility_mode: Enable compatibility mode, increases compatibility with password managers on mobile devices.
    flowCompatibilityMode :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | denied_action: Configure what should happen when a flow denies access to a user.
    flowDeniedAction :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | designation: Decides what this Flow is used for. For example, the Authentication flow is redirect to when an un-authenticated user visits authentik.
    flowDesignation :: Data.Aeson.Types.Internal.Object,
    -- | export_url: Get export URL for flow
    flowExportUrl :: Data.Text.Internal.Text,
    -- | layout
    flowLayout :: (GHC.Maybe.Maybe FlowLayoutEnum),
    -- | name
    flowName :: Data.Text.Internal.Text,
    -- | pk
    flowPk :: Data.Text.Internal.Text,
    -- | policies
    flowPolicies :: [Data.Text.Internal.Text],
    -- | policy_engine_mode
    flowPolicyEngineMode :: (GHC.Maybe.Maybe PolicyEngineMode),
    -- | policybindingmodel_ptr_id
    flowPolicybindingmodelPtrId :: Data.Text.Internal.Text,
    -- | slug: Visible in the URL.
    --
    -- Constraints:
    --
    -- * Maximum length of 50
    -- * Must match pattern \'^[-a-zA-Z0-9_]+\$\'
    flowSlug :: Data.Text.Internal.Text,
    -- | stages
    flowStages :: [Data.Text.Internal.Text],
    -- | title: Shown as the Title in Flow pages.
    flowTitle :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Flow where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication" Data.Aeson.Types.ToJSON..=)) (flowAuthentication obj) : ["background" Data.Aeson.Types.ToJSON..= flowBackground obj] : ["cache_count" Data.Aeson.Types.ToJSON..= flowCacheCount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("compatibility_mode" Data.Aeson.Types.ToJSON..=)) (flowCompatibilityMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("denied_action" Data.Aeson.Types.ToJSON..=)) (flowDeniedAction obj) : ["designation" Data.Aeson.Types.ToJSON..= flowDesignation obj] : ["export_url" Data.Aeson.Types.ToJSON..= flowExportUrl obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("layout" Data.Aeson.Types.ToJSON..=)) (flowLayout obj) : ["name" Data.Aeson.Types.ToJSON..= flowName obj] : ["pk" Data.Aeson.Types.ToJSON..= flowPk obj] : ["policies" Data.Aeson.Types.ToJSON..= flowPolicies obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("policy_engine_mode" Data.Aeson.Types.ToJSON..=)) (flowPolicyEngineMode obj) : ["policybindingmodel_ptr_id" Data.Aeson.Types.ToJSON..= flowPolicybindingmodelPtrId obj] : ["slug" Data.Aeson.Types.ToJSON..= flowSlug obj] : ["stages" Data.Aeson.Types.ToJSON..= flowStages obj] : ["title" Data.Aeson.Types.ToJSON..= flowTitle obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication" Data.Aeson.Types.ToJSON..=)) (flowAuthentication obj) : ["background" Data.Aeson.Types.ToJSON..= flowBackground obj] : ["cache_count" Data.Aeson.Types.ToJSON..= flowCacheCount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("compatibility_mode" Data.Aeson.Types.ToJSON..=)) (flowCompatibilityMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("denied_action" Data.Aeson.Types.ToJSON..=)) (flowDeniedAction obj) : ["designation" Data.Aeson.Types.ToJSON..= flowDesignation obj] : ["export_url" Data.Aeson.Types.ToJSON..= flowExportUrl obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("layout" Data.Aeson.Types.ToJSON..=)) (flowLayout obj) : ["name" Data.Aeson.Types.ToJSON..= flowName obj] : ["pk" Data.Aeson.Types.ToJSON..= flowPk obj] : ["policies" Data.Aeson.Types.ToJSON..= flowPolicies obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("policy_engine_mode" Data.Aeson.Types.ToJSON..=)) (flowPolicyEngineMode obj) : ["policybindingmodel_ptr_id" Data.Aeson.Types.ToJSON..= flowPolicybindingmodelPtrId obj] : ["slug" Data.Aeson.Types.ToJSON..= flowSlug obj] : ["stages" Data.Aeson.Types.ToJSON..= flowStages obj] : ["title" Data.Aeson.Types.ToJSON..= flowTitle obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Flow where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Flow" (\obj -> (((((((((((((((GHC.Base.pure Flow GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "authentication")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "background")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cache_count")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "compatibility_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "denied_action")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "designation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "export_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "layout")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "policies")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "policy_engine_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "policybindingmodel_ptr_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "slug")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "stages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "title"))

-- | Create a new 'Flow' with all required fields.
mkFlow ::
  -- | 'flowBackground'
  Data.Text.Internal.Text ->
  -- | 'flowCacheCount'
  GHC.Types.Int ->
  -- | 'flowDesignation'
  Data.Aeson.Types.Internal.Object ->
  -- | 'flowExportUrl'
  Data.Text.Internal.Text ->
  -- | 'flowName'
  Data.Text.Internal.Text ->
  -- | 'flowPk'
  Data.Text.Internal.Text ->
  -- | 'flowPolicies'
  [Data.Text.Internal.Text] ->
  -- | 'flowPolicybindingmodelPtrId'
  Data.Text.Internal.Text ->
  -- | 'flowSlug'
  Data.Text.Internal.Text ->
  -- | 'flowStages'
  [Data.Text.Internal.Text] ->
  -- | 'flowTitle'
  Data.Text.Internal.Text ->
  Flow
mkFlow flowBackground flowCacheCount flowDesignation flowExportUrl flowName flowPk flowPolicies flowPolicybindingmodelPtrId flowSlug flowStages flowTitle =
  Flow
    { flowAuthentication = GHC.Maybe.Nothing,
      flowBackground = flowBackground,
      flowCacheCount = flowCacheCount,
      flowCompatibilityMode = GHC.Maybe.Nothing,
      flowDeniedAction = GHC.Maybe.Nothing,
      flowDesignation = flowDesignation,
      flowExportUrl = flowExportUrl,
      flowLayout = GHC.Maybe.Nothing,
      flowName = flowName,
      flowPk = flowPk,
      flowPolicies = flowPolicies,
      flowPolicyEngineMode = GHC.Maybe.Nothing,
      flowPolicybindingmodelPtrId = flowPolicybindingmodelPtrId,
      flowSlug = flowSlug,
      flowStages = flowStages,
      flowTitle = flowTitle
    }

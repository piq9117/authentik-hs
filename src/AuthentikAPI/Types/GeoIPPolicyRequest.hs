{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema GeoIPPolicyRequest
module AuthentikAPI.Types.GeoIPPolicyRequest where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.CountryCodeEnum
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.GeoIPPolicyRequest@ in the specification.
--
-- GeoIP Policy Serializer
data GeoIPPolicyRequest = GeoIPPolicyRequest
  { -- | asns
    geoIPPolicyRequestAsns :: (GHC.Maybe.Maybe [GHC.Types.Int]),
    -- | check_history_distance
    geoIPPolicyRequestCheckHistoryDistance :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | check_impossible_travel
    geoIPPolicyRequestCheckImpossibleTravel :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | countries
    --
    -- Constraints:
    --
    -- * Must have a maximum of 249 items
    geoIPPolicyRequestCountries :: [CountryCodeEnum],
    -- | distance_tolerance_km
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of 0.0
    geoIPPolicyRequestDistanceToleranceKm :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | execution_logging: When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.
    geoIPPolicyRequestExecutionLogging :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | history_login_count
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of 0.0
    geoIPPolicyRequestHistoryLoginCount :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | history_max_distance_km
    --
    -- Constraints:
    --
    -- * Maxium  of 9.223372e18
    -- * Minimum  of 0.0
    geoIPPolicyRequestHistoryMaxDistanceKm :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | impossible_tolerance_km
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of 0.0
    geoIPPolicyRequestImpossibleToleranceKm :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | name
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    geoIPPolicyRequestName :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GeoIPPolicyRequest where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("asns" Data.Aeson.Types.ToJSON..=)) (geoIPPolicyRequestAsns obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("check_history_distance" Data.Aeson.Types.ToJSON..=)) (geoIPPolicyRequestCheckHistoryDistance obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("check_impossible_travel" Data.Aeson.Types.ToJSON..=)) (geoIPPolicyRequestCheckImpossibleTravel obj) : ["countries" Data.Aeson.Types.ToJSON..= geoIPPolicyRequestCountries obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("distance_tolerance_km" Data.Aeson.Types.ToJSON..=)) (geoIPPolicyRequestDistanceToleranceKm obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("execution_logging" Data.Aeson.Types.ToJSON..=)) (geoIPPolicyRequestExecutionLogging obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("history_login_count" Data.Aeson.Types.ToJSON..=)) (geoIPPolicyRequestHistoryLoginCount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("history_max_distance_km" Data.Aeson.Types.ToJSON..=)) (geoIPPolicyRequestHistoryMaxDistanceKm obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("impossible_tolerance_km" Data.Aeson.Types.ToJSON..=)) (geoIPPolicyRequestImpossibleToleranceKm obj) : ["name" Data.Aeson.Types.ToJSON..= geoIPPolicyRequestName obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("asns" Data.Aeson.Types.ToJSON..=)) (geoIPPolicyRequestAsns obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("check_history_distance" Data.Aeson.Types.ToJSON..=)) (geoIPPolicyRequestCheckHistoryDistance obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("check_impossible_travel" Data.Aeson.Types.ToJSON..=)) (geoIPPolicyRequestCheckImpossibleTravel obj) : ["countries" Data.Aeson.Types.ToJSON..= geoIPPolicyRequestCountries obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("distance_tolerance_km" Data.Aeson.Types.ToJSON..=)) (geoIPPolicyRequestDistanceToleranceKm obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("execution_logging" Data.Aeson.Types.ToJSON..=)) (geoIPPolicyRequestExecutionLogging obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("history_login_count" Data.Aeson.Types.ToJSON..=)) (geoIPPolicyRequestHistoryLoginCount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("history_max_distance_km" Data.Aeson.Types.ToJSON..=)) (geoIPPolicyRequestHistoryMaxDistanceKm obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("impossible_tolerance_km" Data.Aeson.Types.ToJSON..=)) (geoIPPolicyRequestImpossibleToleranceKm obj) : ["name" Data.Aeson.Types.ToJSON..= geoIPPolicyRequestName obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GeoIPPolicyRequest where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GeoIPPolicyRequest" (\obj -> (((((((((GHC.Base.pure GeoIPPolicyRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "asns")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "check_history_distance")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "check_impossible_travel")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "countries")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "distance_tolerance_km")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "execution_logging")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "history_login_count")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "history_max_distance_km")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "impossible_tolerance_km")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name"))

-- | Create a new 'GeoIPPolicyRequest' with all required fields.
mkGeoIPPolicyRequest ::
  -- | 'geoIPPolicyRequestCountries'
  [CountryCodeEnum] ->
  -- | 'geoIPPolicyRequestName'
  Data.Text.Internal.Text ->
  GeoIPPolicyRequest
mkGeoIPPolicyRequest geoIPPolicyRequestCountries geoIPPolicyRequestName =
  GeoIPPolicyRequest
    { geoIPPolicyRequestAsns = GHC.Maybe.Nothing,
      geoIPPolicyRequestCheckHistoryDistance = GHC.Maybe.Nothing,
      geoIPPolicyRequestCheckImpossibleTravel = GHC.Maybe.Nothing,
      geoIPPolicyRequestCountries = geoIPPolicyRequestCountries,
      geoIPPolicyRequestDistanceToleranceKm = GHC.Maybe.Nothing,
      geoIPPolicyRequestExecutionLogging = GHC.Maybe.Nothing,
      geoIPPolicyRequestHistoryLoginCount = GHC.Maybe.Nothing,
      geoIPPolicyRequestHistoryMaxDistanceKm = GHC.Maybe.Nothing,
      geoIPPolicyRequestImpossibleToleranceKm = GHC.Maybe.Nothing,
      geoIPPolicyRequestName = geoIPPolicyRequestName
    }

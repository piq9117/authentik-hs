{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema SCIMProviderGroup
module AuthentikAPI.Types.SCIMProviderGroup where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.UserGroup
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.SCIMProviderGroup@ in the specification.
--
-- SCIMProviderGroup Serializer
data SCIMProviderGroup = SCIMProviderGroup
  { -- | attributes
    sCIMProviderGroupAttributes :: Data.Aeson.Types.Internal.Object,
    -- | group
    sCIMProviderGroupGroup :: Data.Text.Internal.Text,
    -- | group_obj
    sCIMProviderGroupGroupObj :: SCIMProviderGroupGroupObj',
    -- | id
    sCIMProviderGroupId :: Data.Text.Internal.Text,
    -- | provider
    sCIMProviderGroupProvider :: GHC.Types.Int,
    -- | scim_id
    sCIMProviderGroupScimId :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SCIMProviderGroup where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["attributes" Data.Aeson.Types.ToJSON..= sCIMProviderGroupAttributes obj] : ["group" Data.Aeson.Types.ToJSON..= sCIMProviderGroupGroup obj] : ["group_obj" Data.Aeson.Types.ToJSON..= sCIMProviderGroupGroupObj obj] : ["id" Data.Aeson.Types.ToJSON..= sCIMProviderGroupId obj] : ["provider" Data.Aeson.Types.ToJSON..= sCIMProviderGroupProvider obj] : ["scim_id" Data.Aeson.Types.ToJSON..= sCIMProviderGroupScimId obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["attributes" Data.Aeson.Types.ToJSON..= sCIMProviderGroupAttributes obj] : ["group" Data.Aeson.Types.ToJSON..= sCIMProviderGroupGroup obj] : ["group_obj" Data.Aeson.Types.ToJSON..= sCIMProviderGroupGroupObj obj] : ["id" Data.Aeson.Types.ToJSON..= sCIMProviderGroupId obj] : ["provider" Data.Aeson.Types.ToJSON..= sCIMProviderGroupProvider obj] : ["scim_id" Data.Aeson.Types.ToJSON..= sCIMProviderGroupScimId obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SCIMProviderGroup where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SCIMProviderGroup" (\obj -> (((((GHC.Base.pure SCIMProviderGroup GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "attributes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "group")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "group_obj")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "provider")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "scim_id"))

-- | Create a new 'SCIMProviderGroup' with all required fields.
mkSCIMProviderGroup ::
  -- | 'sCIMProviderGroupAttributes'
  Data.Aeson.Types.Internal.Object ->
  -- | 'sCIMProviderGroupGroup'
  Data.Text.Internal.Text ->
  -- | 'sCIMProviderGroupGroupObj'
  SCIMProviderGroupGroupObj' ->
  -- | 'sCIMProviderGroupId'
  Data.Text.Internal.Text ->
  -- | 'sCIMProviderGroupProvider'
  GHC.Types.Int ->
  -- | 'sCIMProviderGroupScimId'
  Data.Text.Internal.Text ->
  SCIMProviderGroup
mkSCIMProviderGroup sCIMProviderGroupAttributes sCIMProviderGroupGroup sCIMProviderGroupGroupObj sCIMProviderGroupId sCIMProviderGroupProvider sCIMProviderGroupScimId =
  SCIMProviderGroup
    { sCIMProviderGroupAttributes = sCIMProviderGroupAttributes,
      sCIMProviderGroupGroup = sCIMProviderGroupGroup,
      sCIMProviderGroupGroupObj = sCIMProviderGroupGroupObj,
      sCIMProviderGroupId = sCIMProviderGroupId,
      sCIMProviderGroupProvider = sCIMProviderGroupProvider,
      sCIMProviderGroupScimId = sCIMProviderGroupScimId
    }

-- | Defines the object schema located at @components.schemas.SCIMProviderGroup.properties.group_obj.allOf@ in the specification.
data SCIMProviderGroupGroupObj' = SCIMProviderGroupGroupObj'
  { -- | attributes
    sCIMProviderGroupGroupObj'Attributes :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | is_superuser: Users added to this group will be superusers.
    sCIMProviderGroupGroupObj'IsSuperuser :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | name
    sCIMProviderGroupGroupObj'Name :: Data.Text.Internal.Text,
    -- | num_pk: Get a numerical, int32 ID for the group
    sCIMProviderGroupGroupObj'NumPk :: GHC.Types.Int,
    -- | parent
    sCIMProviderGroupGroupObj'Parent :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | parent_name
    sCIMProviderGroupGroupObj'ParentName :: (AuthentikAPI.Common.Nullable Data.Text.Internal.Text),
    -- | pk
    sCIMProviderGroupGroupObj'Pk :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SCIMProviderGroupGroupObj' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (sCIMProviderGroupGroupObj'Attributes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_superuser" Data.Aeson.Types.ToJSON..=)) (sCIMProviderGroupGroupObj'IsSuperuser obj) : ["name" Data.Aeson.Types.ToJSON..= sCIMProviderGroupGroupObj'Name obj] : ["num_pk" Data.Aeson.Types.ToJSON..= sCIMProviderGroupGroupObj'NumPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("parent" Data.Aeson.Types.ToJSON..=)) (sCIMProviderGroupGroupObj'Parent obj) : ["parent_name" Data.Aeson.Types.ToJSON..= sCIMProviderGroupGroupObj'ParentName obj] : ["pk" Data.Aeson.Types.ToJSON..= sCIMProviderGroupGroupObj'Pk obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (sCIMProviderGroupGroupObj'Attributes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_superuser" Data.Aeson.Types.ToJSON..=)) (sCIMProviderGroupGroupObj'IsSuperuser obj) : ["name" Data.Aeson.Types.ToJSON..= sCIMProviderGroupGroupObj'Name obj] : ["num_pk" Data.Aeson.Types.ToJSON..= sCIMProviderGroupGroupObj'NumPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("parent" Data.Aeson.Types.ToJSON..=)) (sCIMProviderGroupGroupObj'Parent obj) : ["parent_name" Data.Aeson.Types.ToJSON..= sCIMProviderGroupGroupObj'ParentName obj] : ["pk" Data.Aeson.Types.ToJSON..= sCIMProviderGroupGroupObj'Pk obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SCIMProviderGroupGroupObj' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SCIMProviderGroupGroupObj'" (\obj -> ((((((GHC.Base.pure SCIMProviderGroupGroupObj' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "attributes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "is_superuser")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "num_pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "parent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "parent_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk"))

-- | Create a new 'SCIMProviderGroupGroupObj'' with all required fields.
mkSCIMProviderGroupGroupObj' ::
  -- | 'sCIMProviderGroupGroupObj'Name'
  Data.Text.Internal.Text ->
  -- | 'sCIMProviderGroupGroupObj'NumPk'
  GHC.Types.Int ->
  -- | 'sCIMProviderGroupGroupObj'ParentName'
  AuthentikAPI.Common.Nullable Data.Text.Internal.Text ->
  -- | 'sCIMProviderGroupGroupObj'Pk'
  Data.Text.Internal.Text ->
  SCIMProviderGroupGroupObj'
mkSCIMProviderGroupGroupObj' sCIMProviderGroupGroupObj'Name sCIMProviderGroupGroupObj'NumPk sCIMProviderGroupGroupObj'ParentName sCIMProviderGroupGroupObj'Pk =
  SCIMProviderGroupGroupObj'
    { sCIMProviderGroupGroupObj'Attributes = GHC.Maybe.Nothing,
      sCIMProviderGroupGroupObj'IsSuperuser = GHC.Maybe.Nothing,
      sCIMProviderGroupGroupObj'Name = sCIMProviderGroupGroupObj'Name,
      sCIMProviderGroupGroupObj'NumPk = sCIMProviderGroupGroupObj'NumPk,
      sCIMProviderGroupGroupObj'Parent = GHC.Maybe.Nothing,
      sCIMProviderGroupGroupObj'ParentName = sCIMProviderGroupGroupObj'ParentName,
      sCIMProviderGroupGroupObj'Pk = sCIMProviderGroupGroupObj'Pk
    }

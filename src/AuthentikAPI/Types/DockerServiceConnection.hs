{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema DockerServiceConnection
module AuthentikAPI.Types.DockerServiceConnection where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.DockerServiceConnection@ in the specification.
--
-- DockerServiceConnection Serializer
data DockerServiceConnection = DockerServiceConnection
  { -- | component
    dockerServiceConnectionComponent :: Data.Text.Internal.Text,
    -- | local: If enabled, use the local connection. Required Docker socket\/Kubernetes Integration
    dockerServiceConnectionLocal :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | meta_model_name: Return internal model name
    dockerServiceConnectionMetaModelName :: Data.Text.Internal.Text,
    -- | name
    dockerServiceConnectionName :: Data.Text.Internal.Text,
    -- | pk
    dockerServiceConnectionPk :: Data.Text.Internal.Text,
    -- | tls_authentication: Certificate\/Key used for authentication. Can be left empty for no authentication.
    dockerServiceConnectionTlsAuthentication :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | tls_verification: CA which the endpoint\'s Certificate is verified against. Can be left empty for no validation.
    dockerServiceConnectionTlsVerification :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | url: Can be in the format of \'unix:\/\/\<path>\' when connecting to a local docker daemon, or \'https:\/\/\<hostname>:2376\' when connecting to a remote system.
    dockerServiceConnectionUrl :: Data.Text.Internal.Text,
    -- | verbose_name: Return object\'s verbose_name
    dockerServiceConnectionVerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    dockerServiceConnectionVerboseNamePlural :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DockerServiceConnection where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["component" Data.Aeson.Types.ToJSON..= dockerServiceConnectionComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("local" Data.Aeson.Types.ToJSON..=)) (dockerServiceConnectionLocal obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= dockerServiceConnectionMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= dockerServiceConnectionName obj] : ["pk" Data.Aeson.Types.ToJSON..= dockerServiceConnectionPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tls_authentication" Data.Aeson.Types.ToJSON..=)) (dockerServiceConnectionTlsAuthentication obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tls_verification" Data.Aeson.Types.ToJSON..=)) (dockerServiceConnectionTlsVerification obj) : ["url" Data.Aeson.Types.ToJSON..= dockerServiceConnectionUrl obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= dockerServiceConnectionVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= dockerServiceConnectionVerboseNamePlural obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["component" Data.Aeson.Types.ToJSON..= dockerServiceConnectionComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("local" Data.Aeson.Types.ToJSON..=)) (dockerServiceConnectionLocal obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= dockerServiceConnectionMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= dockerServiceConnectionName obj] : ["pk" Data.Aeson.Types.ToJSON..= dockerServiceConnectionPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tls_authentication" Data.Aeson.Types.ToJSON..=)) (dockerServiceConnectionTlsAuthentication obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tls_verification" Data.Aeson.Types.ToJSON..=)) (dockerServiceConnectionTlsVerification obj) : ["url" Data.Aeson.Types.ToJSON..= dockerServiceConnectionUrl obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= dockerServiceConnectionVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= dockerServiceConnectionVerboseNamePlural obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON DockerServiceConnection where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DockerServiceConnection" (\obj -> (((((((((GHC.Base.pure DockerServiceConnection GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "local")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tls_authentication")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tls_verification")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural"))

-- | Create a new 'DockerServiceConnection' with all required fields.
mkDockerServiceConnection ::
  -- | 'dockerServiceConnectionComponent'
  Data.Text.Internal.Text ->
  -- | 'dockerServiceConnectionMetaModelName'
  Data.Text.Internal.Text ->
  -- | 'dockerServiceConnectionName'
  Data.Text.Internal.Text ->
  -- | 'dockerServiceConnectionPk'
  Data.Text.Internal.Text ->
  -- | 'dockerServiceConnectionUrl'
  Data.Text.Internal.Text ->
  -- | 'dockerServiceConnectionVerboseName'
  Data.Text.Internal.Text ->
  -- | 'dockerServiceConnectionVerboseNamePlural'
  Data.Text.Internal.Text ->
  DockerServiceConnection
mkDockerServiceConnection dockerServiceConnectionComponent dockerServiceConnectionMetaModelName dockerServiceConnectionName dockerServiceConnectionPk dockerServiceConnectionUrl dockerServiceConnectionVerboseName dockerServiceConnectionVerboseNamePlural =
  DockerServiceConnection
    { dockerServiceConnectionComponent = dockerServiceConnectionComponent,
      dockerServiceConnectionLocal = GHC.Maybe.Nothing,
      dockerServiceConnectionMetaModelName = dockerServiceConnectionMetaModelName,
      dockerServiceConnectionName = dockerServiceConnectionName,
      dockerServiceConnectionPk = dockerServiceConnectionPk,
      dockerServiceConnectionTlsAuthentication = GHC.Maybe.Nothing,
      dockerServiceConnectionTlsVerification = GHC.Maybe.Nothing,
      dockerServiceConnectionUrl = dockerServiceConnectionUrl,
      dockerServiceConnectionVerboseName = dockerServiceConnectionVerboseName,
      dockerServiceConnectionVerboseNamePlural = dockerServiceConnectionVerboseNamePlural
    }

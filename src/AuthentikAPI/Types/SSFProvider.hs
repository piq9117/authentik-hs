{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema SSFProvider
module AuthentikAPI.Types.SSFProvider where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.IntentEnum
import {-# SOURCE #-} AuthentikAPI.Types.Token
import {-# SOURCE #-} AuthentikAPI.Types.User
import {-# SOURCE #-} AuthentikAPI.Types.UserGroup
import {-# SOURCE #-} AuthentikAPI.Types.UserTypeEnum
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.SSFProvider@ in the specification.
--
-- SSFProvider Serializer
data SSFProvider = SSFProvider
  { -- | component: Get object component so that we know how to edit the object
    sSFProviderComponent :: Data.Text.Internal.Text,
    -- | event_retention
    sSFProviderEventRetention :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | meta_model_name: Return internal model name
    sSFProviderMetaModelName :: Data.Text.Internal.Text,
    -- | name
    sSFProviderName :: Data.Text.Internal.Text,
    -- | oidc_auth_providers
    sSFProviderOidcAuthProviders :: (GHC.Maybe.Maybe [GHC.Types.Int]),
    -- | pk
    sSFProviderPk :: GHC.Types.Int,
    -- | signing_key: Key used to sign the SSF Events.
    sSFProviderSigningKey :: Data.Text.Internal.Text,
    -- | ssf_url
    sSFProviderSsfUrl :: (AuthentikAPI.Common.Nullable Data.Text.Internal.Text),
    -- | token_obj
    sSFProviderTokenObj :: SSFProviderTokenObj',
    -- | verbose_name: Return object\'s verbose_name
    sSFProviderVerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    sSFProviderVerboseNamePlural :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SSFProvider where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["component" Data.Aeson.Types.ToJSON..= sSFProviderComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("event_retention" Data.Aeson.Types.ToJSON..=)) (sSFProviderEventRetention obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= sSFProviderMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= sSFProviderName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("oidc_auth_providers" Data.Aeson.Types.ToJSON..=)) (sSFProviderOidcAuthProviders obj) : ["pk" Data.Aeson.Types.ToJSON..= sSFProviderPk obj] : ["signing_key" Data.Aeson.Types.ToJSON..= sSFProviderSigningKey obj] : ["ssf_url" Data.Aeson.Types.ToJSON..= sSFProviderSsfUrl obj] : ["token_obj" Data.Aeson.Types.ToJSON..= sSFProviderTokenObj obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= sSFProviderVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= sSFProviderVerboseNamePlural obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["component" Data.Aeson.Types.ToJSON..= sSFProviderComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("event_retention" Data.Aeson.Types.ToJSON..=)) (sSFProviderEventRetention obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= sSFProviderMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= sSFProviderName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("oidc_auth_providers" Data.Aeson.Types.ToJSON..=)) (sSFProviderOidcAuthProviders obj) : ["pk" Data.Aeson.Types.ToJSON..= sSFProviderPk obj] : ["signing_key" Data.Aeson.Types.ToJSON..= sSFProviderSigningKey obj] : ["ssf_url" Data.Aeson.Types.ToJSON..= sSFProviderSsfUrl obj] : ["token_obj" Data.Aeson.Types.ToJSON..= sSFProviderTokenObj obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= sSFProviderVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= sSFProviderVerboseNamePlural obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SSFProvider where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SSFProvider" (\obj -> ((((((((((GHC.Base.pure SSFProvider GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "event_retention")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "oidc_auth_providers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "signing_key")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ssf_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "token_obj")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural"))

-- | Create a new 'SSFProvider' with all required fields.
mkSSFProvider ::
  -- | 'sSFProviderComponent'
  Data.Text.Internal.Text ->
  -- | 'sSFProviderMetaModelName'
  Data.Text.Internal.Text ->
  -- | 'sSFProviderName'
  Data.Text.Internal.Text ->
  -- | 'sSFProviderPk'
  GHC.Types.Int ->
  -- | 'sSFProviderSigningKey'
  Data.Text.Internal.Text ->
  -- | 'sSFProviderSsfUrl'
  AuthentikAPI.Common.Nullable Data.Text.Internal.Text ->
  -- | 'sSFProviderTokenObj'
  SSFProviderTokenObj' ->
  -- | 'sSFProviderVerboseName'
  Data.Text.Internal.Text ->
  -- | 'sSFProviderVerboseNamePlural'
  Data.Text.Internal.Text ->
  SSFProvider
mkSSFProvider sSFProviderComponent sSFProviderMetaModelName sSFProviderName sSFProviderPk sSFProviderSigningKey sSFProviderSsfUrl sSFProviderTokenObj sSFProviderVerboseName sSFProviderVerboseNamePlural =
  SSFProvider
    { sSFProviderComponent = sSFProviderComponent,
      sSFProviderEventRetention = GHC.Maybe.Nothing,
      sSFProviderMetaModelName = sSFProviderMetaModelName,
      sSFProviderName = sSFProviderName,
      sSFProviderOidcAuthProviders = GHC.Maybe.Nothing,
      sSFProviderPk = sSFProviderPk,
      sSFProviderSigningKey = sSFProviderSigningKey,
      sSFProviderSsfUrl = sSFProviderSsfUrl,
      sSFProviderTokenObj = sSFProviderTokenObj,
      sSFProviderVerboseName = sSFProviderVerboseName,
      sSFProviderVerboseNamePlural = sSFProviderVerboseNamePlural
    }

-- | Defines the object schema located at @components.schemas.SSFProvider.properties.token_obj.allOf@ in the specification.
data SSFProviderTokenObj' = SSFProviderTokenObj'
  { -- | description
    sSFProviderTokenObj'Description :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | expires
    sSFProviderTokenObj'Expires :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | expiring
    sSFProviderTokenObj'Expiring :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | identifier
    --
    -- Constraints:
    --
    -- * Maximum length of 255
    -- * Must match pattern \'^[-a-zA-Z0-9_]+\$\'
    sSFProviderTokenObj'Identifier :: Data.Text.Internal.Text,
    -- | intent
    sSFProviderTokenObj'Intent :: (GHC.Maybe.Maybe IntentEnum),
    -- | managed: Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
    sSFProviderTokenObj'Managed :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | pk
    sSFProviderTokenObj'Pk :: Data.Text.Internal.Text,
    -- | user
    sSFProviderTokenObj'User :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | user_obj
    sSFProviderTokenObj'UserObj :: SSFProviderTokenObj'UserObj'
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SSFProviderTokenObj' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (sSFProviderTokenObj'Description obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires" Data.Aeson.Types.ToJSON..=)) (sSFProviderTokenObj'Expires obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expiring" Data.Aeson.Types.ToJSON..=)) (sSFProviderTokenObj'Expiring obj) : ["identifier" Data.Aeson.Types.ToJSON..= sSFProviderTokenObj'Identifier obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("intent" Data.Aeson.Types.ToJSON..=)) (sSFProviderTokenObj'Intent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("managed" Data.Aeson.Types.ToJSON..=)) (sSFProviderTokenObj'Managed obj) : ["pk" Data.Aeson.Types.ToJSON..= sSFProviderTokenObj'Pk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user" Data.Aeson.Types.ToJSON..=)) (sSFProviderTokenObj'User obj) : ["user_obj" Data.Aeson.Types.ToJSON..= sSFProviderTokenObj'UserObj obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (sSFProviderTokenObj'Description obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires" Data.Aeson.Types.ToJSON..=)) (sSFProviderTokenObj'Expires obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expiring" Data.Aeson.Types.ToJSON..=)) (sSFProviderTokenObj'Expiring obj) : ["identifier" Data.Aeson.Types.ToJSON..= sSFProviderTokenObj'Identifier obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("intent" Data.Aeson.Types.ToJSON..=)) (sSFProviderTokenObj'Intent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("managed" Data.Aeson.Types.ToJSON..=)) (sSFProviderTokenObj'Managed obj) : ["pk" Data.Aeson.Types.ToJSON..= sSFProviderTokenObj'Pk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user" Data.Aeson.Types.ToJSON..=)) (sSFProviderTokenObj'User obj) : ["user_obj" Data.Aeson.Types.ToJSON..= sSFProviderTokenObj'UserObj obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SSFProviderTokenObj' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SSFProviderTokenObj'" (\obj -> ((((((((GHC.Base.pure SSFProviderTokenObj' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expires")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expiring")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "identifier")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "intent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "managed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "user")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "user_obj"))

-- | Create a new 'SSFProviderTokenObj'' with all required fields.
mkSSFProviderTokenObj' ::
  -- | 'sSFProviderTokenObj'Identifier'
  Data.Text.Internal.Text ->
  -- | 'sSFProviderTokenObj'Pk'
  Data.Text.Internal.Text ->
  -- | 'sSFProviderTokenObj'UserObj'
  SSFProviderTokenObj'UserObj' ->
  SSFProviderTokenObj'
mkSSFProviderTokenObj' sSFProviderTokenObj'Identifier sSFProviderTokenObj'Pk sSFProviderTokenObj'UserObj =
  SSFProviderTokenObj'
    { sSFProviderTokenObj'Description = GHC.Maybe.Nothing,
      sSFProviderTokenObj'Expires = GHC.Maybe.Nothing,
      sSFProviderTokenObj'Expiring = GHC.Maybe.Nothing,
      sSFProviderTokenObj'Identifier = sSFProviderTokenObj'Identifier,
      sSFProviderTokenObj'Intent = GHC.Maybe.Nothing,
      sSFProviderTokenObj'Managed = GHC.Maybe.Nothing,
      sSFProviderTokenObj'Pk = sSFProviderTokenObj'Pk,
      sSFProviderTokenObj'User = GHC.Maybe.Nothing,
      sSFProviderTokenObj'UserObj = sSFProviderTokenObj'UserObj
    }

-- | Defines the object schema located at @components.schemas.SSFProvider.properties.token_obj.allOf.properties.user_obj.allOf@ in the specification.
data SSFProviderTokenObj'UserObj' = SSFProviderTokenObj'UserObj'
  { -- | attributes
    sSFProviderTokenObj'UserObj'Attributes :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | avatar: User\'s avatar, either a http\/https URL or a data URI
    sSFProviderTokenObj'UserObj'Avatar :: Data.Text.Internal.Text,
    -- | date_joined
    sSFProviderTokenObj'UserObj'DateJoined :: Data.Text.Internal.Text,
    -- | email
    --
    -- Constraints:
    --
    -- * Maximum length of 254
    sSFProviderTokenObj'UserObj'Email :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | groups
    sSFProviderTokenObj'UserObj'Groups :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | groups_obj
    sSFProviderTokenObj'UserObj'GroupsObj :: (AuthentikAPI.Common.Nullable [UserGroup]),
    -- | is_active: Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
    sSFProviderTokenObj'UserObj'IsActive :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | is_superuser
    sSFProviderTokenObj'UserObj'IsSuperuser :: GHC.Types.Bool,
    -- | last_login
    sSFProviderTokenObj'UserObj'LastLogin :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | name: User\'s display name.
    sSFProviderTokenObj'UserObj'Name :: Data.Text.Internal.Text,
    -- | password_change_date
    sSFProviderTokenObj'UserObj'PasswordChangeDate :: Data.Text.Internal.Text,
    -- | path
    sSFProviderTokenObj'UserObj'Path :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | pk
    sSFProviderTokenObj'UserObj'Pk :: GHC.Types.Int,
    -- | type
    sSFProviderTokenObj'UserObj'Type :: (GHC.Maybe.Maybe UserTypeEnum),
    -- | uid
    sSFProviderTokenObj'UserObj'Uid :: Data.Text.Internal.Text,
    -- | username
    --
    -- Constraints:
    --
    -- * Maximum length of 150
    sSFProviderTokenObj'UserObj'Username :: Data.Text.Internal.Text,
    -- | uuid
    sSFProviderTokenObj'UserObj'Uuid :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SSFProviderTokenObj'UserObj' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (sSFProviderTokenObj'UserObj'Attributes obj) : ["avatar" Data.Aeson.Types.ToJSON..= sSFProviderTokenObj'UserObj'Avatar obj] : ["date_joined" Data.Aeson.Types.ToJSON..= sSFProviderTokenObj'UserObj'DateJoined obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (sSFProviderTokenObj'UserObj'Email obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("groups" Data.Aeson.Types.ToJSON..=)) (sSFProviderTokenObj'UserObj'Groups obj) : ["groups_obj" Data.Aeson.Types.ToJSON..= sSFProviderTokenObj'UserObj'GroupsObj obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_active" Data.Aeson.Types.ToJSON..=)) (sSFProviderTokenObj'UserObj'IsActive obj) : ["is_superuser" Data.Aeson.Types.ToJSON..= sSFProviderTokenObj'UserObj'IsSuperuser obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_login" Data.Aeson.Types.ToJSON..=)) (sSFProviderTokenObj'UserObj'LastLogin obj) : ["name" Data.Aeson.Types.ToJSON..= sSFProviderTokenObj'UserObj'Name obj] : ["password_change_date" Data.Aeson.Types.ToJSON..= sSFProviderTokenObj'UserObj'PasswordChangeDate obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("path" Data.Aeson.Types.ToJSON..=)) (sSFProviderTokenObj'UserObj'Path obj) : ["pk" Data.Aeson.Types.ToJSON..= sSFProviderTokenObj'UserObj'Pk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (sSFProviderTokenObj'UserObj'Type obj) : ["uid" Data.Aeson.Types.ToJSON..= sSFProviderTokenObj'UserObj'Uid obj] : ["username" Data.Aeson.Types.ToJSON..= sSFProviderTokenObj'UserObj'Username obj] : ["uuid" Data.Aeson.Types.ToJSON..= sSFProviderTokenObj'UserObj'Uuid obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (sSFProviderTokenObj'UserObj'Attributes obj) : ["avatar" Data.Aeson.Types.ToJSON..= sSFProviderTokenObj'UserObj'Avatar obj] : ["date_joined" Data.Aeson.Types.ToJSON..= sSFProviderTokenObj'UserObj'DateJoined obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (sSFProviderTokenObj'UserObj'Email obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("groups" Data.Aeson.Types.ToJSON..=)) (sSFProviderTokenObj'UserObj'Groups obj) : ["groups_obj" Data.Aeson.Types.ToJSON..= sSFProviderTokenObj'UserObj'GroupsObj obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_active" Data.Aeson.Types.ToJSON..=)) (sSFProviderTokenObj'UserObj'IsActive obj) : ["is_superuser" Data.Aeson.Types.ToJSON..= sSFProviderTokenObj'UserObj'IsSuperuser obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_login" Data.Aeson.Types.ToJSON..=)) (sSFProviderTokenObj'UserObj'LastLogin obj) : ["name" Data.Aeson.Types.ToJSON..= sSFProviderTokenObj'UserObj'Name obj] : ["password_change_date" Data.Aeson.Types.ToJSON..= sSFProviderTokenObj'UserObj'PasswordChangeDate obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("path" Data.Aeson.Types.ToJSON..=)) (sSFProviderTokenObj'UserObj'Path obj) : ["pk" Data.Aeson.Types.ToJSON..= sSFProviderTokenObj'UserObj'Pk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (sSFProviderTokenObj'UserObj'Type obj) : ["uid" Data.Aeson.Types.ToJSON..= sSFProviderTokenObj'UserObj'Uid obj] : ["username" Data.Aeson.Types.ToJSON..= sSFProviderTokenObj'UserObj'Username obj] : ["uuid" Data.Aeson.Types.ToJSON..= sSFProviderTokenObj'UserObj'Uuid obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SSFProviderTokenObj'UserObj' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SSFProviderTokenObj'UserObj'" (\obj -> ((((((((((((((((GHC.Base.pure SSFProviderTokenObj'UserObj' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "attributes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "avatar")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "date_joined")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "groups")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "groups_obj")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "is_active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "is_superuser")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "last_login")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "password_change_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "path")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "uid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "username")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "uuid"))

-- | Create a new 'SSFProviderTokenObj'UserObj'' with all required fields.
mkSSFProviderTokenObj'UserObj' ::
  -- | 'sSFProviderTokenObj'UserObj'Avatar'
  Data.Text.Internal.Text ->
  -- | 'sSFProviderTokenObj'UserObj'DateJoined'
  Data.Text.Internal.Text ->
  -- | 'sSFProviderTokenObj'UserObj'GroupsObj'
  AuthentikAPI.Common.Nullable [UserGroup] ->
  -- | 'sSFProviderTokenObj'UserObj'IsSuperuser'
  GHC.Types.Bool ->
  -- | 'sSFProviderTokenObj'UserObj'Name'
  Data.Text.Internal.Text ->
  -- | 'sSFProviderTokenObj'UserObj'PasswordChangeDate'
  Data.Text.Internal.Text ->
  -- | 'sSFProviderTokenObj'UserObj'Pk'
  GHC.Types.Int ->
  -- | 'sSFProviderTokenObj'UserObj'Uid'
  Data.Text.Internal.Text ->
  -- | 'sSFProviderTokenObj'UserObj'Username'
  Data.Text.Internal.Text ->
  -- | 'sSFProviderTokenObj'UserObj'Uuid'
  Data.Text.Internal.Text ->
  SSFProviderTokenObj'UserObj'
mkSSFProviderTokenObj'UserObj' sSFProviderTokenObj'UserObj'Avatar sSFProviderTokenObj'UserObj'DateJoined sSFProviderTokenObj'UserObj'GroupsObj sSFProviderTokenObj'UserObj'IsSuperuser sSFProviderTokenObj'UserObj'Name sSFProviderTokenObj'UserObj'PasswordChangeDate sSFProviderTokenObj'UserObj'Pk sSFProviderTokenObj'UserObj'Uid sSFProviderTokenObj'UserObj'Username sSFProviderTokenObj'UserObj'Uuid =
  SSFProviderTokenObj'UserObj'
    { sSFProviderTokenObj'UserObj'Attributes = GHC.Maybe.Nothing,
      sSFProviderTokenObj'UserObj'Avatar = sSFProviderTokenObj'UserObj'Avatar,
      sSFProviderTokenObj'UserObj'DateJoined = sSFProviderTokenObj'UserObj'DateJoined,
      sSFProviderTokenObj'UserObj'Email = GHC.Maybe.Nothing,
      sSFProviderTokenObj'UserObj'Groups = GHC.Maybe.Nothing,
      sSFProviderTokenObj'UserObj'GroupsObj = sSFProviderTokenObj'UserObj'GroupsObj,
      sSFProviderTokenObj'UserObj'IsActive = GHC.Maybe.Nothing,
      sSFProviderTokenObj'UserObj'IsSuperuser = sSFProviderTokenObj'UserObj'IsSuperuser,
      sSFProviderTokenObj'UserObj'LastLogin = GHC.Maybe.Nothing,
      sSFProviderTokenObj'UserObj'Name = sSFProviderTokenObj'UserObj'Name,
      sSFProviderTokenObj'UserObj'PasswordChangeDate = sSFProviderTokenObj'UserObj'PasswordChangeDate,
      sSFProviderTokenObj'UserObj'Path = GHC.Maybe.Nothing,
      sSFProviderTokenObj'UserObj'Pk = sSFProviderTokenObj'UserObj'Pk,
      sSFProviderTokenObj'UserObj'Type = GHC.Maybe.Nothing,
      sSFProviderTokenObj'UserObj'Uid = sSFProviderTokenObj'UserObj'Uid,
      sSFProviderTokenObj'UserObj'Username = sSFProviderTokenObj'UserObj'Username,
      sSFProviderTokenObj'UserObj'Uuid = sSFProviderTokenObj'UserObj'Uuid
    }

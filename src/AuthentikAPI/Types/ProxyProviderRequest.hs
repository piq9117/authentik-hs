{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema ProxyProviderRequest
module AuthentikAPI.Types.ProxyProviderRequest where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.ProxyProviderRequest@ in the specification.
--
-- ProxyProvider Serializer
data ProxyProviderRequest = ProxyProviderRequest
  { -- | access_token_validity: Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    proxyProviderRequestAccessTokenValidity :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | authentication_flow: Flow used for authentication when the associated application is accessed by an un-authenticated user.
    proxyProviderRequestAuthenticationFlow :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | authorization_flow: Flow used when authorizing this provider.
    proxyProviderRequestAuthorizationFlow :: Data.Text.Internal.Text,
    -- | basic_auth_enabled: Set a custom HTTP-Basic Authentication header based on values from authentik.
    proxyProviderRequestBasicAuthEnabled :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | basic_auth_password_attribute: User\/Group Attribute used for the password part of the HTTP-Basic Header.
    proxyProviderRequestBasicAuthPasswordAttribute :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | basic_auth_user_attribute: User\/Group Attribute used for the user part of the HTTP-Basic Header. If not set, the user\'s Email address is used.
    proxyProviderRequestBasicAuthUserAttribute :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | certificate
    proxyProviderRequestCertificate :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | cookie_domain
    proxyProviderRequestCookieDomain :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | external_host
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    proxyProviderRequestExternalHost :: Data.Text.Internal.Text,
    -- | intercept_header_auth: When enabled, this provider will intercept the authorization header and authenticate requests based on its value.
    proxyProviderRequestInterceptHeaderAuth :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | internal_host
    proxyProviderRequestInternalHost :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | internal_host_ssl_validation: Validate SSL Certificates of upstream servers
    proxyProviderRequestInternalHostSslValidation :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | invalidation_flow: Flow used ending the session from a provider.
    proxyProviderRequestInvalidationFlow :: Data.Text.Internal.Text,
    -- | jwt_federation_providers
    proxyProviderRequestJwtFederationProviders :: (GHC.Maybe.Maybe [GHC.Types.Int]),
    -- | jwt_federation_sources
    proxyProviderRequestJwtFederationSources :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | mode: Enable support for forwardAuth in traefik and nginx auth_request. Exclusive with internal_host.
    proxyProviderRequestMode :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | name
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    proxyProviderRequestName :: Data.Text.Internal.Text,
    -- | property_mappings
    proxyProviderRequestPropertyMappings :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | refresh_token_validity: Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    proxyProviderRequestRefreshTokenValidity :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | skip_path_regex: Regular expressions for which authentication is not required. Each new line is interpreted as a new Regular Expression.
    proxyProviderRequestSkipPathRegex :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON ProxyProviderRequest where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("access_token_validity" Data.Aeson.Types.ToJSON..=)) (proxyProviderRequestAccessTokenValidity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication_flow" Data.Aeson.Types.ToJSON..=)) (proxyProviderRequestAuthenticationFlow obj) : ["authorization_flow" Data.Aeson.Types.ToJSON..= proxyProviderRequestAuthorizationFlow obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("basic_auth_enabled" Data.Aeson.Types.ToJSON..=)) (proxyProviderRequestBasicAuthEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("basic_auth_password_attribute" Data.Aeson.Types.ToJSON..=)) (proxyProviderRequestBasicAuthPasswordAttribute obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("basic_auth_user_attribute" Data.Aeson.Types.ToJSON..=)) (proxyProviderRequestBasicAuthUserAttribute obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("certificate" Data.Aeson.Types.ToJSON..=)) (proxyProviderRequestCertificate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cookie_domain" Data.Aeson.Types.ToJSON..=)) (proxyProviderRequestCookieDomain obj) : ["external_host" Data.Aeson.Types.ToJSON..= proxyProviderRequestExternalHost obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("intercept_header_auth" Data.Aeson.Types.ToJSON..=)) (proxyProviderRequestInterceptHeaderAuth obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("internal_host" Data.Aeson.Types.ToJSON..=)) (proxyProviderRequestInternalHost obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("internal_host_ssl_validation" Data.Aeson.Types.ToJSON..=)) (proxyProviderRequestInternalHostSslValidation obj) : ["invalidation_flow" Data.Aeson.Types.ToJSON..= proxyProviderRequestInvalidationFlow obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("jwt_federation_providers" Data.Aeson.Types.ToJSON..=)) (proxyProviderRequestJwtFederationProviders obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("jwt_federation_sources" Data.Aeson.Types.ToJSON..=)) (proxyProviderRequestJwtFederationSources obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mode" Data.Aeson.Types.ToJSON..=)) (proxyProviderRequestMode obj) : ["name" Data.Aeson.Types.ToJSON..= proxyProviderRequestName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings" Data.Aeson.Types.ToJSON..=)) (proxyProviderRequestPropertyMappings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("refresh_token_validity" Data.Aeson.Types.ToJSON..=)) (proxyProviderRequestRefreshTokenValidity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("skip_path_regex" Data.Aeson.Types.ToJSON..=)) (proxyProviderRequestSkipPathRegex obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("access_token_validity" Data.Aeson.Types.ToJSON..=)) (proxyProviderRequestAccessTokenValidity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication_flow" Data.Aeson.Types.ToJSON..=)) (proxyProviderRequestAuthenticationFlow obj) : ["authorization_flow" Data.Aeson.Types.ToJSON..= proxyProviderRequestAuthorizationFlow obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("basic_auth_enabled" Data.Aeson.Types.ToJSON..=)) (proxyProviderRequestBasicAuthEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("basic_auth_password_attribute" Data.Aeson.Types.ToJSON..=)) (proxyProviderRequestBasicAuthPasswordAttribute obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("basic_auth_user_attribute" Data.Aeson.Types.ToJSON..=)) (proxyProviderRequestBasicAuthUserAttribute obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("certificate" Data.Aeson.Types.ToJSON..=)) (proxyProviderRequestCertificate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cookie_domain" Data.Aeson.Types.ToJSON..=)) (proxyProviderRequestCookieDomain obj) : ["external_host" Data.Aeson.Types.ToJSON..= proxyProviderRequestExternalHost obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("intercept_header_auth" Data.Aeson.Types.ToJSON..=)) (proxyProviderRequestInterceptHeaderAuth obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("internal_host" Data.Aeson.Types.ToJSON..=)) (proxyProviderRequestInternalHost obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("internal_host_ssl_validation" Data.Aeson.Types.ToJSON..=)) (proxyProviderRequestInternalHostSslValidation obj) : ["invalidation_flow" Data.Aeson.Types.ToJSON..= proxyProviderRequestInvalidationFlow obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("jwt_federation_providers" Data.Aeson.Types.ToJSON..=)) (proxyProviderRequestJwtFederationProviders obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("jwt_federation_sources" Data.Aeson.Types.ToJSON..=)) (proxyProviderRequestJwtFederationSources obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mode" Data.Aeson.Types.ToJSON..=)) (proxyProviderRequestMode obj) : ["name" Data.Aeson.Types.ToJSON..= proxyProviderRequestName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings" Data.Aeson.Types.ToJSON..=)) (proxyProviderRequestPropertyMappings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("refresh_token_validity" Data.Aeson.Types.ToJSON..=)) (proxyProviderRequestRefreshTokenValidity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("skip_path_regex" Data.Aeson.Types.ToJSON..=)) (proxyProviderRequestSkipPathRegex obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON ProxyProviderRequest where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "ProxyProviderRequest" (\obj -> (((((((((((((((((((GHC.Base.pure ProxyProviderRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "access_token_validity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "authentication_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "authorization_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "basic_auth_enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "basic_auth_password_attribute")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "basic_auth_user_attribute")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "certificate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cookie_domain")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "external_host")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "intercept_header_auth")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "internal_host")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "internal_host_ssl_validation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "invalidation_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "jwt_federation_providers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "jwt_federation_sources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "property_mappings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "refresh_token_validity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "skip_path_regex"))

-- | Create a new 'ProxyProviderRequest' with all required fields.
mkProxyProviderRequest ::
  -- | 'proxyProviderRequestAuthorizationFlow'
  Data.Text.Internal.Text ->
  -- | 'proxyProviderRequestExternalHost'
  Data.Text.Internal.Text ->
  -- | 'proxyProviderRequestInvalidationFlow'
  Data.Text.Internal.Text ->
  -- | 'proxyProviderRequestName'
  Data.Text.Internal.Text ->
  ProxyProviderRequest
mkProxyProviderRequest proxyProviderRequestAuthorizationFlow proxyProviderRequestExternalHost proxyProviderRequestInvalidationFlow proxyProviderRequestName =
  ProxyProviderRequest
    { proxyProviderRequestAccessTokenValidity = GHC.Maybe.Nothing,
      proxyProviderRequestAuthenticationFlow = GHC.Maybe.Nothing,
      proxyProviderRequestAuthorizationFlow = proxyProviderRequestAuthorizationFlow,
      proxyProviderRequestBasicAuthEnabled = GHC.Maybe.Nothing,
      proxyProviderRequestBasicAuthPasswordAttribute = GHC.Maybe.Nothing,
      proxyProviderRequestBasicAuthUserAttribute = GHC.Maybe.Nothing,
      proxyProviderRequestCertificate = GHC.Maybe.Nothing,
      proxyProviderRequestCookieDomain = GHC.Maybe.Nothing,
      proxyProviderRequestExternalHost = proxyProviderRequestExternalHost,
      proxyProviderRequestInterceptHeaderAuth = GHC.Maybe.Nothing,
      proxyProviderRequestInternalHost = GHC.Maybe.Nothing,
      proxyProviderRequestInternalHostSslValidation = GHC.Maybe.Nothing,
      proxyProviderRequestInvalidationFlow = proxyProviderRequestInvalidationFlow,
      proxyProviderRequestJwtFederationProviders = GHC.Maybe.Nothing,
      proxyProviderRequestJwtFederationSources = GHC.Maybe.Nothing,
      proxyProviderRequestMode = GHC.Maybe.Nothing,
      proxyProviderRequestName = proxyProviderRequestName,
      proxyProviderRequestPropertyMappings = GHC.Maybe.Nothing,
      proxyProviderRequestRefreshTokenValidity = GHC.Maybe.Nothing,
      proxyProviderRequestSkipPathRegex = GHC.Maybe.Nothing
    }

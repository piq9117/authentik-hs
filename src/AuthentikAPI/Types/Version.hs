{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Version
module AuthentikAPI.Types.Version where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.Version@ in the specification.
--
-- Get running and latest version.
data Version = Version
  { -- | build_hash: Get build hash, if version is not latest or released
    versionBuildHash :: Data.Text.Internal.Text,
    -- | outdated: Check if we\'re running the latest version
    versionOutdated :: GHC.Types.Bool,
    -- | outpost_outdated: Check if any outpost is outdated\/has a version mismatch
    versionOutpostOutdated :: GHC.Types.Bool,
    -- | version_current: Get current version
    versionVersionCurrent :: Data.Text.Internal.Text,
    -- | version_latest: Get latest version from cache
    versionVersionLatest :: Data.Text.Internal.Text,
    -- | version_latest_valid: Check if latest version is valid
    versionVersionLatestValid :: GHC.Types.Bool
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Version where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["build_hash" Data.Aeson.Types.ToJSON..= versionBuildHash obj] : ["outdated" Data.Aeson.Types.ToJSON..= versionOutdated obj] : ["outpost_outdated" Data.Aeson.Types.ToJSON..= versionOutpostOutdated obj] : ["version_current" Data.Aeson.Types.ToJSON..= versionVersionCurrent obj] : ["version_latest" Data.Aeson.Types.ToJSON..= versionVersionLatest obj] : ["version_latest_valid" Data.Aeson.Types.ToJSON..= versionVersionLatestValid obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["build_hash" Data.Aeson.Types.ToJSON..= versionBuildHash obj] : ["outdated" Data.Aeson.Types.ToJSON..= versionOutdated obj] : ["outpost_outdated" Data.Aeson.Types.ToJSON..= versionOutpostOutdated obj] : ["version_current" Data.Aeson.Types.ToJSON..= versionVersionCurrent obj] : ["version_latest" Data.Aeson.Types.ToJSON..= versionVersionLatest obj] : ["version_latest_valid" Data.Aeson.Types.ToJSON..= versionVersionLatestValid obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Version where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Version" (\obj -> (((((GHC.Base.pure Version GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "build_hash")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "outdated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "outpost_outdated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "version_current")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "version_latest")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "version_latest_valid"))

-- | Create a new 'Version' with all required fields.
mkVersion ::
  -- | 'versionBuildHash'
  Data.Text.Internal.Text ->
  -- | 'versionOutdated'
  GHC.Types.Bool ->
  -- | 'versionOutpostOutdated'
  GHC.Types.Bool ->
  -- | 'versionVersionCurrent'
  Data.Text.Internal.Text ->
  -- | 'versionVersionLatest'
  Data.Text.Internal.Text ->
  -- | 'versionVersionLatestValid'
  GHC.Types.Bool ->
  Version
mkVersion versionBuildHash versionOutdated versionOutpostOutdated versionVersionCurrent versionVersionLatest versionVersionLatestValid =
  Version
    { versionBuildHash = versionBuildHash,
      versionOutdated = versionOutdated,
      versionOutpostOutdated = versionOutpostOutdated,
      versionVersionCurrent = versionVersionCurrent,
      versionVersionLatest = versionVersionLatest,
      versionVersionLatestValid = versionVersionLatestValid
    }

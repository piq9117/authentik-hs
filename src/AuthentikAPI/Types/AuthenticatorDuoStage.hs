{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema AuthenticatorDuoStage
module AuthentikAPI.Types.AuthenticatorDuoStage where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.FlowSet
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.AuthenticatorDuoStage@ in the specification.
--
-- AuthenticatorDuoStage Serializer
data AuthenticatorDuoStage = AuthenticatorDuoStage
  { -- | admin_integration_key
    authenticatorDuoStageAdminIntegrationKey :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | api_hostname
    authenticatorDuoStageApiHostname :: Data.Text.Internal.Text,
    -- | client_id
    authenticatorDuoStageClientId :: Data.Text.Internal.Text,
    -- | component: Get object type so that we know how to edit the object
    authenticatorDuoStageComponent :: Data.Text.Internal.Text,
    -- | configure_flow: Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
    authenticatorDuoStageConfigureFlow :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | flow_set
    authenticatorDuoStageFlowSet :: (GHC.Maybe.Maybe [FlowSet]),
    -- | friendly_name
    authenticatorDuoStageFriendlyName :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | meta_model_name: Return internal model name
    authenticatorDuoStageMetaModelName :: Data.Text.Internal.Text,
    -- | name
    authenticatorDuoStageName :: Data.Text.Internal.Text,
    -- | pk
    authenticatorDuoStagePk :: Data.Text.Internal.Text,
    -- | verbose_name: Return object\'s verbose_name
    authenticatorDuoStageVerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    authenticatorDuoStageVerboseNamePlural :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON AuthenticatorDuoStage where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("admin_integration_key" Data.Aeson.Types.ToJSON..=)) (authenticatorDuoStageAdminIntegrationKey obj) : ["api_hostname" Data.Aeson.Types.ToJSON..= authenticatorDuoStageApiHostname obj] : ["client_id" Data.Aeson.Types.ToJSON..= authenticatorDuoStageClientId obj] : ["component" Data.Aeson.Types.ToJSON..= authenticatorDuoStageComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("configure_flow" Data.Aeson.Types.ToJSON..=)) (authenticatorDuoStageConfigureFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_set" Data.Aeson.Types.ToJSON..=)) (authenticatorDuoStageFlowSet obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("friendly_name" Data.Aeson.Types.ToJSON..=)) (authenticatorDuoStageFriendlyName obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= authenticatorDuoStageMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= authenticatorDuoStageName obj] : ["pk" Data.Aeson.Types.ToJSON..= authenticatorDuoStagePk obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= authenticatorDuoStageVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= authenticatorDuoStageVerboseNamePlural obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("admin_integration_key" Data.Aeson.Types.ToJSON..=)) (authenticatorDuoStageAdminIntegrationKey obj) : ["api_hostname" Data.Aeson.Types.ToJSON..= authenticatorDuoStageApiHostname obj] : ["client_id" Data.Aeson.Types.ToJSON..= authenticatorDuoStageClientId obj] : ["component" Data.Aeson.Types.ToJSON..= authenticatorDuoStageComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("configure_flow" Data.Aeson.Types.ToJSON..=)) (authenticatorDuoStageConfigureFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_set" Data.Aeson.Types.ToJSON..=)) (authenticatorDuoStageFlowSet obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("friendly_name" Data.Aeson.Types.ToJSON..=)) (authenticatorDuoStageFriendlyName obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= authenticatorDuoStageMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= authenticatorDuoStageName obj] : ["pk" Data.Aeson.Types.ToJSON..= authenticatorDuoStagePk obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= authenticatorDuoStageVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= authenticatorDuoStageVerboseNamePlural obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON AuthenticatorDuoStage where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "AuthenticatorDuoStage" (\obj -> (((((((((((GHC.Base.pure AuthenticatorDuoStage GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "admin_integration_key")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "api_hostname")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "client_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "configure_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_set")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "friendly_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural"))

-- | Create a new 'AuthenticatorDuoStage' with all required fields.
mkAuthenticatorDuoStage ::
  -- | 'authenticatorDuoStageApiHostname'
  Data.Text.Internal.Text ->
  -- | 'authenticatorDuoStageClientId'
  Data.Text.Internal.Text ->
  -- | 'authenticatorDuoStageComponent'
  Data.Text.Internal.Text ->
  -- | 'authenticatorDuoStageMetaModelName'
  Data.Text.Internal.Text ->
  -- | 'authenticatorDuoStageName'
  Data.Text.Internal.Text ->
  -- | 'authenticatorDuoStagePk'
  Data.Text.Internal.Text ->
  -- | 'authenticatorDuoStageVerboseName'
  Data.Text.Internal.Text ->
  -- | 'authenticatorDuoStageVerboseNamePlural'
  Data.Text.Internal.Text ->
  AuthenticatorDuoStage
mkAuthenticatorDuoStage authenticatorDuoStageApiHostname authenticatorDuoStageClientId authenticatorDuoStageComponent authenticatorDuoStageMetaModelName authenticatorDuoStageName authenticatorDuoStagePk authenticatorDuoStageVerboseName authenticatorDuoStageVerboseNamePlural =
  AuthenticatorDuoStage
    { authenticatorDuoStageAdminIntegrationKey = GHC.Maybe.Nothing,
      authenticatorDuoStageApiHostname = authenticatorDuoStageApiHostname,
      authenticatorDuoStageClientId = authenticatorDuoStageClientId,
      authenticatorDuoStageComponent = authenticatorDuoStageComponent,
      authenticatorDuoStageConfigureFlow = GHC.Maybe.Nothing,
      authenticatorDuoStageFlowSet = GHC.Maybe.Nothing,
      authenticatorDuoStageFriendlyName = GHC.Maybe.Nothing,
      authenticatorDuoStageMetaModelName = authenticatorDuoStageMetaModelName,
      authenticatorDuoStageName = authenticatorDuoStageName,
      authenticatorDuoStagePk = authenticatorDuoStagePk,
      authenticatorDuoStageVerboseName = authenticatorDuoStageVerboseName,
      authenticatorDuoStageVerboseNamePlural = authenticatorDuoStageVerboseNamePlural
    }

{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema BlueprintFile
module AuthentikAPI.Types.BlueprintFile where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.Metadata
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.BlueprintFile@ in the specification.
data BlueprintFile = BlueprintFile
  { -- | hash
    blueprintFileHash :: Data.Text.Internal.Text,
    -- | last_m
    blueprintFileLastM :: Data.Text.Internal.Text,
    -- | meta
    blueprintFileMeta :: BlueprintFileMeta',
    -- | path
    blueprintFilePath :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON BlueprintFile where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["hash" Data.Aeson.Types.ToJSON..= blueprintFileHash obj] : ["last_m" Data.Aeson.Types.ToJSON..= blueprintFileLastM obj] : ["meta" Data.Aeson.Types.ToJSON..= blueprintFileMeta obj] : ["path" Data.Aeson.Types.ToJSON..= blueprintFilePath obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["hash" Data.Aeson.Types.ToJSON..= blueprintFileHash obj] : ["last_m" Data.Aeson.Types.ToJSON..= blueprintFileLastM obj] : ["meta" Data.Aeson.Types.ToJSON..= blueprintFileMeta obj] : ["path" Data.Aeson.Types.ToJSON..= blueprintFilePath obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON BlueprintFile where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "BlueprintFile" (\obj -> (((GHC.Base.pure BlueprintFile GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "hash")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "last_m")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "path"))

-- | Create a new 'BlueprintFile' with all required fields.
mkBlueprintFile ::
  -- | 'blueprintFileHash'
  Data.Text.Internal.Text ->
  -- | 'blueprintFileLastM'
  Data.Text.Internal.Text ->
  -- | 'blueprintFileMeta'
  BlueprintFileMeta' ->
  -- | 'blueprintFilePath'
  Data.Text.Internal.Text ->
  BlueprintFile
mkBlueprintFile blueprintFileHash blueprintFileLastM blueprintFileMeta blueprintFilePath =
  BlueprintFile
    { blueprintFileHash = blueprintFileHash,
      blueprintFileLastM = blueprintFileLastM,
      blueprintFileMeta = blueprintFileMeta,
      blueprintFilePath = blueprintFilePath
    }

-- | Defines the object schema located at @components.schemas.BlueprintFile.properties.meta.allOf@ in the specification.
data BlueprintFileMeta' = BlueprintFileMeta'
  { -- | labels
    blueprintFileMeta'Labels :: Data.Aeson.Types.Internal.Object,
    -- | name
    blueprintFileMeta'Name :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON BlueprintFileMeta' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["labels" Data.Aeson.Types.ToJSON..= blueprintFileMeta'Labels obj] : ["name" Data.Aeson.Types.ToJSON..= blueprintFileMeta'Name obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["labels" Data.Aeson.Types.ToJSON..= blueprintFileMeta'Labels obj] : ["name" Data.Aeson.Types.ToJSON..= blueprintFileMeta'Name obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON BlueprintFileMeta' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "BlueprintFileMeta'" (\obj -> (GHC.Base.pure BlueprintFileMeta' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "labels")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name"))

-- | Create a new 'BlueprintFileMeta'' with all required fields.
mkBlueprintFileMeta' ::
  -- | 'blueprintFileMeta'Labels'
  Data.Aeson.Types.Internal.Object ->
  -- | 'blueprintFileMeta'Name'
  Data.Text.Internal.Text ->
  BlueprintFileMeta'
mkBlueprintFileMeta' blueprintFileMeta'Labels blueprintFileMeta'Name =
  BlueprintFileMeta'
    { blueprintFileMeta'Labels = blueprintFileMeta'Labels,
      blueprintFileMeta'Name = blueprintFileMeta'Name
    }

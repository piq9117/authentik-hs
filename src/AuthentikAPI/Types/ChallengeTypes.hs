{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema ChallengeTypes
module AuthentikAPI.Types.ChallengeTypes where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.AccessDeniedChallenge
import {-# SOURCE #-} AuthentikAPI.Types.AppleLoginChallenge
import {-# SOURCE #-} AuthentikAPI.Types.AuthenticatorDuoChallenge
import {-# SOURCE #-} AuthentikAPI.Types.AuthenticatorEmailChallenge
import {-# SOURCE #-} AuthentikAPI.Types.AuthenticatorSMSChallenge
import {-# SOURCE #-} AuthentikAPI.Types.AuthenticatorStaticChallenge
import {-# SOURCE #-} AuthentikAPI.Types.AuthenticatorTOTPChallenge
import {-# SOURCE #-} AuthentikAPI.Types.AuthenticatorValidationChallenge
import {-# SOURCE #-} AuthentikAPI.Types.AuthenticatorWebAuthnChallenge
import {-# SOURCE #-} AuthentikAPI.Types.AutosubmitChallenge
import {-# SOURCE #-} AuthentikAPI.Types.CaptchaChallenge
import {-# SOURCE #-} AuthentikAPI.Types.ConsentChallenge
import {-# SOURCE #-} AuthentikAPI.Types.DummyChallenge
import {-# SOURCE #-} AuthentikAPI.Types.EmailChallenge
import {-# SOURCE #-} AuthentikAPI.Types.FlowErrorChallenge
import {-# SOURCE #-} AuthentikAPI.Types.FrameChallenge
import {-# SOURCE #-} AuthentikAPI.Types.IdentificationChallenge
import {-# SOURCE #-} AuthentikAPI.Types.OAuthDeviceCodeChallenge
import {-# SOURCE #-} AuthentikAPI.Types.OAuthDeviceCodeFinishChallenge
import {-# SOURCE #-} AuthentikAPI.Types.PasswordChallenge
import {-# SOURCE #-} AuthentikAPI.Types.PlexAuthenticationChallenge
import {-# SOURCE #-} AuthentikAPI.Types.PromptChallenge
import {-# SOURCE #-} AuthentikAPI.Types.RedirectChallenge
import {-# SOURCE #-} AuthentikAPI.Types.SessionEndChallenge
import {-# SOURCE #-} AuthentikAPI.Types.ShellChallenge
import {-# SOURCE #-} AuthentikAPI.Types.UserLoginChallenge
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the oneOf schema located at @components.schemas.ChallengeTypes.oneOf@ in the specification.
data ChallengeTypesVariants
  = ChallengeTypesAccessDeniedChallenge AccessDeniedChallenge
  | ChallengeTypesAppleLoginChallenge AppleLoginChallenge
  | ChallengeTypesAuthenticatorDuoChallenge AuthenticatorDuoChallenge
  | ChallengeTypesAuthenticatorEmailChallenge AuthenticatorEmailChallenge
  | ChallengeTypesAuthenticatorSMSChallenge AuthenticatorSMSChallenge
  | ChallengeTypesAuthenticatorStaticChallenge AuthenticatorStaticChallenge
  | ChallengeTypesAuthenticatorTOTPChallenge AuthenticatorTOTPChallenge
  | ChallengeTypesAuthenticatorValidationChallenge AuthenticatorValidationChallenge
  | ChallengeTypesAuthenticatorWebAuthnChallenge AuthenticatorWebAuthnChallenge
  | ChallengeTypesAutosubmitChallenge AutosubmitChallenge
  | ChallengeTypesCaptchaChallenge CaptchaChallenge
  | ChallengeTypesConsentChallenge ConsentChallenge
  | ChallengeTypesDummyChallenge DummyChallenge
  | ChallengeTypesEmailChallenge EmailChallenge
  | ChallengeTypesFlowErrorChallenge FlowErrorChallenge
  | ChallengeTypesFrameChallenge FrameChallenge
  | ChallengeTypesIdentificationChallenge IdentificationChallenge
  | ChallengeTypesOAuthDeviceCodeChallenge OAuthDeviceCodeChallenge
  | ChallengeTypesOAuthDeviceCodeFinishChallenge OAuthDeviceCodeFinishChallenge
  | ChallengeTypesPasswordChallenge PasswordChallenge
  | ChallengeTypesPlexAuthenticationChallenge PlexAuthenticationChallenge
  | ChallengeTypesPromptChallenge PromptChallenge
  | ChallengeTypesRedirectChallenge RedirectChallenge
  | ChallengeTypesSessionEndChallenge SessionEndChallenge
  | ChallengeTypesShellChallenge ShellChallenge
  | ChallengeTypesUserLoginChallenge UserLoginChallenge
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ChallengeTypesVariants where
  toJSON (ChallengeTypesAccessDeniedChallenge a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ChallengeTypesAppleLoginChallenge a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ChallengeTypesAuthenticatorDuoChallenge a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ChallengeTypesAuthenticatorEmailChallenge a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ChallengeTypesAuthenticatorSMSChallenge a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ChallengeTypesAuthenticatorStaticChallenge a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ChallengeTypesAuthenticatorTOTPChallenge a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ChallengeTypesAuthenticatorValidationChallenge a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ChallengeTypesAuthenticatorWebAuthnChallenge a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ChallengeTypesAutosubmitChallenge a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ChallengeTypesCaptchaChallenge a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ChallengeTypesConsentChallenge a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ChallengeTypesDummyChallenge a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ChallengeTypesEmailChallenge a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ChallengeTypesFlowErrorChallenge a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ChallengeTypesFrameChallenge a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ChallengeTypesIdentificationChallenge a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ChallengeTypesOAuthDeviceCodeChallenge a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ChallengeTypesOAuthDeviceCodeFinishChallenge a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ChallengeTypesPasswordChallenge a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ChallengeTypesPlexAuthenticationChallenge a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ChallengeTypesPromptChallenge a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ChallengeTypesRedirectChallenge a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ChallengeTypesSessionEndChallenge a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ChallengeTypesShellChallenge a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ChallengeTypesUserLoginChallenge a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON ChallengeTypesVariants where
  parseJSON val = case (ChallengeTypesAccessDeniedChallenge Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ChallengeTypesAppleLoginChallenge Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ChallengeTypesAuthenticatorDuoChallenge Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ChallengeTypesAuthenticatorEmailChallenge Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ChallengeTypesAuthenticatorSMSChallenge Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ChallengeTypesAuthenticatorStaticChallenge Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ChallengeTypesAuthenticatorTOTPChallenge Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ChallengeTypesAuthenticatorValidationChallenge Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ChallengeTypesAuthenticatorWebAuthnChallenge Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ChallengeTypesAutosubmitChallenge Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ChallengeTypesCaptchaChallenge Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ChallengeTypesConsentChallenge Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ChallengeTypesDummyChallenge Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ChallengeTypesEmailChallenge Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ChallengeTypesFlowErrorChallenge Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ChallengeTypesFrameChallenge Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ChallengeTypesIdentificationChallenge Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ChallengeTypesOAuthDeviceCodeChallenge Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ChallengeTypesOAuthDeviceCodeFinishChallenge Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ChallengeTypesPasswordChallenge Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ChallengeTypesPlexAuthenticationChallenge Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ChallengeTypesPromptChallenge Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ChallengeTypesRedirectChallenge Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ChallengeTypesSessionEndChallenge Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ChallengeTypesShellChallenge Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ChallengeTypesUserLoginChallenge Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched"))))))))))))))))))))))))) of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines an alias for the schema located at @components.schemas.ChallengeTypes.oneOf@ in the specification.
type ChallengeTypes = ChallengeTypesVariants

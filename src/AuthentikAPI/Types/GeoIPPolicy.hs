{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema GeoIPPolicy
module AuthentikAPI.Types.GeoIPPolicy where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.CountryCodeEnum
import {-# SOURCE #-} AuthentikAPI.Types.DetailedCountryField
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.GeoIPPolicy@ in the specification.
--
-- GeoIP Policy Serializer
data GeoIPPolicy = GeoIPPolicy
  { -- | asns
    geoIPPolicyAsns :: (GHC.Maybe.Maybe [GHC.Types.Int]),
    -- | bound_to: Return objects policy is bound to
    geoIPPolicyBoundTo :: GHC.Types.Int,
    -- | check_history_distance
    geoIPPolicyCheckHistoryDistance :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | check_impossible_travel
    geoIPPolicyCheckImpossibleTravel :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | component: Get object component so that we know how to edit the object
    geoIPPolicyComponent :: Data.Text.Internal.Text,
    -- | countries
    --
    -- Constraints:
    --
    -- * Must have a maximum of 249 items
    geoIPPolicyCountries :: [CountryCodeEnum],
    -- | countries_obj
    geoIPPolicyCountriesObj :: [DetailedCountryField],
    -- | distance_tolerance_km
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of 0.0
    geoIPPolicyDistanceToleranceKm :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | execution_logging: When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.
    geoIPPolicyExecutionLogging :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | history_login_count
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of 0.0
    geoIPPolicyHistoryLoginCount :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | history_max_distance_km
    --
    -- Constraints:
    --
    -- * Maxium  of 9.223372e18
    -- * Minimum  of 0.0
    geoIPPolicyHistoryMaxDistanceKm :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | impossible_tolerance_km
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of 0.0
    geoIPPolicyImpossibleToleranceKm :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | meta_model_name: Return internal model name
    geoIPPolicyMetaModelName :: Data.Text.Internal.Text,
    -- | name
    geoIPPolicyName :: Data.Text.Internal.Text,
    -- | pk
    geoIPPolicyPk :: Data.Text.Internal.Text,
    -- | verbose_name: Return object\'s verbose_name
    geoIPPolicyVerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    geoIPPolicyVerboseNamePlural :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GeoIPPolicy where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("asns" Data.Aeson.Types.ToJSON..=)) (geoIPPolicyAsns obj) : ["bound_to" Data.Aeson.Types.ToJSON..= geoIPPolicyBoundTo obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("check_history_distance" Data.Aeson.Types.ToJSON..=)) (geoIPPolicyCheckHistoryDistance obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("check_impossible_travel" Data.Aeson.Types.ToJSON..=)) (geoIPPolicyCheckImpossibleTravel obj) : ["component" Data.Aeson.Types.ToJSON..= geoIPPolicyComponent obj] : ["countries" Data.Aeson.Types.ToJSON..= geoIPPolicyCountries obj] : ["countries_obj" Data.Aeson.Types.ToJSON..= geoIPPolicyCountriesObj obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("distance_tolerance_km" Data.Aeson.Types.ToJSON..=)) (geoIPPolicyDistanceToleranceKm obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("execution_logging" Data.Aeson.Types.ToJSON..=)) (geoIPPolicyExecutionLogging obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("history_login_count" Data.Aeson.Types.ToJSON..=)) (geoIPPolicyHistoryLoginCount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("history_max_distance_km" Data.Aeson.Types.ToJSON..=)) (geoIPPolicyHistoryMaxDistanceKm obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("impossible_tolerance_km" Data.Aeson.Types.ToJSON..=)) (geoIPPolicyImpossibleToleranceKm obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= geoIPPolicyMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= geoIPPolicyName obj] : ["pk" Data.Aeson.Types.ToJSON..= geoIPPolicyPk obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= geoIPPolicyVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= geoIPPolicyVerboseNamePlural obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("asns" Data.Aeson.Types.ToJSON..=)) (geoIPPolicyAsns obj) : ["bound_to" Data.Aeson.Types.ToJSON..= geoIPPolicyBoundTo obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("check_history_distance" Data.Aeson.Types.ToJSON..=)) (geoIPPolicyCheckHistoryDistance obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("check_impossible_travel" Data.Aeson.Types.ToJSON..=)) (geoIPPolicyCheckImpossibleTravel obj) : ["component" Data.Aeson.Types.ToJSON..= geoIPPolicyComponent obj] : ["countries" Data.Aeson.Types.ToJSON..= geoIPPolicyCountries obj] : ["countries_obj" Data.Aeson.Types.ToJSON..= geoIPPolicyCountriesObj obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("distance_tolerance_km" Data.Aeson.Types.ToJSON..=)) (geoIPPolicyDistanceToleranceKm obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("execution_logging" Data.Aeson.Types.ToJSON..=)) (geoIPPolicyExecutionLogging obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("history_login_count" Data.Aeson.Types.ToJSON..=)) (geoIPPolicyHistoryLoginCount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("history_max_distance_km" Data.Aeson.Types.ToJSON..=)) (geoIPPolicyHistoryMaxDistanceKm obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("impossible_tolerance_km" Data.Aeson.Types.ToJSON..=)) (geoIPPolicyImpossibleToleranceKm obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= geoIPPolicyMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= geoIPPolicyName obj] : ["pk" Data.Aeson.Types.ToJSON..= geoIPPolicyPk obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= geoIPPolicyVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= geoIPPolicyVerboseNamePlural obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GeoIPPolicy where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GeoIPPolicy" (\obj -> ((((((((((((((((GHC.Base.pure GeoIPPolicy GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "asns")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "bound_to")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "check_history_distance")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "check_impossible_travel")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "countries")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "countries_obj")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "distance_tolerance_km")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "execution_logging")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "history_login_count")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "history_max_distance_km")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "impossible_tolerance_km")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural"))

-- | Create a new 'GeoIPPolicy' with all required fields.
mkGeoIPPolicy ::
  -- | 'geoIPPolicyBoundTo'
  GHC.Types.Int ->
  -- | 'geoIPPolicyComponent'
  Data.Text.Internal.Text ->
  -- | 'geoIPPolicyCountries'
  [CountryCodeEnum] ->
  -- | 'geoIPPolicyCountriesObj'
  [DetailedCountryField] ->
  -- | 'geoIPPolicyMetaModelName'
  Data.Text.Internal.Text ->
  -- | 'geoIPPolicyName'
  Data.Text.Internal.Text ->
  -- | 'geoIPPolicyPk'
  Data.Text.Internal.Text ->
  -- | 'geoIPPolicyVerboseName'
  Data.Text.Internal.Text ->
  -- | 'geoIPPolicyVerboseNamePlural'
  Data.Text.Internal.Text ->
  GeoIPPolicy
mkGeoIPPolicy geoIPPolicyBoundTo geoIPPolicyComponent geoIPPolicyCountries geoIPPolicyCountriesObj geoIPPolicyMetaModelName geoIPPolicyName geoIPPolicyPk geoIPPolicyVerboseName geoIPPolicyVerboseNamePlural =
  GeoIPPolicy
    { geoIPPolicyAsns = GHC.Maybe.Nothing,
      geoIPPolicyBoundTo = geoIPPolicyBoundTo,
      geoIPPolicyCheckHistoryDistance = GHC.Maybe.Nothing,
      geoIPPolicyCheckImpossibleTravel = GHC.Maybe.Nothing,
      geoIPPolicyComponent = geoIPPolicyComponent,
      geoIPPolicyCountries = geoIPPolicyCountries,
      geoIPPolicyCountriesObj = geoIPPolicyCountriesObj,
      geoIPPolicyDistanceToleranceKm = GHC.Maybe.Nothing,
      geoIPPolicyExecutionLogging = GHC.Maybe.Nothing,
      geoIPPolicyHistoryLoginCount = GHC.Maybe.Nothing,
      geoIPPolicyHistoryMaxDistanceKm = GHC.Maybe.Nothing,
      geoIPPolicyImpossibleToleranceKm = GHC.Maybe.Nothing,
      geoIPPolicyMetaModelName = geoIPPolicyMetaModelName,
      geoIPPolicyName = geoIPPolicyName,
      geoIPPolicyPk = geoIPPolicyPk,
      geoIPPolicyVerboseName = geoIPPolicyVerboseName,
      geoIPPolicyVerboseNamePlural = geoIPPolicyVerboseNamePlural
    }

{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema UserGroup
module AuthentikAPI.Types.UserGroup where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.UserGroup@ in the specification.
--
-- Simplified Group Serializer for user\'s groups
data UserGroup = UserGroup
  { -- | attributes
    userGroupAttributes :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | is_superuser: Users added to this group will be superusers.
    userGroupIsSuperuser :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | name
    userGroupName :: Data.Text.Internal.Text,
    -- | num_pk: Get a numerical, int32 ID for the group
    userGroupNumPk :: GHC.Types.Int,
    -- | parent
    userGroupParent :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | parent_name
    userGroupParentName :: (AuthentikAPI.Common.Nullable Data.Text.Internal.Text),
    -- | pk
    userGroupPk :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON UserGroup where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (userGroupAttributes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_superuser" Data.Aeson.Types.ToJSON..=)) (userGroupIsSuperuser obj) : ["name" Data.Aeson.Types.ToJSON..= userGroupName obj] : ["num_pk" Data.Aeson.Types.ToJSON..= userGroupNumPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("parent" Data.Aeson.Types.ToJSON..=)) (userGroupParent obj) : ["parent_name" Data.Aeson.Types.ToJSON..= userGroupParentName obj] : ["pk" Data.Aeson.Types.ToJSON..= userGroupPk obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (userGroupAttributes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_superuser" Data.Aeson.Types.ToJSON..=)) (userGroupIsSuperuser obj) : ["name" Data.Aeson.Types.ToJSON..= userGroupName obj] : ["num_pk" Data.Aeson.Types.ToJSON..= userGroupNumPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("parent" Data.Aeson.Types.ToJSON..=)) (userGroupParent obj) : ["parent_name" Data.Aeson.Types.ToJSON..= userGroupParentName obj] : ["pk" Data.Aeson.Types.ToJSON..= userGroupPk obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON UserGroup where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "UserGroup" (\obj -> ((((((GHC.Base.pure UserGroup GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "attributes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "is_superuser")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "num_pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "parent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "parent_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk"))

-- | Create a new 'UserGroup' with all required fields.
mkUserGroup ::
  -- | 'userGroupName'
  Data.Text.Internal.Text ->
  -- | 'userGroupNumPk'
  GHC.Types.Int ->
  -- | 'userGroupParentName'
  AuthentikAPI.Common.Nullable Data.Text.Internal.Text ->
  -- | 'userGroupPk'
  Data.Text.Internal.Text ->
  UserGroup
mkUserGroup userGroupName userGroupNumPk userGroupParentName userGroupPk =
  UserGroup
    { userGroupAttributes = GHC.Maybe.Nothing,
      userGroupIsSuperuser = GHC.Maybe.Nothing,
      userGroupName = userGroupName,
      userGroupNumPk = userGroupNumPk,
      userGroupParent = GHC.Maybe.Nothing,
      userGroupParentName = userGroupParentName,
      userGroupPk = userGroupPk
    }

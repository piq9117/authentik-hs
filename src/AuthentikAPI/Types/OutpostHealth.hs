{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema OutpostHealth
module AuthentikAPI.Types.OutpostHealth where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.OutpostHealth@ in the specification.
--
-- Outpost health status
data OutpostHealth = OutpostHealth
  { -- | build_hash
    outpostHealthBuildHash :: Data.Text.Internal.Text,
    -- | build_hash_should
    outpostHealthBuildHashShould :: Data.Text.Internal.Text,
    -- | fips_enabled: Get FIPS enabled
    outpostHealthFipsEnabled :: (AuthentikAPI.Common.Nullable GHC.Types.Bool),
    -- | golang_version
    outpostHealthGolangVersion :: Data.Text.Internal.Text,
    -- | hostname
    outpostHealthHostname :: Data.Text.Internal.Text,
    -- | last_seen
    outpostHealthLastSeen :: Data.Text.Internal.Text,
    -- | openssl_enabled
    outpostHealthOpensslEnabled :: GHC.Types.Bool,
    -- | openssl_version
    outpostHealthOpensslVersion :: Data.Text.Internal.Text,
    -- | uid
    outpostHealthUid :: Data.Text.Internal.Text,
    -- | version
    outpostHealthVersion :: Data.Text.Internal.Text,
    -- | version_outdated
    outpostHealthVersionOutdated :: GHC.Types.Bool,
    -- | version_should
    outpostHealthVersionShould :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON OutpostHealth where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["build_hash" Data.Aeson.Types.ToJSON..= outpostHealthBuildHash obj] : ["build_hash_should" Data.Aeson.Types.ToJSON..= outpostHealthBuildHashShould obj] : ["fips_enabled" Data.Aeson.Types.ToJSON..= outpostHealthFipsEnabled obj] : ["golang_version" Data.Aeson.Types.ToJSON..= outpostHealthGolangVersion obj] : ["hostname" Data.Aeson.Types.ToJSON..= outpostHealthHostname obj] : ["last_seen" Data.Aeson.Types.ToJSON..= outpostHealthLastSeen obj] : ["openssl_enabled" Data.Aeson.Types.ToJSON..= outpostHealthOpensslEnabled obj] : ["openssl_version" Data.Aeson.Types.ToJSON..= outpostHealthOpensslVersion obj] : ["uid" Data.Aeson.Types.ToJSON..= outpostHealthUid obj] : ["version" Data.Aeson.Types.ToJSON..= outpostHealthVersion obj] : ["version_outdated" Data.Aeson.Types.ToJSON..= outpostHealthVersionOutdated obj] : ["version_should" Data.Aeson.Types.ToJSON..= outpostHealthVersionShould obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["build_hash" Data.Aeson.Types.ToJSON..= outpostHealthBuildHash obj] : ["build_hash_should" Data.Aeson.Types.ToJSON..= outpostHealthBuildHashShould obj] : ["fips_enabled" Data.Aeson.Types.ToJSON..= outpostHealthFipsEnabled obj] : ["golang_version" Data.Aeson.Types.ToJSON..= outpostHealthGolangVersion obj] : ["hostname" Data.Aeson.Types.ToJSON..= outpostHealthHostname obj] : ["last_seen" Data.Aeson.Types.ToJSON..= outpostHealthLastSeen obj] : ["openssl_enabled" Data.Aeson.Types.ToJSON..= outpostHealthOpensslEnabled obj] : ["openssl_version" Data.Aeson.Types.ToJSON..= outpostHealthOpensslVersion obj] : ["uid" Data.Aeson.Types.ToJSON..= outpostHealthUid obj] : ["version" Data.Aeson.Types.ToJSON..= outpostHealthVersion obj] : ["version_outdated" Data.Aeson.Types.ToJSON..= outpostHealthVersionOutdated obj] : ["version_should" Data.Aeson.Types.ToJSON..= outpostHealthVersionShould obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON OutpostHealth where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "OutpostHealth" (\obj -> (((((((((((GHC.Base.pure OutpostHealth GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "build_hash")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "build_hash_should")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "fips_enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "golang_version")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "hostname")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "last_seen")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "openssl_enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "openssl_version")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "uid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "version")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "version_outdated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "version_should"))

-- | Create a new 'OutpostHealth' with all required fields.
mkOutpostHealth ::
  -- | 'outpostHealthBuildHash'
  Data.Text.Internal.Text ->
  -- | 'outpostHealthBuildHashShould'
  Data.Text.Internal.Text ->
  -- | 'outpostHealthFipsEnabled'
  AuthentikAPI.Common.Nullable GHC.Types.Bool ->
  -- | 'outpostHealthGolangVersion'
  Data.Text.Internal.Text ->
  -- | 'outpostHealthHostname'
  Data.Text.Internal.Text ->
  -- | 'outpostHealthLastSeen'
  Data.Text.Internal.Text ->
  -- | 'outpostHealthOpensslEnabled'
  GHC.Types.Bool ->
  -- | 'outpostHealthOpensslVersion'
  Data.Text.Internal.Text ->
  -- | 'outpostHealthUid'
  Data.Text.Internal.Text ->
  -- | 'outpostHealthVersion'
  Data.Text.Internal.Text ->
  -- | 'outpostHealthVersionOutdated'
  GHC.Types.Bool ->
  -- | 'outpostHealthVersionShould'
  Data.Text.Internal.Text ->
  OutpostHealth
mkOutpostHealth outpostHealthBuildHash outpostHealthBuildHashShould outpostHealthFipsEnabled outpostHealthGolangVersion outpostHealthHostname outpostHealthLastSeen outpostHealthOpensslEnabled outpostHealthOpensslVersion outpostHealthUid outpostHealthVersion outpostHealthVersionOutdated outpostHealthVersionShould =
  OutpostHealth
    { outpostHealthBuildHash = outpostHealthBuildHash,
      outpostHealthBuildHashShould = outpostHealthBuildHashShould,
      outpostHealthFipsEnabled = outpostHealthFipsEnabled,
      outpostHealthGolangVersion = outpostHealthGolangVersion,
      outpostHealthHostname = outpostHealthHostname,
      outpostHealthLastSeen = outpostHealthLastSeen,
      outpostHealthOpensslEnabled = outpostHealthOpensslEnabled,
      outpostHealthOpensslVersion = outpostHealthOpensslVersion,
      outpostHealthUid = outpostHealthUid,
      outpostHealthVersion = outpostHealthVersion,
      outpostHealthVersionOutdated = outpostHealthVersionOutdated,
      outpostHealthVersionShould = outpostHealthVersionShould
    }

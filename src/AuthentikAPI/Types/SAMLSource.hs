{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema SAMLSource
module AuthentikAPI.Types.SAMLSource where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.BindingTypeEnum
import {-# SOURCE #-} AuthentikAPI.Types.DigestAlgorithmEnum
import {-# SOURCE #-} AuthentikAPI.Types.PolicyEngineMode
import {-# SOURCE #-} AuthentikAPI.Types.SignatureAlgorithmEnum
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.SAMLSource@ in the specification.
--
-- SAMLSource Serializer
data SAMLSource = SAMLSource
  { -- | allow_idp_initiated: Allows authentication flows initiated by the IdP. This can be a security risk, as no validation of the request ID is done.
    sAMLSourceAllowIdpInitiated :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | authentication_flow: Flow to use when authenticating existing users.
    sAMLSourceAuthenticationFlow :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | binding_type
    sAMLSourceBindingType :: (GHC.Maybe.Maybe BindingTypeEnum),
    -- | component: Get object component so that we know how to edit the object
    sAMLSourceComponent :: Data.Text.Internal.Text,
    -- | digest_algorithm
    sAMLSourceDigestAlgorithm :: (GHC.Maybe.Maybe DigestAlgorithmEnum),
    -- | enabled
    sAMLSourceEnabled :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | encryption_kp: When selected, incoming assertions are encrypted by the IdP using the public key of the encryption keypair. The assertion is decrypted by the SP using the the private key.
    sAMLSourceEncryptionKp :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | enrollment_flow: Flow to use when enrolling new users.
    sAMLSourceEnrollmentFlow :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | group_matching_mode: How the source determines if an existing group should be used or a new group created.
    sAMLSourceGroupMatchingMode :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | group_property_mappings
    sAMLSourceGroupPropertyMappings :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | icon
    sAMLSourceIcon :: Data.Text.Internal.Text,
    -- | issuer: Also known as Entity ID. Defaults the Metadata URL.
    sAMLSourceIssuer :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | managed: Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
    sAMLSourceManaged :: (AuthentikAPI.Common.Nullable Data.Text.Internal.Text),
    -- | meta_model_name: Return internal model name
    sAMLSourceMetaModelName :: Data.Text.Internal.Text,
    -- | name: Source\'s display Name.
    sAMLSourceName :: Data.Text.Internal.Text,
    -- | name_id_policy: NameID Policy sent to the IdP. Can be unset, in which case no Policy is sent.
    sAMLSourceNameIdPolicy :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | pk
    sAMLSourcePk :: Data.Text.Internal.Text,
    -- | policy_engine_mode
    sAMLSourcePolicyEngineMode :: (GHC.Maybe.Maybe PolicyEngineMode),
    -- | pre_authentication_flow: Flow used before authentication.
    sAMLSourcePreAuthenticationFlow :: Data.Text.Internal.Text,
    -- | signature_algorithm
    sAMLSourceSignatureAlgorithm :: (GHC.Maybe.Maybe SignatureAlgorithmEnum),
    -- | signing_kp: Keypair used to sign outgoing Responses going to the Identity Provider.
    sAMLSourceSigningKp :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | slo_url: Optional URL if your IDP supports Single-Logout.
    sAMLSourceSloUrl :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | slug: Internal source name, used in URLs.
    --
    -- Constraints:
    --
    -- * Maximum length of 50
    -- * Must match pattern \'^[-a-zA-Z0-9_]+\$\'
    sAMLSourceSlug :: Data.Text.Internal.Text,
    -- | sso_url: URL that the initial Login request is sent to.
    sAMLSourceSsoUrl :: Data.Text.Internal.Text,
    -- | temporary_user_delete_after: Time offset when temporary users should be deleted. This only applies if your IDP uses the NameID Format \'transient\', and the user doesn\'t log out manually. (Format: hours=1;minutes=2;seconds=3).
    sAMLSourceTemporaryUserDeleteAfter :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | user_matching_mode: How the source determines if an existing user should be authenticated or a new user enrolled.
    sAMLSourceUserMatchingMode :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | user_path_template
    sAMLSourceUserPathTemplate :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | user_property_mappings
    sAMLSourceUserPropertyMappings :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | verbose_name: Return object\'s verbose_name
    sAMLSourceVerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    sAMLSourceVerboseNamePlural :: Data.Text.Internal.Text,
    -- | verification_kp: When selected, incoming assertion\'s Signatures will be validated against this certificate. To allow unsigned Requests, leave on default.
    sAMLSourceVerificationKp :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SAMLSource where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allow_idp_initiated" Data.Aeson.Types.ToJSON..=)) (sAMLSourceAllowIdpInitiated obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication_flow" Data.Aeson.Types.ToJSON..=)) (sAMLSourceAuthenticationFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("binding_type" Data.Aeson.Types.ToJSON..=)) (sAMLSourceBindingType obj) : ["component" Data.Aeson.Types.ToJSON..= sAMLSourceComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("digest_algorithm" Data.Aeson.Types.ToJSON..=)) (sAMLSourceDigestAlgorithm obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enabled" Data.Aeson.Types.ToJSON..=)) (sAMLSourceEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("encryption_kp" Data.Aeson.Types.ToJSON..=)) (sAMLSourceEncryptionKp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enrollment_flow" Data.Aeson.Types.ToJSON..=)) (sAMLSourceEnrollmentFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("group_matching_mode" Data.Aeson.Types.ToJSON..=)) (sAMLSourceGroupMatchingMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("group_property_mappings" Data.Aeson.Types.ToJSON..=)) (sAMLSourceGroupPropertyMappings obj) : ["icon" Data.Aeson.Types.ToJSON..= sAMLSourceIcon obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("issuer" Data.Aeson.Types.ToJSON..=)) (sAMLSourceIssuer obj) : ["managed" Data.Aeson.Types.ToJSON..= sAMLSourceManaged obj] : ["meta_model_name" Data.Aeson.Types.ToJSON..= sAMLSourceMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= sAMLSourceName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name_id_policy" Data.Aeson.Types.ToJSON..=)) (sAMLSourceNameIdPolicy obj) : ["pk" Data.Aeson.Types.ToJSON..= sAMLSourcePk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("policy_engine_mode" Data.Aeson.Types.ToJSON..=)) (sAMLSourcePolicyEngineMode obj) : ["pre_authentication_flow" Data.Aeson.Types.ToJSON..= sAMLSourcePreAuthenticationFlow obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("signature_algorithm" Data.Aeson.Types.ToJSON..=)) (sAMLSourceSignatureAlgorithm obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("signing_kp" Data.Aeson.Types.ToJSON..=)) (sAMLSourceSigningKp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("slo_url" Data.Aeson.Types.ToJSON..=)) (sAMLSourceSloUrl obj) : ["slug" Data.Aeson.Types.ToJSON..= sAMLSourceSlug obj] : ["sso_url" Data.Aeson.Types.ToJSON..= sAMLSourceSsoUrl obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("temporary_user_delete_after" Data.Aeson.Types.ToJSON..=)) (sAMLSourceTemporaryUserDeleteAfter obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_matching_mode" Data.Aeson.Types.ToJSON..=)) (sAMLSourceUserMatchingMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_path_template" Data.Aeson.Types.ToJSON..=)) (sAMLSourceUserPathTemplate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_property_mappings" Data.Aeson.Types.ToJSON..=)) (sAMLSourceUserPropertyMappings obj) : ["verbose_name" Data.Aeson.Types.ToJSON..= sAMLSourceVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= sAMLSourceVerboseNamePlural obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_kp" Data.Aeson.Types.ToJSON..=)) (sAMLSourceVerificationKp obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allow_idp_initiated" Data.Aeson.Types.ToJSON..=)) (sAMLSourceAllowIdpInitiated obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication_flow" Data.Aeson.Types.ToJSON..=)) (sAMLSourceAuthenticationFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("binding_type" Data.Aeson.Types.ToJSON..=)) (sAMLSourceBindingType obj) : ["component" Data.Aeson.Types.ToJSON..= sAMLSourceComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("digest_algorithm" Data.Aeson.Types.ToJSON..=)) (sAMLSourceDigestAlgorithm obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enabled" Data.Aeson.Types.ToJSON..=)) (sAMLSourceEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("encryption_kp" Data.Aeson.Types.ToJSON..=)) (sAMLSourceEncryptionKp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enrollment_flow" Data.Aeson.Types.ToJSON..=)) (sAMLSourceEnrollmentFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("group_matching_mode" Data.Aeson.Types.ToJSON..=)) (sAMLSourceGroupMatchingMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("group_property_mappings" Data.Aeson.Types.ToJSON..=)) (sAMLSourceGroupPropertyMappings obj) : ["icon" Data.Aeson.Types.ToJSON..= sAMLSourceIcon obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("issuer" Data.Aeson.Types.ToJSON..=)) (sAMLSourceIssuer obj) : ["managed" Data.Aeson.Types.ToJSON..= sAMLSourceManaged obj] : ["meta_model_name" Data.Aeson.Types.ToJSON..= sAMLSourceMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= sAMLSourceName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name_id_policy" Data.Aeson.Types.ToJSON..=)) (sAMLSourceNameIdPolicy obj) : ["pk" Data.Aeson.Types.ToJSON..= sAMLSourcePk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("policy_engine_mode" Data.Aeson.Types.ToJSON..=)) (sAMLSourcePolicyEngineMode obj) : ["pre_authentication_flow" Data.Aeson.Types.ToJSON..= sAMLSourcePreAuthenticationFlow obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("signature_algorithm" Data.Aeson.Types.ToJSON..=)) (sAMLSourceSignatureAlgorithm obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("signing_kp" Data.Aeson.Types.ToJSON..=)) (sAMLSourceSigningKp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("slo_url" Data.Aeson.Types.ToJSON..=)) (sAMLSourceSloUrl obj) : ["slug" Data.Aeson.Types.ToJSON..= sAMLSourceSlug obj] : ["sso_url" Data.Aeson.Types.ToJSON..= sAMLSourceSsoUrl obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("temporary_user_delete_after" Data.Aeson.Types.ToJSON..=)) (sAMLSourceTemporaryUserDeleteAfter obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_matching_mode" Data.Aeson.Types.ToJSON..=)) (sAMLSourceUserMatchingMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_path_template" Data.Aeson.Types.ToJSON..=)) (sAMLSourceUserPathTemplate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_property_mappings" Data.Aeson.Types.ToJSON..=)) (sAMLSourceUserPropertyMappings obj) : ["verbose_name" Data.Aeson.Types.ToJSON..= sAMLSourceVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= sAMLSourceVerboseNamePlural obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_kp" Data.Aeson.Types.ToJSON..=)) (sAMLSourceVerificationKp obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SAMLSource where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SAMLSource" (\obj -> ((((((((((((((((((((((((((((((GHC.Base.pure SAMLSource GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "allow_idp_initiated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "authentication_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "binding_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "digest_algorithm")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "encryption_kp")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "enrollment_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "group_matching_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "group_property_mappings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "icon")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "issuer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "managed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "name_id_policy")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "policy_engine_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pre_authentication_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "signature_algorithm")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "signing_kp")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "slo_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "slug")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "sso_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "temporary_user_delete_after")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "user_matching_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "user_path_template")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "user_property_mappings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_kp"))

-- | Create a new 'SAMLSource' with all required fields.
mkSAMLSource ::
  -- | 'sAMLSourceComponent'
  Data.Text.Internal.Text ->
  -- | 'sAMLSourceIcon'
  Data.Text.Internal.Text ->
  -- | 'sAMLSourceManaged'
  AuthentikAPI.Common.Nullable Data.Text.Internal.Text ->
  -- | 'sAMLSourceMetaModelName'
  Data.Text.Internal.Text ->
  -- | 'sAMLSourceName'
  Data.Text.Internal.Text ->
  -- | 'sAMLSourcePk'
  Data.Text.Internal.Text ->
  -- | 'sAMLSourcePreAuthenticationFlow'
  Data.Text.Internal.Text ->
  -- | 'sAMLSourceSlug'
  Data.Text.Internal.Text ->
  -- | 'sAMLSourceSsoUrl'
  Data.Text.Internal.Text ->
  -- | 'sAMLSourceVerboseName'
  Data.Text.Internal.Text ->
  -- | 'sAMLSourceVerboseNamePlural'
  Data.Text.Internal.Text ->
  SAMLSource
mkSAMLSource sAMLSourceComponent sAMLSourceIcon sAMLSourceManaged sAMLSourceMetaModelName sAMLSourceName sAMLSourcePk sAMLSourcePreAuthenticationFlow sAMLSourceSlug sAMLSourceSsoUrl sAMLSourceVerboseName sAMLSourceVerboseNamePlural =
  SAMLSource
    { sAMLSourceAllowIdpInitiated = GHC.Maybe.Nothing,
      sAMLSourceAuthenticationFlow = GHC.Maybe.Nothing,
      sAMLSourceBindingType = GHC.Maybe.Nothing,
      sAMLSourceComponent = sAMLSourceComponent,
      sAMLSourceDigestAlgorithm = GHC.Maybe.Nothing,
      sAMLSourceEnabled = GHC.Maybe.Nothing,
      sAMLSourceEncryptionKp = GHC.Maybe.Nothing,
      sAMLSourceEnrollmentFlow = GHC.Maybe.Nothing,
      sAMLSourceGroupMatchingMode = GHC.Maybe.Nothing,
      sAMLSourceGroupPropertyMappings = GHC.Maybe.Nothing,
      sAMLSourceIcon = sAMLSourceIcon,
      sAMLSourceIssuer = GHC.Maybe.Nothing,
      sAMLSourceManaged = sAMLSourceManaged,
      sAMLSourceMetaModelName = sAMLSourceMetaModelName,
      sAMLSourceName = sAMLSourceName,
      sAMLSourceNameIdPolicy = GHC.Maybe.Nothing,
      sAMLSourcePk = sAMLSourcePk,
      sAMLSourcePolicyEngineMode = GHC.Maybe.Nothing,
      sAMLSourcePreAuthenticationFlow = sAMLSourcePreAuthenticationFlow,
      sAMLSourceSignatureAlgorithm = GHC.Maybe.Nothing,
      sAMLSourceSigningKp = GHC.Maybe.Nothing,
      sAMLSourceSloUrl = GHC.Maybe.Nothing,
      sAMLSourceSlug = sAMLSourceSlug,
      sAMLSourceSsoUrl = sAMLSourceSsoUrl,
      sAMLSourceTemporaryUserDeleteAfter = GHC.Maybe.Nothing,
      sAMLSourceUserMatchingMode = GHC.Maybe.Nothing,
      sAMLSourceUserPathTemplate = GHC.Maybe.Nothing,
      sAMLSourceUserPropertyMappings = GHC.Maybe.Nothing,
      sAMLSourceVerboseName = sAMLSourceVerboseName,
      sAMLSourceVerboseNamePlural = sAMLSourceVerboseNamePlural,
      sAMLSourceVerificationKp = GHC.Maybe.Nothing
    }

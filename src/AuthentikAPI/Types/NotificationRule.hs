{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema NotificationRule
module AuthentikAPI.Types.NotificationRule where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.Group
import {-# SOURCE #-} AuthentikAPI.Types.GroupMember
import {-# SOURCE #-} AuthentikAPI.Types.Role
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.NotificationRule@ in the specification.
--
-- NotificationRule Serializer
data NotificationRule = NotificationRule
  { -- | group: Define which group of users this notification should be sent and shown to. If left empty, Notification won\'t ben sent.
    notificationRuleGroup :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | group_obj
    notificationRuleGroupObj :: NotificationRuleGroupObj',
    -- | name
    notificationRuleName :: Data.Text.Internal.Text,
    -- | pk
    notificationRulePk :: Data.Text.Internal.Text,
    -- | severity: Controls which severity level the created notifications will have.
    notificationRuleSeverity :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | transports: Select which transports should be used to notify the user. If none are selected, the notification will only be shown in the authentik UI.
    notificationRuleTransports :: (GHC.Maybe.Maybe [Data.Text.Internal.Text])
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON NotificationRule where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("group" Data.Aeson.Types.ToJSON..=)) (notificationRuleGroup obj) : ["group_obj" Data.Aeson.Types.ToJSON..= notificationRuleGroupObj obj] : ["name" Data.Aeson.Types.ToJSON..= notificationRuleName obj] : ["pk" Data.Aeson.Types.ToJSON..= notificationRulePk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("severity" Data.Aeson.Types.ToJSON..=)) (notificationRuleSeverity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transports" Data.Aeson.Types.ToJSON..=)) (notificationRuleTransports obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("group" Data.Aeson.Types.ToJSON..=)) (notificationRuleGroup obj) : ["group_obj" Data.Aeson.Types.ToJSON..= notificationRuleGroupObj obj] : ["name" Data.Aeson.Types.ToJSON..= notificationRuleName obj] : ["pk" Data.Aeson.Types.ToJSON..= notificationRulePk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("severity" Data.Aeson.Types.ToJSON..=)) (notificationRuleSeverity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transports" Data.Aeson.Types.ToJSON..=)) (notificationRuleTransports obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON NotificationRule where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "NotificationRule" (\obj -> (((((GHC.Base.pure NotificationRule GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "group")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "group_obj")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "severity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "transports"))

-- | Create a new 'NotificationRule' with all required fields.
mkNotificationRule ::
  -- | 'notificationRuleGroupObj'
  NotificationRuleGroupObj' ->
  -- | 'notificationRuleName'
  Data.Text.Internal.Text ->
  -- | 'notificationRulePk'
  Data.Text.Internal.Text ->
  NotificationRule
mkNotificationRule notificationRuleGroupObj notificationRuleName notificationRulePk =
  NotificationRule
    { notificationRuleGroup = GHC.Maybe.Nothing,
      notificationRuleGroupObj = notificationRuleGroupObj,
      notificationRuleName = notificationRuleName,
      notificationRulePk = notificationRulePk,
      notificationRuleSeverity = GHC.Maybe.Nothing,
      notificationRuleTransports = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.NotificationRule.properties.group_obj.allOf@ in the specification.
data NotificationRuleGroupObj' = NotificationRuleGroupObj'
  { -- | attributes
    notificationRuleGroupObj'Attributes :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | is_superuser: Users added to this group will be superusers.
    notificationRuleGroupObj'IsSuperuser :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | name
    notificationRuleGroupObj'Name :: Data.Text.Internal.Text,
    -- | num_pk
    notificationRuleGroupObj'NumPk :: GHC.Types.Int,
    -- | parent
    notificationRuleGroupObj'Parent :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | parent_name
    notificationRuleGroupObj'ParentName :: (AuthentikAPI.Common.Nullable Data.Text.Internal.Text),
    -- | pk
    notificationRuleGroupObj'Pk :: Data.Text.Internal.Text,
    -- | roles
    notificationRuleGroupObj'Roles :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | roles_obj
    notificationRuleGroupObj'RolesObj :: [Role],
    -- | users
    notificationRuleGroupObj'Users :: (GHC.Maybe.Maybe [GHC.Types.Int]),
    -- | users_obj
    notificationRuleGroupObj'UsersObj :: (AuthentikAPI.Common.Nullable [GroupMember])
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON NotificationRuleGroupObj' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (notificationRuleGroupObj'Attributes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_superuser" Data.Aeson.Types.ToJSON..=)) (notificationRuleGroupObj'IsSuperuser obj) : ["name" Data.Aeson.Types.ToJSON..= notificationRuleGroupObj'Name obj] : ["num_pk" Data.Aeson.Types.ToJSON..= notificationRuleGroupObj'NumPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("parent" Data.Aeson.Types.ToJSON..=)) (notificationRuleGroupObj'Parent obj) : ["parent_name" Data.Aeson.Types.ToJSON..= notificationRuleGroupObj'ParentName obj] : ["pk" Data.Aeson.Types.ToJSON..= notificationRuleGroupObj'Pk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("roles" Data.Aeson.Types.ToJSON..=)) (notificationRuleGroupObj'Roles obj) : ["roles_obj" Data.Aeson.Types.ToJSON..= notificationRuleGroupObj'RolesObj obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("users" Data.Aeson.Types.ToJSON..=)) (notificationRuleGroupObj'Users obj) : ["users_obj" Data.Aeson.Types.ToJSON..= notificationRuleGroupObj'UsersObj obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (notificationRuleGroupObj'Attributes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_superuser" Data.Aeson.Types.ToJSON..=)) (notificationRuleGroupObj'IsSuperuser obj) : ["name" Data.Aeson.Types.ToJSON..= notificationRuleGroupObj'Name obj] : ["num_pk" Data.Aeson.Types.ToJSON..= notificationRuleGroupObj'NumPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("parent" Data.Aeson.Types.ToJSON..=)) (notificationRuleGroupObj'Parent obj) : ["parent_name" Data.Aeson.Types.ToJSON..= notificationRuleGroupObj'ParentName obj] : ["pk" Data.Aeson.Types.ToJSON..= notificationRuleGroupObj'Pk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("roles" Data.Aeson.Types.ToJSON..=)) (notificationRuleGroupObj'Roles obj) : ["roles_obj" Data.Aeson.Types.ToJSON..= notificationRuleGroupObj'RolesObj obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("users" Data.Aeson.Types.ToJSON..=)) (notificationRuleGroupObj'Users obj) : ["users_obj" Data.Aeson.Types.ToJSON..= notificationRuleGroupObj'UsersObj obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON NotificationRuleGroupObj' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "NotificationRuleGroupObj'" (\obj -> ((((((((((GHC.Base.pure NotificationRuleGroupObj' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "attributes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "is_superuser")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "num_pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "parent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "parent_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "roles")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "roles_obj")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "users")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "users_obj"))

-- | Create a new 'NotificationRuleGroupObj'' with all required fields.
mkNotificationRuleGroupObj' ::
  -- | 'notificationRuleGroupObj'Name'
  Data.Text.Internal.Text ->
  -- | 'notificationRuleGroupObj'NumPk'
  GHC.Types.Int ->
  -- | 'notificationRuleGroupObj'ParentName'
  AuthentikAPI.Common.Nullable Data.Text.Internal.Text ->
  -- | 'notificationRuleGroupObj'Pk'
  Data.Text.Internal.Text ->
  -- | 'notificationRuleGroupObj'RolesObj'
  [Role] ->
  -- | 'notificationRuleGroupObj'UsersObj'
  AuthentikAPI.Common.Nullable [GroupMember] ->
  NotificationRuleGroupObj'
mkNotificationRuleGroupObj' notificationRuleGroupObj'Name notificationRuleGroupObj'NumPk notificationRuleGroupObj'ParentName notificationRuleGroupObj'Pk notificationRuleGroupObj'RolesObj notificationRuleGroupObj'UsersObj =
  NotificationRuleGroupObj'
    { notificationRuleGroupObj'Attributes = GHC.Maybe.Nothing,
      notificationRuleGroupObj'IsSuperuser = GHC.Maybe.Nothing,
      notificationRuleGroupObj'Name = notificationRuleGroupObj'Name,
      notificationRuleGroupObj'NumPk = notificationRuleGroupObj'NumPk,
      notificationRuleGroupObj'Parent = GHC.Maybe.Nothing,
      notificationRuleGroupObj'ParentName = notificationRuleGroupObj'ParentName,
      notificationRuleGroupObj'Pk = notificationRuleGroupObj'Pk,
      notificationRuleGroupObj'Roles = GHC.Maybe.Nothing,
      notificationRuleGroupObj'RolesObj = notificationRuleGroupObj'RolesObj,
      notificationRuleGroupObj'Users = GHC.Maybe.Nothing,
      notificationRuleGroupObj'UsersObj = notificationRuleGroupObj'UsersObj
    }

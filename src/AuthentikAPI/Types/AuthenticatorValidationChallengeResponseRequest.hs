{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema AuthenticatorValidationChallengeResponseRequest
module AuthentikAPI.Types.AuthenticatorValidationChallengeResponseRequest where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.DeviceChallengeRequest
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.AuthenticatorValidationChallengeResponseRequest@ in the specification.
--
-- Challenge used for Code-based and WebAuthn authenticators
data AuthenticatorValidationChallengeResponseRequest = AuthenticatorValidationChallengeResponseRequest
  { -- | code
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    authenticatorValidationChallengeResponseRequestCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | component
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    authenticatorValidationChallengeResponseRequestComponent :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | duo
    authenticatorValidationChallengeResponseRequestDuo :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | selected_challenge: Single device challenge
    authenticatorValidationChallengeResponseRequestSelectedChallenge :: (GHC.Maybe.Maybe DeviceChallengeRequest),
    -- | selected_stage
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    authenticatorValidationChallengeResponseRequestSelectedStage :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | webauthn
    authenticatorValidationChallengeResponseRequestWebauthn :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON AuthenticatorValidationChallengeResponseRequest where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("code" Data.Aeson.Types.ToJSON..=)) (authenticatorValidationChallengeResponseRequestCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("component" Data.Aeson.Types.ToJSON..=)) (authenticatorValidationChallengeResponseRequestComponent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("duo" Data.Aeson.Types.ToJSON..=)) (authenticatorValidationChallengeResponseRequestDuo obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("selected_challenge" Data.Aeson.Types.ToJSON..=)) (authenticatorValidationChallengeResponseRequestSelectedChallenge obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("selected_stage" Data.Aeson.Types.ToJSON..=)) (authenticatorValidationChallengeResponseRequestSelectedStage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("webauthn" Data.Aeson.Types.ToJSON..=)) (authenticatorValidationChallengeResponseRequestWebauthn obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("code" Data.Aeson.Types.ToJSON..=)) (authenticatorValidationChallengeResponseRequestCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("component" Data.Aeson.Types.ToJSON..=)) (authenticatorValidationChallengeResponseRequestComponent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("duo" Data.Aeson.Types.ToJSON..=)) (authenticatorValidationChallengeResponseRequestDuo obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("selected_challenge" Data.Aeson.Types.ToJSON..=)) (authenticatorValidationChallengeResponseRequestSelectedChallenge obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("selected_stage" Data.Aeson.Types.ToJSON..=)) (authenticatorValidationChallengeResponseRequestSelectedStage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("webauthn" Data.Aeson.Types.ToJSON..=)) (authenticatorValidationChallengeResponseRequestWebauthn obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON AuthenticatorValidationChallengeResponseRequest where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "AuthenticatorValidationChallengeResponseRequest" (\obj -> (((((GHC.Base.pure AuthenticatorValidationChallengeResponseRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "duo")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "selected_challenge")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "selected_stage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "webauthn"))

-- | Create a new 'AuthenticatorValidationChallengeResponseRequest' with all required fields.
mkAuthenticatorValidationChallengeResponseRequest :: AuthenticatorValidationChallengeResponseRequest
mkAuthenticatorValidationChallengeResponseRequest =
  AuthenticatorValidationChallengeResponseRequest
    { authenticatorValidationChallengeResponseRequestCode = GHC.Maybe.Nothing,
      authenticatorValidationChallengeResponseRequestComponent = GHC.Maybe.Nothing,
      authenticatorValidationChallengeResponseRequestDuo = GHC.Maybe.Nothing,
      authenticatorValidationChallengeResponseRequestSelectedChallenge = GHC.Maybe.Nothing,
      authenticatorValidationChallengeResponseRequestSelectedStage = GHC.Maybe.Nothing,
      authenticatorValidationChallengeResponseRequestWebauthn = GHC.Maybe.Nothing
    }

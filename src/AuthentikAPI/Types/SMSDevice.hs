{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema SMSDevice
module AuthentikAPI.Types.SMSDevice where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.GroupMember
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.SMSDevice@ in the specification.
--
-- Serializer for sms authenticator devices
data SMSDevice = SMSDevice
  { -- | name: The human-readable name of this device.
    --
    -- Constraints:
    --
    -- * Maximum length of 64
    sMSDeviceName :: Data.Text.Internal.Text,
    -- | phone_number
    sMSDevicePhoneNumber :: Data.Text.Internal.Text,
    -- | pk
    sMSDevicePk :: GHC.Types.Int,
    -- | user
    sMSDeviceUser :: SMSDeviceUser'
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SMSDevice where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["name" Data.Aeson.Types.ToJSON..= sMSDeviceName obj] : ["phone_number" Data.Aeson.Types.ToJSON..= sMSDevicePhoneNumber obj] : ["pk" Data.Aeson.Types.ToJSON..= sMSDevicePk obj] : ["user" Data.Aeson.Types.ToJSON..= sMSDeviceUser obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["name" Data.Aeson.Types.ToJSON..= sMSDeviceName obj] : ["phone_number" Data.Aeson.Types.ToJSON..= sMSDevicePhoneNumber obj] : ["pk" Data.Aeson.Types.ToJSON..= sMSDevicePk obj] : ["user" Data.Aeson.Types.ToJSON..= sMSDeviceUser obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SMSDevice where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SMSDevice" (\obj -> (((GHC.Base.pure SMSDevice GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "phone_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "user"))

-- | Create a new 'SMSDevice' with all required fields.
mkSMSDevice ::
  -- | 'sMSDeviceName'
  Data.Text.Internal.Text ->
  -- | 'sMSDevicePhoneNumber'
  Data.Text.Internal.Text ->
  -- | 'sMSDevicePk'
  GHC.Types.Int ->
  -- | 'sMSDeviceUser'
  SMSDeviceUser' ->
  SMSDevice
mkSMSDevice sMSDeviceName sMSDevicePhoneNumber sMSDevicePk sMSDeviceUser =
  SMSDevice
    { sMSDeviceName = sMSDeviceName,
      sMSDevicePhoneNumber = sMSDevicePhoneNumber,
      sMSDevicePk = sMSDevicePk,
      sMSDeviceUser = sMSDeviceUser
    }

-- | Defines the object schema located at @components.schemas.SMSDevice.properties.user.allOf@ in the specification.
data SMSDeviceUser' = SMSDeviceUser'
  { -- | attributes
    sMSDeviceUser'Attributes :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | email
    --
    -- Constraints:
    --
    -- * Maximum length of 254
    sMSDeviceUser'Email :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | is_active: Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
    sMSDeviceUser'IsActive :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | last_login
    sMSDeviceUser'LastLogin :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | name: User\'s display name.
    sMSDeviceUser'Name :: Data.Text.Internal.Text,
    -- | pk
    sMSDeviceUser'Pk :: GHC.Types.Int,
    -- | uid
    sMSDeviceUser'Uid :: Data.Text.Internal.Text,
    -- | username: Required. 150 characters or fewer. Letters, digits and \@\/.\/+\/-\/_ only.
    --
    -- Constraints:
    --
    -- * Maximum length of 150
    -- * Must match pattern \'^[\\w.\@+-]+\$\'
    sMSDeviceUser'Username :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SMSDeviceUser' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (sMSDeviceUser'Attributes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (sMSDeviceUser'Email obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_active" Data.Aeson.Types.ToJSON..=)) (sMSDeviceUser'IsActive obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_login" Data.Aeson.Types.ToJSON..=)) (sMSDeviceUser'LastLogin obj) : ["name" Data.Aeson.Types.ToJSON..= sMSDeviceUser'Name obj] : ["pk" Data.Aeson.Types.ToJSON..= sMSDeviceUser'Pk obj] : ["uid" Data.Aeson.Types.ToJSON..= sMSDeviceUser'Uid obj] : ["username" Data.Aeson.Types.ToJSON..= sMSDeviceUser'Username obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (sMSDeviceUser'Attributes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (sMSDeviceUser'Email obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_active" Data.Aeson.Types.ToJSON..=)) (sMSDeviceUser'IsActive obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_login" Data.Aeson.Types.ToJSON..=)) (sMSDeviceUser'LastLogin obj) : ["name" Data.Aeson.Types.ToJSON..= sMSDeviceUser'Name obj] : ["pk" Data.Aeson.Types.ToJSON..= sMSDeviceUser'Pk obj] : ["uid" Data.Aeson.Types.ToJSON..= sMSDeviceUser'Uid obj] : ["username" Data.Aeson.Types.ToJSON..= sMSDeviceUser'Username obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SMSDeviceUser' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SMSDeviceUser'" (\obj -> (((((((GHC.Base.pure SMSDeviceUser' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "attributes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "is_active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "last_login")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "uid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "username"))

-- | Create a new 'SMSDeviceUser'' with all required fields.
mkSMSDeviceUser' ::
  -- | 'sMSDeviceUser'Name'
  Data.Text.Internal.Text ->
  -- | 'sMSDeviceUser'Pk'
  GHC.Types.Int ->
  -- | 'sMSDeviceUser'Uid'
  Data.Text.Internal.Text ->
  -- | 'sMSDeviceUser'Username'
  Data.Text.Internal.Text ->
  SMSDeviceUser'
mkSMSDeviceUser' sMSDeviceUser'Name sMSDeviceUser'Pk sMSDeviceUser'Uid sMSDeviceUser'Username =
  SMSDeviceUser'
    { sMSDeviceUser'Attributes = GHC.Maybe.Nothing,
      sMSDeviceUser'Email = GHC.Maybe.Nothing,
      sMSDeviceUser'IsActive = GHC.Maybe.Nothing,
      sMSDeviceUser'LastLogin = GHC.Maybe.Nothing,
      sMSDeviceUser'Name = sMSDeviceUser'Name,
      sMSDeviceUser'Pk = sMSDeviceUser'Pk,
      sMSDeviceUser'Uid = sMSDeviceUser'Uid,
      sMSDeviceUser'Username = sMSDeviceUser'Username
    }

{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema FlowInspectorPlan
module AuthentikAPI.Types.FlowInspectorPlan where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.FlowSet
import {-# SOURCE #-} AuthentikAPI.Types.FlowStageBinding
import {-# SOURCE #-} AuthentikAPI.Types.PolicyEngineMode
import {-# SOURCE #-} AuthentikAPI.Types.Stage
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.FlowInspectorPlan@ in the specification.
--
-- Serializer for an active FlowPlan
data FlowInspectorPlan = FlowInspectorPlan
  { -- | current_stage
    flowInspectorPlanCurrentStage :: FlowInspectorPlanCurrentStage',
    -- | next_planned_stage
    flowInspectorPlanNextPlannedStage :: FlowInspectorPlanNextPlannedStage',
    -- | plan_context: Get the plan\'s context, sanitized
    flowInspectorPlanPlanContext :: Data.Aeson.Types.Internal.Object,
    -- | session_id: Get a unique session ID
    flowInspectorPlanSessionId :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON FlowInspectorPlan where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["current_stage" Data.Aeson.Types.ToJSON..= flowInspectorPlanCurrentStage obj] : ["next_planned_stage" Data.Aeson.Types.ToJSON..= flowInspectorPlanNextPlannedStage obj] : ["plan_context" Data.Aeson.Types.ToJSON..= flowInspectorPlanPlanContext obj] : ["session_id" Data.Aeson.Types.ToJSON..= flowInspectorPlanSessionId obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["current_stage" Data.Aeson.Types.ToJSON..= flowInspectorPlanCurrentStage obj] : ["next_planned_stage" Data.Aeson.Types.ToJSON..= flowInspectorPlanNextPlannedStage obj] : ["plan_context" Data.Aeson.Types.ToJSON..= flowInspectorPlanPlanContext obj] : ["session_id" Data.Aeson.Types.ToJSON..= flowInspectorPlanSessionId obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON FlowInspectorPlan where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "FlowInspectorPlan" (\obj -> (((GHC.Base.pure FlowInspectorPlan GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "current_stage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "next_planned_stage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "plan_context")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "session_id"))

-- | Create a new 'FlowInspectorPlan' with all required fields.
mkFlowInspectorPlan ::
  -- | 'flowInspectorPlanCurrentStage'
  FlowInspectorPlanCurrentStage' ->
  -- | 'flowInspectorPlanNextPlannedStage'
  FlowInspectorPlanNextPlannedStage' ->
  -- | 'flowInspectorPlanPlanContext'
  Data.Aeson.Types.Internal.Object ->
  -- | 'flowInspectorPlanSessionId'
  Data.Text.Internal.Text ->
  FlowInspectorPlan
mkFlowInspectorPlan flowInspectorPlanCurrentStage flowInspectorPlanNextPlannedStage flowInspectorPlanPlanContext flowInspectorPlanSessionId =
  FlowInspectorPlan
    { flowInspectorPlanCurrentStage = flowInspectorPlanCurrentStage,
      flowInspectorPlanNextPlannedStage = flowInspectorPlanNextPlannedStage,
      flowInspectorPlanPlanContext = flowInspectorPlanPlanContext,
      flowInspectorPlanSessionId = flowInspectorPlanSessionId
    }

-- | Defines the object schema located at @components.schemas.FlowInspectorPlan.properties.current_stage.allOf@ in the specification.
data FlowInspectorPlanCurrentStage' = FlowInspectorPlanCurrentStage'
  { -- | evaluate_on_plan: Evaluate policies during the Flow planning process.
    flowInspectorPlanCurrentStage'EvaluateOnPlan :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | invalid_response_action: Configure how the flow executor should handle an invalid response to a challenge. RETRY returns the error message and a similar challenge to the executor. RESTART restarts the flow from the beginning, and RESTART_WITH_CONTEXT restarts the flow while keeping the current context.
    flowInspectorPlanCurrentStage'InvalidResponseAction :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | order
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of -2.1474836e9
    flowInspectorPlanCurrentStage'Order :: GHC.Types.Int,
    -- | pk
    flowInspectorPlanCurrentStage'Pk :: Data.Text.Internal.Text,
    -- | policy_engine_mode
    flowInspectorPlanCurrentStage'PolicyEngineMode :: (GHC.Maybe.Maybe PolicyEngineMode),
    -- | policybindingmodel_ptr_id
    flowInspectorPlanCurrentStage'PolicybindingmodelPtrId :: Data.Text.Internal.Text,
    -- | re_evaluate_policies: Evaluate policies when the Stage is presented to the user.
    flowInspectorPlanCurrentStage'ReEvaluatePolicies :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | stage
    flowInspectorPlanCurrentStage'Stage :: Data.Text.Internal.Text,
    -- | stage_obj
    flowInspectorPlanCurrentStage'StageObj :: FlowInspectorPlanCurrentStage'StageObj',
    -- | target
    flowInspectorPlanCurrentStage'Target :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON FlowInspectorPlanCurrentStage' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("evaluate_on_plan" Data.Aeson.Types.ToJSON..=)) (flowInspectorPlanCurrentStage'EvaluateOnPlan obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("invalid_response_action" Data.Aeson.Types.ToJSON..=)) (flowInspectorPlanCurrentStage'InvalidResponseAction obj) : ["order" Data.Aeson.Types.ToJSON..= flowInspectorPlanCurrentStage'Order obj] : ["pk" Data.Aeson.Types.ToJSON..= flowInspectorPlanCurrentStage'Pk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("policy_engine_mode" Data.Aeson.Types.ToJSON..=)) (flowInspectorPlanCurrentStage'PolicyEngineMode obj) : ["policybindingmodel_ptr_id" Data.Aeson.Types.ToJSON..= flowInspectorPlanCurrentStage'PolicybindingmodelPtrId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("re_evaluate_policies" Data.Aeson.Types.ToJSON..=)) (flowInspectorPlanCurrentStage'ReEvaluatePolicies obj) : ["stage" Data.Aeson.Types.ToJSON..= flowInspectorPlanCurrentStage'Stage obj] : ["stage_obj" Data.Aeson.Types.ToJSON..= flowInspectorPlanCurrentStage'StageObj obj] : ["target" Data.Aeson.Types.ToJSON..= flowInspectorPlanCurrentStage'Target obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("evaluate_on_plan" Data.Aeson.Types.ToJSON..=)) (flowInspectorPlanCurrentStage'EvaluateOnPlan obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("invalid_response_action" Data.Aeson.Types.ToJSON..=)) (flowInspectorPlanCurrentStage'InvalidResponseAction obj) : ["order" Data.Aeson.Types.ToJSON..= flowInspectorPlanCurrentStage'Order obj] : ["pk" Data.Aeson.Types.ToJSON..= flowInspectorPlanCurrentStage'Pk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("policy_engine_mode" Data.Aeson.Types.ToJSON..=)) (flowInspectorPlanCurrentStage'PolicyEngineMode obj) : ["policybindingmodel_ptr_id" Data.Aeson.Types.ToJSON..= flowInspectorPlanCurrentStage'PolicybindingmodelPtrId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("re_evaluate_policies" Data.Aeson.Types.ToJSON..=)) (flowInspectorPlanCurrentStage'ReEvaluatePolicies obj) : ["stage" Data.Aeson.Types.ToJSON..= flowInspectorPlanCurrentStage'Stage obj] : ["stage_obj" Data.Aeson.Types.ToJSON..= flowInspectorPlanCurrentStage'StageObj obj] : ["target" Data.Aeson.Types.ToJSON..= flowInspectorPlanCurrentStage'Target obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON FlowInspectorPlanCurrentStage' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "FlowInspectorPlanCurrentStage'" (\obj -> (((((((((GHC.Base.pure FlowInspectorPlanCurrentStage' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "evaluate_on_plan")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "invalid_response_action")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "order")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "policy_engine_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "policybindingmodel_ptr_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "re_evaluate_policies")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "stage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "stage_obj")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "target"))

-- | Create a new 'FlowInspectorPlanCurrentStage'' with all required fields.
mkFlowInspectorPlanCurrentStage' ::
  -- | 'flowInspectorPlanCurrentStage'Order'
  GHC.Types.Int ->
  -- | 'flowInspectorPlanCurrentStage'Pk'
  Data.Text.Internal.Text ->
  -- | 'flowInspectorPlanCurrentStage'PolicybindingmodelPtrId'
  Data.Text.Internal.Text ->
  -- | 'flowInspectorPlanCurrentStage'Stage'
  Data.Text.Internal.Text ->
  -- | 'flowInspectorPlanCurrentStage'StageObj'
  FlowInspectorPlanCurrentStage'StageObj' ->
  -- | 'flowInspectorPlanCurrentStage'Target'
  Data.Text.Internal.Text ->
  FlowInspectorPlanCurrentStage'
mkFlowInspectorPlanCurrentStage' flowInspectorPlanCurrentStage'Order flowInspectorPlanCurrentStage'Pk flowInspectorPlanCurrentStage'PolicybindingmodelPtrId flowInspectorPlanCurrentStage'Stage flowInspectorPlanCurrentStage'StageObj flowInspectorPlanCurrentStage'Target =
  FlowInspectorPlanCurrentStage'
    { flowInspectorPlanCurrentStage'EvaluateOnPlan = GHC.Maybe.Nothing,
      flowInspectorPlanCurrentStage'InvalidResponseAction = GHC.Maybe.Nothing,
      flowInspectorPlanCurrentStage'Order = flowInspectorPlanCurrentStage'Order,
      flowInspectorPlanCurrentStage'Pk = flowInspectorPlanCurrentStage'Pk,
      flowInspectorPlanCurrentStage'PolicyEngineMode = GHC.Maybe.Nothing,
      flowInspectorPlanCurrentStage'PolicybindingmodelPtrId = flowInspectorPlanCurrentStage'PolicybindingmodelPtrId,
      flowInspectorPlanCurrentStage'ReEvaluatePolicies = GHC.Maybe.Nothing,
      flowInspectorPlanCurrentStage'Stage = flowInspectorPlanCurrentStage'Stage,
      flowInspectorPlanCurrentStage'StageObj = flowInspectorPlanCurrentStage'StageObj,
      flowInspectorPlanCurrentStage'Target = flowInspectorPlanCurrentStage'Target
    }

-- | Defines the object schema located at @components.schemas.FlowInspectorPlan.properties.current_stage.allOf.properties.stage_obj.allOf@ in the specification.
data FlowInspectorPlanCurrentStage'StageObj' = FlowInspectorPlanCurrentStage'StageObj'
  { -- | component: Get object type so that we know how to edit the object
    flowInspectorPlanCurrentStage'StageObj'Component :: Data.Text.Internal.Text,
    -- | flow_set
    flowInspectorPlanCurrentStage'StageObj'FlowSet :: (GHC.Maybe.Maybe [FlowSet]),
    -- | meta_model_name: Return internal model name
    flowInspectorPlanCurrentStage'StageObj'MetaModelName :: Data.Text.Internal.Text,
    -- | name
    flowInspectorPlanCurrentStage'StageObj'Name :: Data.Text.Internal.Text,
    -- | pk
    flowInspectorPlanCurrentStage'StageObj'Pk :: Data.Text.Internal.Text,
    -- | verbose_name: Return object\'s verbose_name
    flowInspectorPlanCurrentStage'StageObj'VerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    flowInspectorPlanCurrentStage'StageObj'VerboseNamePlural :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON FlowInspectorPlanCurrentStage'StageObj' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["component" Data.Aeson.Types.ToJSON..= flowInspectorPlanCurrentStage'StageObj'Component obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_set" Data.Aeson.Types.ToJSON..=)) (flowInspectorPlanCurrentStage'StageObj'FlowSet obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= flowInspectorPlanCurrentStage'StageObj'MetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= flowInspectorPlanCurrentStage'StageObj'Name obj] : ["pk" Data.Aeson.Types.ToJSON..= flowInspectorPlanCurrentStage'StageObj'Pk obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= flowInspectorPlanCurrentStage'StageObj'VerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= flowInspectorPlanCurrentStage'StageObj'VerboseNamePlural obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["component" Data.Aeson.Types.ToJSON..= flowInspectorPlanCurrentStage'StageObj'Component obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_set" Data.Aeson.Types.ToJSON..=)) (flowInspectorPlanCurrentStage'StageObj'FlowSet obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= flowInspectorPlanCurrentStage'StageObj'MetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= flowInspectorPlanCurrentStage'StageObj'Name obj] : ["pk" Data.Aeson.Types.ToJSON..= flowInspectorPlanCurrentStage'StageObj'Pk obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= flowInspectorPlanCurrentStage'StageObj'VerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= flowInspectorPlanCurrentStage'StageObj'VerboseNamePlural obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON FlowInspectorPlanCurrentStage'StageObj' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "FlowInspectorPlanCurrentStage'StageObj'" (\obj -> ((((((GHC.Base.pure FlowInspectorPlanCurrentStage'StageObj' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_set")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural"))

-- | Create a new 'FlowInspectorPlanCurrentStage'StageObj'' with all required fields.
mkFlowInspectorPlanCurrentStage'StageObj' ::
  -- | 'flowInspectorPlanCurrentStage'StageObj'Component'
  Data.Text.Internal.Text ->
  -- | 'flowInspectorPlanCurrentStage'StageObj'MetaModelName'
  Data.Text.Internal.Text ->
  -- | 'flowInspectorPlanCurrentStage'StageObj'Name'
  Data.Text.Internal.Text ->
  -- | 'flowInspectorPlanCurrentStage'StageObj'Pk'
  Data.Text.Internal.Text ->
  -- | 'flowInspectorPlanCurrentStage'StageObj'VerboseName'
  Data.Text.Internal.Text ->
  -- | 'flowInspectorPlanCurrentStage'StageObj'VerboseNamePlural'
  Data.Text.Internal.Text ->
  FlowInspectorPlanCurrentStage'StageObj'
mkFlowInspectorPlanCurrentStage'StageObj' flowInspectorPlanCurrentStage'StageObj'Component flowInspectorPlanCurrentStage'StageObj'MetaModelName flowInspectorPlanCurrentStage'StageObj'Name flowInspectorPlanCurrentStage'StageObj'Pk flowInspectorPlanCurrentStage'StageObj'VerboseName flowInspectorPlanCurrentStage'StageObj'VerboseNamePlural =
  FlowInspectorPlanCurrentStage'StageObj'
    { flowInspectorPlanCurrentStage'StageObj'Component = flowInspectorPlanCurrentStage'StageObj'Component,
      flowInspectorPlanCurrentStage'StageObj'FlowSet = GHC.Maybe.Nothing,
      flowInspectorPlanCurrentStage'StageObj'MetaModelName = flowInspectorPlanCurrentStage'StageObj'MetaModelName,
      flowInspectorPlanCurrentStage'StageObj'Name = flowInspectorPlanCurrentStage'StageObj'Name,
      flowInspectorPlanCurrentStage'StageObj'Pk = flowInspectorPlanCurrentStage'StageObj'Pk,
      flowInspectorPlanCurrentStage'StageObj'VerboseName = flowInspectorPlanCurrentStage'StageObj'VerboseName,
      flowInspectorPlanCurrentStage'StageObj'VerboseNamePlural = flowInspectorPlanCurrentStage'StageObj'VerboseNamePlural
    }

-- | Defines the object schema located at @components.schemas.FlowInspectorPlan.properties.next_planned_stage.allOf@ in the specification.
data FlowInspectorPlanNextPlannedStage' = FlowInspectorPlanNextPlannedStage'
  { -- | evaluate_on_plan: Evaluate policies during the Flow planning process.
    flowInspectorPlanNextPlannedStage'EvaluateOnPlan :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | invalid_response_action: Configure how the flow executor should handle an invalid response to a challenge. RETRY returns the error message and a similar challenge to the executor. RESTART restarts the flow from the beginning, and RESTART_WITH_CONTEXT restarts the flow while keeping the current context.
    flowInspectorPlanNextPlannedStage'InvalidResponseAction :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | order
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of -2.1474836e9
    flowInspectorPlanNextPlannedStage'Order :: GHC.Types.Int,
    -- | pk
    flowInspectorPlanNextPlannedStage'Pk :: Data.Text.Internal.Text,
    -- | policy_engine_mode
    flowInspectorPlanNextPlannedStage'PolicyEngineMode :: (GHC.Maybe.Maybe PolicyEngineMode),
    -- | policybindingmodel_ptr_id
    flowInspectorPlanNextPlannedStage'PolicybindingmodelPtrId :: Data.Text.Internal.Text,
    -- | re_evaluate_policies: Evaluate policies when the Stage is presented to the user.
    flowInspectorPlanNextPlannedStage'ReEvaluatePolicies :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | stage
    flowInspectorPlanNextPlannedStage'Stage :: Data.Text.Internal.Text,
    -- | stage_obj
    flowInspectorPlanNextPlannedStage'StageObj :: FlowInspectorPlanNextPlannedStage'StageObj',
    -- | target
    flowInspectorPlanNextPlannedStage'Target :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON FlowInspectorPlanNextPlannedStage' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("evaluate_on_plan" Data.Aeson.Types.ToJSON..=)) (flowInspectorPlanNextPlannedStage'EvaluateOnPlan obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("invalid_response_action" Data.Aeson.Types.ToJSON..=)) (flowInspectorPlanNextPlannedStage'InvalidResponseAction obj) : ["order" Data.Aeson.Types.ToJSON..= flowInspectorPlanNextPlannedStage'Order obj] : ["pk" Data.Aeson.Types.ToJSON..= flowInspectorPlanNextPlannedStage'Pk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("policy_engine_mode" Data.Aeson.Types.ToJSON..=)) (flowInspectorPlanNextPlannedStage'PolicyEngineMode obj) : ["policybindingmodel_ptr_id" Data.Aeson.Types.ToJSON..= flowInspectorPlanNextPlannedStage'PolicybindingmodelPtrId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("re_evaluate_policies" Data.Aeson.Types.ToJSON..=)) (flowInspectorPlanNextPlannedStage'ReEvaluatePolicies obj) : ["stage" Data.Aeson.Types.ToJSON..= flowInspectorPlanNextPlannedStage'Stage obj] : ["stage_obj" Data.Aeson.Types.ToJSON..= flowInspectorPlanNextPlannedStage'StageObj obj] : ["target" Data.Aeson.Types.ToJSON..= flowInspectorPlanNextPlannedStage'Target obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("evaluate_on_plan" Data.Aeson.Types.ToJSON..=)) (flowInspectorPlanNextPlannedStage'EvaluateOnPlan obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("invalid_response_action" Data.Aeson.Types.ToJSON..=)) (flowInspectorPlanNextPlannedStage'InvalidResponseAction obj) : ["order" Data.Aeson.Types.ToJSON..= flowInspectorPlanNextPlannedStage'Order obj] : ["pk" Data.Aeson.Types.ToJSON..= flowInspectorPlanNextPlannedStage'Pk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("policy_engine_mode" Data.Aeson.Types.ToJSON..=)) (flowInspectorPlanNextPlannedStage'PolicyEngineMode obj) : ["policybindingmodel_ptr_id" Data.Aeson.Types.ToJSON..= flowInspectorPlanNextPlannedStage'PolicybindingmodelPtrId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("re_evaluate_policies" Data.Aeson.Types.ToJSON..=)) (flowInspectorPlanNextPlannedStage'ReEvaluatePolicies obj) : ["stage" Data.Aeson.Types.ToJSON..= flowInspectorPlanNextPlannedStage'Stage obj] : ["stage_obj" Data.Aeson.Types.ToJSON..= flowInspectorPlanNextPlannedStage'StageObj obj] : ["target" Data.Aeson.Types.ToJSON..= flowInspectorPlanNextPlannedStage'Target obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON FlowInspectorPlanNextPlannedStage' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "FlowInspectorPlanNextPlannedStage'" (\obj -> (((((((((GHC.Base.pure FlowInspectorPlanNextPlannedStage' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "evaluate_on_plan")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "invalid_response_action")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "order")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "policy_engine_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "policybindingmodel_ptr_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "re_evaluate_policies")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "stage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "stage_obj")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "target"))

-- | Create a new 'FlowInspectorPlanNextPlannedStage'' with all required fields.
mkFlowInspectorPlanNextPlannedStage' ::
  -- | 'flowInspectorPlanNextPlannedStage'Order'
  GHC.Types.Int ->
  -- | 'flowInspectorPlanNextPlannedStage'Pk'
  Data.Text.Internal.Text ->
  -- | 'flowInspectorPlanNextPlannedStage'PolicybindingmodelPtrId'
  Data.Text.Internal.Text ->
  -- | 'flowInspectorPlanNextPlannedStage'Stage'
  Data.Text.Internal.Text ->
  -- | 'flowInspectorPlanNextPlannedStage'StageObj'
  FlowInspectorPlanNextPlannedStage'StageObj' ->
  -- | 'flowInspectorPlanNextPlannedStage'Target'
  Data.Text.Internal.Text ->
  FlowInspectorPlanNextPlannedStage'
mkFlowInspectorPlanNextPlannedStage' flowInspectorPlanNextPlannedStage'Order flowInspectorPlanNextPlannedStage'Pk flowInspectorPlanNextPlannedStage'PolicybindingmodelPtrId flowInspectorPlanNextPlannedStage'Stage flowInspectorPlanNextPlannedStage'StageObj flowInspectorPlanNextPlannedStage'Target =
  FlowInspectorPlanNextPlannedStage'
    { flowInspectorPlanNextPlannedStage'EvaluateOnPlan = GHC.Maybe.Nothing,
      flowInspectorPlanNextPlannedStage'InvalidResponseAction = GHC.Maybe.Nothing,
      flowInspectorPlanNextPlannedStage'Order = flowInspectorPlanNextPlannedStage'Order,
      flowInspectorPlanNextPlannedStage'Pk = flowInspectorPlanNextPlannedStage'Pk,
      flowInspectorPlanNextPlannedStage'PolicyEngineMode = GHC.Maybe.Nothing,
      flowInspectorPlanNextPlannedStage'PolicybindingmodelPtrId = flowInspectorPlanNextPlannedStage'PolicybindingmodelPtrId,
      flowInspectorPlanNextPlannedStage'ReEvaluatePolicies = GHC.Maybe.Nothing,
      flowInspectorPlanNextPlannedStage'Stage = flowInspectorPlanNextPlannedStage'Stage,
      flowInspectorPlanNextPlannedStage'StageObj = flowInspectorPlanNextPlannedStage'StageObj,
      flowInspectorPlanNextPlannedStage'Target = flowInspectorPlanNextPlannedStage'Target
    }

-- | Defines the object schema located at @components.schemas.FlowInspectorPlan.properties.next_planned_stage.allOf.properties.stage_obj.allOf@ in the specification.
data FlowInspectorPlanNextPlannedStage'StageObj' = FlowInspectorPlanNextPlannedStage'StageObj'
  { -- | component: Get object type so that we know how to edit the object
    flowInspectorPlanNextPlannedStage'StageObj'Component :: Data.Text.Internal.Text,
    -- | flow_set
    flowInspectorPlanNextPlannedStage'StageObj'FlowSet :: (GHC.Maybe.Maybe [FlowSet]),
    -- | meta_model_name: Return internal model name
    flowInspectorPlanNextPlannedStage'StageObj'MetaModelName :: Data.Text.Internal.Text,
    -- | name
    flowInspectorPlanNextPlannedStage'StageObj'Name :: Data.Text.Internal.Text,
    -- | pk
    flowInspectorPlanNextPlannedStage'StageObj'Pk :: Data.Text.Internal.Text,
    -- | verbose_name: Return object\'s verbose_name
    flowInspectorPlanNextPlannedStage'StageObj'VerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    flowInspectorPlanNextPlannedStage'StageObj'VerboseNamePlural :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON FlowInspectorPlanNextPlannedStage'StageObj' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["component" Data.Aeson.Types.ToJSON..= flowInspectorPlanNextPlannedStage'StageObj'Component obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_set" Data.Aeson.Types.ToJSON..=)) (flowInspectorPlanNextPlannedStage'StageObj'FlowSet obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= flowInspectorPlanNextPlannedStage'StageObj'MetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= flowInspectorPlanNextPlannedStage'StageObj'Name obj] : ["pk" Data.Aeson.Types.ToJSON..= flowInspectorPlanNextPlannedStage'StageObj'Pk obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= flowInspectorPlanNextPlannedStage'StageObj'VerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= flowInspectorPlanNextPlannedStage'StageObj'VerboseNamePlural obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["component" Data.Aeson.Types.ToJSON..= flowInspectorPlanNextPlannedStage'StageObj'Component obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_set" Data.Aeson.Types.ToJSON..=)) (flowInspectorPlanNextPlannedStage'StageObj'FlowSet obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= flowInspectorPlanNextPlannedStage'StageObj'MetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= flowInspectorPlanNextPlannedStage'StageObj'Name obj] : ["pk" Data.Aeson.Types.ToJSON..= flowInspectorPlanNextPlannedStage'StageObj'Pk obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= flowInspectorPlanNextPlannedStage'StageObj'VerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= flowInspectorPlanNextPlannedStage'StageObj'VerboseNamePlural obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON FlowInspectorPlanNextPlannedStage'StageObj' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "FlowInspectorPlanNextPlannedStage'StageObj'" (\obj -> ((((((GHC.Base.pure FlowInspectorPlanNextPlannedStage'StageObj' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_set")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural"))

-- | Create a new 'FlowInspectorPlanNextPlannedStage'StageObj'' with all required fields.
mkFlowInspectorPlanNextPlannedStage'StageObj' ::
  -- | 'flowInspectorPlanNextPlannedStage'StageObj'Component'
  Data.Text.Internal.Text ->
  -- | 'flowInspectorPlanNextPlannedStage'StageObj'MetaModelName'
  Data.Text.Internal.Text ->
  -- | 'flowInspectorPlanNextPlannedStage'StageObj'Name'
  Data.Text.Internal.Text ->
  -- | 'flowInspectorPlanNextPlannedStage'StageObj'Pk'
  Data.Text.Internal.Text ->
  -- | 'flowInspectorPlanNextPlannedStage'StageObj'VerboseName'
  Data.Text.Internal.Text ->
  -- | 'flowInspectorPlanNextPlannedStage'StageObj'VerboseNamePlural'
  Data.Text.Internal.Text ->
  FlowInspectorPlanNextPlannedStage'StageObj'
mkFlowInspectorPlanNextPlannedStage'StageObj' flowInspectorPlanNextPlannedStage'StageObj'Component flowInspectorPlanNextPlannedStage'StageObj'MetaModelName flowInspectorPlanNextPlannedStage'StageObj'Name flowInspectorPlanNextPlannedStage'StageObj'Pk flowInspectorPlanNextPlannedStage'StageObj'VerboseName flowInspectorPlanNextPlannedStage'StageObj'VerboseNamePlural =
  FlowInspectorPlanNextPlannedStage'StageObj'
    { flowInspectorPlanNextPlannedStage'StageObj'Component = flowInspectorPlanNextPlannedStage'StageObj'Component,
      flowInspectorPlanNextPlannedStage'StageObj'FlowSet = GHC.Maybe.Nothing,
      flowInspectorPlanNextPlannedStage'StageObj'MetaModelName = flowInspectorPlanNextPlannedStage'StageObj'MetaModelName,
      flowInspectorPlanNextPlannedStage'StageObj'Name = flowInspectorPlanNextPlannedStage'StageObj'Name,
      flowInspectorPlanNextPlannedStage'StageObj'Pk = flowInspectorPlanNextPlannedStage'StageObj'Pk,
      flowInspectorPlanNextPlannedStage'StageObj'VerboseName = flowInspectorPlanNextPlannedStage'StageObj'VerboseName,
      flowInspectorPlanNextPlannedStage'StageObj'VerboseNamePlural = flowInspectorPlanNextPlannedStage'StageObj'VerboseNamePlural
    }

{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PasswordPolicyRequest
module AuthentikAPI.Types.PasswordPolicyRequest where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.PasswordPolicyRequest@ in the specification.
--
-- Password Policy Serializer
data PasswordPolicyRequest = PasswordPolicyRequest
  { -- | amount_digits
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of 0.0
    passwordPolicyRequestAmountDigits :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | amount_lowercase
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of 0.0
    passwordPolicyRequestAmountLowercase :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | amount_symbols
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of 0.0
    passwordPolicyRequestAmountSymbols :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | amount_uppercase
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of 0.0
    passwordPolicyRequestAmountUppercase :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | check_have_i_been_pwned
    passwordPolicyRequestCheckHaveIBeenPwned :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | check_static_rules
    passwordPolicyRequestCheckStaticRules :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | check_zxcvbn
    passwordPolicyRequestCheckZxcvbn :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | error_message
    passwordPolicyRequestErrorMessage :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | execution_logging: When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.
    passwordPolicyRequestExecutionLogging :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | hibp_allowed_count: How many times the password hash is allowed to be on haveibeenpwned
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of 0.0
    passwordPolicyRequestHibpAllowedCount :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | length_min
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of 0.0
    passwordPolicyRequestLengthMin :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | name
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    passwordPolicyRequestName :: Data.Text.Internal.Text,
    -- | password_field: Field key to check, field keys defined in Prompt stages are available.
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    passwordPolicyRequestPasswordField :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | symbol_charset
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    passwordPolicyRequestSymbolCharset :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | zxcvbn_score_threshold: If the zxcvbn score is equal or less than this value, the policy will fail.
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of 0.0
    passwordPolicyRequestZxcvbnScoreThreshold :: (GHC.Maybe.Maybe GHC.Types.Int)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PasswordPolicyRequest where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_digits" Data.Aeson.Types.ToJSON..=)) (passwordPolicyRequestAmountDigits obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_lowercase" Data.Aeson.Types.ToJSON..=)) (passwordPolicyRequestAmountLowercase obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_symbols" Data.Aeson.Types.ToJSON..=)) (passwordPolicyRequestAmountSymbols obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_uppercase" Data.Aeson.Types.ToJSON..=)) (passwordPolicyRequestAmountUppercase obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("check_have_i_been_pwned" Data.Aeson.Types.ToJSON..=)) (passwordPolicyRequestCheckHaveIBeenPwned obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("check_static_rules" Data.Aeson.Types.ToJSON..=)) (passwordPolicyRequestCheckStaticRules obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("check_zxcvbn" Data.Aeson.Types.ToJSON..=)) (passwordPolicyRequestCheckZxcvbn obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("error_message" Data.Aeson.Types.ToJSON..=)) (passwordPolicyRequestErrorMessage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("execution_logging" Data.Aeson.Types.ToJSON..=)) (passwordPolicyRequestExecutionLogging obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("hibp_allowed_count" Data.Aeson.Types.ToJSON..=)) (passwordPolicyRequestHibpAllowedCount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("length_min" Data.Aeson.Types.ToJSON..=)) (passwordPolicyRequestLengthMin obj) : ["name" Data.Aeson.Types.ToJSON..= passwordPolicyRequestName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("password_field" Data.Aeson.Types.ToJSON..=)) (passwordPolicyRequestPasswordField obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("symbol_charset" Data.Aeson.Types.ToJSON..=)) (passwordPolicyRequestSymbolCharset obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("zxcvbn_score_threshold" Data.Aeson.Types.ToJSON..=)) (passwordPolicyRequestZxcvbnScoreThreshold obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_digits" Data.Aeson.Types.ToJSON..=)) (passwordPolicyRequestAmountDigits obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_lowercase" Data.Aeson.Types.ToJSON..=)) (passwordPolicyRequestAmountLowercase obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_symbols" Data.Aeson.Types.ToJSON..=)) (passwordPolicyRequestAmountSymbols obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_uppercase" Data.Aeson.Types.ToJSON..=)) (passwordPolicyRequestAmountUppercase obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("check_have_i_been_pwned" Data.Aeson.Types.ToJSON..=)) (passwordPolicyRequestCheckHaveIBeenPwned obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("check_static_rules" Data.Aeson.Types.ToJSON..=)) (passwordPolicyRequestCheckStaticRules obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("check_zxcvbn" Data.Aeson.Types.ToJSON..=)) (passwordPolicyRequestCheckZxcvbn obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("error_message" Data.Aeson.Types.ToJSON..=)) (passwordPolicyRequestErrorMessage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("execution_logging" Data.Aeson.Types.ToJSON..=)) (passwordPolicyRequestExecutionLogging obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("hibp_allowed_count" Data.Aeson.Types.ToJSON..=)) (passwordPolicyRequestHibpAllowedCount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("length_min" Data.Aeson.Types.ToJSON..=)) (passwordPolicyRequestLengthMin obj) : ["name" Data.Aeson.Types.ToJSON..= passwordPolicyRequestName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("password_field" Data.Aeson.Types.ToJSON..=)) (passwordPolicyRequestPasswordField obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("symbol_charset" Data.Aeson.Types.ToJSON..=)) (passwordPolicyRequestSymbolCharset obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("zxcvbn_score_threshold" Data.Aeson.Types.ToJSON..=)) (passwordPolicyRequestZxcvbnScoreThreshold obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PasswordPolicyRequest where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PasswordPolicyRequest" (\obj -> ((((((((((((((GHC.Base.pure PasswordPolicyRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount_digits")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount_lowercase")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount_symbols")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount_uppercase")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "check_have_i_been_pwned")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "check_static_rules")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "check_zxcvbn")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "error_message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "execution_logging")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "hibp_allowed_count")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "length_min")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "password_field")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "symbol_charset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "zxcvbn_score_threshold"))

-- | Create a new 'PasswordPolicyRequest' with all required fields.
mkPasswordPolicyRequest ::
  -- | 'passwordPolicyRequestName'
  Data.Text.Internal.Text ->
  PasswordPolicyRequest
mkPasswordPolicyRequest passwordPolicyRequestName =
  PasswordPolicyRequest
    { passwordPolicyRequestAmountDigits = GHC.Maybe.Nothing,
      passwordPolicyRequestAmountLowercase = GHC.Maybe.Nothing,
      passwordPolicyRequestAmountSymbols = GHC.Maybe.Nothing,
      passwordPolicyRequestAmountUppercase = GHC.Maybe.Nothing,
      passwordPolicyRequestCheckHaveIBeenPwned = GHC.Maybe.Nothing,
      passwordPolicyRequestCheckStaticRules = GHC.Maybe.Nothing,
      passwordPolicyRequestCheckZxcvbn = GHC.Maybe.Nothing,
      passwordPolicyRequestErrorMessage = GHC.Maybe.Nothing,
      passwordPolicyRequestExecutionLogging = GHC.Maybe.Nothing,
      passwordPolicyRequestHibpAllowedCount = GHC.Maybe.Nothing,
      passwordPolicyRequestLengthMin = GHC.Maybe.Nothing,
      passwordPolicyRequestName = passwordPolicyRequestName,
      passwordPolicyRequestPasswordField = GHC.Maybe.Nothing,
      passwordPolicyRequestSymbolCharset = GHC.Maybe.Nothing,
      passwordPolicyRequestZxcvbnScoreThreshold = GHC.Maybe.Nothing
    }

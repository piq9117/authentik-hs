{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema ProxyProvider
module AuthentikAPI.Types.ProxyProvider where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.RedirectURI
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.ProxyProvider@ in the specification.
--
-- ProxyProvider Serializer
data ProxyProvider = ProxyProvider
  { -- | access_token_validity: Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).
    proxyProviderAccessTokenValidity :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | assigned_application_name: Application\'s display Name.
    proxyProviderAssignedApplicationName :: Data.Text.Internal.Text,
    -- | assigned_application_slug: Internal application name, used in URLs.
    proxyProviderAssignedApplicationSlug :: Data.Text.Internal.Text,
    -- | assigned_backchannel_application_name: Application\'s display Name.
    proxyProviderAssignedBackchannelApplicationName :: Data.Text.Internal.Text,
    -- | assigned_backchannel_application_slug: Internal application name, used in URLs.
    proxyProviderAssignedBackchannelApplicationSlug :: Data.Text.Internal.Text,
    -- | authentication_flow: Flow used for authentication when the associated application is accessed by an un-authenticated user.
    proxyProviderAuthenticationFlow :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | authorization_flow: Flow used when authorizing this provider.
    proxyProviderAuthorizationFlow :: Data.Text.Internal.Text,
    -- | basic_auth_enabled: Set a custom HTTP-Basic Authentication header based on values from authentik.
    proxyProviderBasicAuthEnabled :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | basic_auth_password_attribute: User\/Group Attribute used for the password part of the HTTP-Basic Header.
    proxyProviderBasicAuthPasswordAttribute :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | basic_auth_user_attribute: User\/Group Attribute used for the user part of the HTTP-Basic Header. If not set, the user\'s Email address is used.
    proxyProviderBasicAuthUserAttribute :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | certificate
    proxyProviderCertificate :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | client_id
    proxyProviderClientId :: Data.Text.Internal.Text,
    -- | component: Get object component so that we know how to edit the object
    proxyProviderComponent :: Data.Text.Internal.Text,
    -- | cookie_domain
    proxyProviderCookieDomain :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | external_host
    proxyProviderExternalHost :: Data.Text.Internal.Text,
    -- | intercept_header_auth: When enabled, this provider will intercept the authorization header and authenticate requests based on its value.
    proxyProviderInterceptHeaderAuth :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | internal_host
    proxyProviderInternalHost :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | internal_host_ssl_validation: Validate SSL Certificates of upstream servers
    proxyProviderInternalHostSslValidation :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | invalidation_flow: Flow used ending the session from a provider.
    proxyProviderInvalidationFlow :: Data.Text.Internal.Text,
    -- | jwt_federation_providers
    proxyProviderJwtFederationProviders :: (GHC.Maybe.Maybe [GHC.Types.Int]),
    -- | jwt_federation_sources
    proxyProviderJwtFederationSources :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | meta_model_name: Return internal model name
    proxyProviderMetaModelName :: Data.Text.Internal.Text,
    -- | mode: Enable support for forwardAuth in traefik and nginx auth_request. Exclusive with internal_host.
    proxyProviderMode :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | name
    proxyProviderName :: Data.Text.Internal.Text,
    -- | outpost_set
    proxyProviderOutpostSet :: [Data.Text.Internal.Text],
    -- | pk
    proxyProviderPk :: GHC.Types.Int,
    -- | property_mappings
    proxyProviderPropertyMappings :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | redirect_uris
    proxyProviderRedirectUris :: [RedirectURI],
    -- | refresh_token_validity: Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).
    proxyProviderRefreshTokenValidity :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | skip_path_regex: Regular expressions for which authentication is not required. Each new line is interpreted as a new Regular Expression.
    proxyProviderSkipPathRegex :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | verbose_name: Return object\'s verbose_name
    proxyProviderVerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    proxyProviderVerboseNamePlural :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON ProxyProvider where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("access_token_validity" Data.Aeson.Types.ToJSON..=)) (proxyProviderAccessTokenValidity obj) : ["assigned_application_name" Data.Aeson.Types.ToJSON..= proxyProviderAssignedApplicationName obj] : ["assigned_application_slug" Data.Aeson.Types.ToJSON..= proxyProviderAssignedApplicationSlug obj] : ["assigned_backchannel_application_name" Data.Aeson.Types.ToJSON..= proxyProviderAssignedBackchannelApplicationName obj] : ["assigned_backchannel_application_slug" Data.Aeson.Types.ToJSON..= proxyProviderAssignedBackchannelApplicationSlug obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication_flow" Data.Aeson.Types.ToJSON..=)) (proxyProviderAuthenticationFlow obj) : ["authorization_flow" Data.Aeson.Types.ToJSON..= proxyProviderAuthorizationFlow obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("basic_auth_enabled" Data.Aeson.Types.ToJSON..=)) (proxyProviderBasicAuthEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("basic_auth_password_attribute" Data.Aeson.Types.ToJSON..=)) (proxyProviderBasicAuthPasswordAttribute obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("basic_auth_user_attribute" Data.Aeson.Types.ToJSON..=)) (proxyProviderBasicAuthUserAttribute obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("certificate" Data.Aeson.Types.ToJSON..=)) (proxyProviderCertificate obj) : ["client_id" Data.Aeson.Types.ToJSON..= proxyProviderClientId obj] : ["component" Data.Aeson.Types.ToJSON..= proxyProviderComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cookie_domain" Data.Aeson.Types.ToJSON..=)) (proxyProviderCookieDomain obj) : ["external_host" Data.Aeson.Types.ToJSON..= proxyProviderExternalHost obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("intercept_header_auth" Data.Aeson.Types.ToJSON..=)) (proxyProviderInterceptHeaderAuth obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("internal_host" Data.Aeson.Types.ToJSON..=)) (proxyProviderInternalHost obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("internal_host_ssl_validation" Data.Aeson.Types.ToJSON..=)) (proxyProviderInternalHostSslValidation obj) : ["invalidation_flow" Data.Aeson.Types.ToJSON..= proxyProviderInvalidationFlow obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("jwt_federation_providers" Data.Aeson.Types.ToJSON..=)) (proxyProviderJwtFederationProviders obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("jwt_federation_sources" Data.Aeson.Types.ToJSON..=)) (proxyProviderJwtFederationSources obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= proxyProviderMetaModelName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mode" Data.Aeson.Types.ToJSON..=)) (proxyProviderMode obj) : ["name" Data.Aeson.Types.ToJSON..= proxyProviderName obj] : ["outpost_set" Data.Aeson.Types.ToJSON..= proxyProviderOutpostSet obj] : ["pk" Data.Aeson.Types.ToJSON..= proxyProviderPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings" Data.Aeson.Types.ToJSON..=)) (proxyProviderPropertyMappings obj) : ["redirect_uris" Data.Aeson.Types.ToJSON..= proxyProviderRedirectUris obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("refresh_token_validity" Data.Aeson.Types.ToJSON..=)) (proxyProviderRefreshTokenValidity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("skip_path_regex" Data.Aeson.Types.ToJSON..=)) (proxyProviderSkipPathRegex obj) : ["verbose_name" Data.Aeson.Types.ToJSON..= proxyProviderVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= proxyProviderVerboseNamePlural obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("access_token_validity" Data.Aeson.Types.ToJSON..=)) (proxyProviderAccessTokenValidity obj) : ["assigned_application_name" Data.Aeson.Types.ToJSON..= proxyProviderAssignedApplicationName obj] : ["assigned_application_slug" Data.Aeson.Types.ToJSON..= proxyProviderAssignedApplicationSlug obj] : ["assigned_backchannel_application_name" Data.Aeson.Types.ToJSON..= proxyProviderAssignedBackchannelApplicationName obj] : ["assigned_backchannel_application_slug" Data.Aeson.Types.ToJSON..= proxyProviderAssignedBackchannelApplicationSlug obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication_flow" Data.Aeson.Types.ToJSON..=)) (proxyProviderAuthenticationFlow obj) : ["authorization_flow" Data.Aeson.Types.ToJSON..= proxyProviderAuthorizationFlow obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("basic_auth_enabled" Data.Aeson.Types.ToJSON..=)) (proxyProviderBasicAuthEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("basic_auth_password_attribute" Data.Aeson.Types.ToJSON..=)) (proxyProviderBasicAuthPasswordAttribute obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("basic_auth_user_attribute" Data.Aeson.Types.ToJSON..=)) (proxyProviderBasicAuthUserAttribute obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("certificate" Data.Aeson.Types.ToJSON..=)) (proxyProviderCertificate obj) : ["client_id" Data.Aeson.Types.ToJSON..= proxyProviderClientId obj] : ["component" Data.Aeson.Types.ToJSON..= proxyProviderComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cookie_domain" Data.Aeson.Types.ToJSON..=)) (proxyProviderCookieDomain obj) : ["external_host" Data.Aeson.Types.ToJSON..= proxyProviderExternalHost obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("intercept_header_auth" Data.Aeson.Types.ToJSON..=)) (proxyProviderInterceptHeaderAuth obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("internal_host" Data.Aeson.Types.ToJSON..=)) (proxyProviderInternalHost obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("internal_host_ssl_validation" Data.Aeson.Types.ToJSON..=)) (proxyProviderInternalHostSslValidation obj) : ["invalidation_flow" Data.Aeson.Types.ToJSON..= proxyProviderInvalidationFlow obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("jwt_federation_providers" Data.Aeson.Types.ToJSON..=)) (proxyProviderJwtFederationProviders obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("jwt_federation_sources" Data.Aeson.Types.ToJSON..=)) (proxyProviderJwtFederationSources obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= proxyProviderMetaModelName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mode" Data.Aeson.Types.ToJSON..=)) (proxyProviderMode obj) : ["name" Data.Aeson.Types.ToJSON..= proxyProviderName obj] : ["outpost_set" Data.Aeson.Types.ToJSON..= proxyProviderOutpostSet obj] : ["pk" Data.Aeson.Types.ToJSON..= proxyProviderPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings" Data.Aeson.Types.ToJSON..=)) (proxyProviderPropertyMappings obj) : ["redirect_uris" Data.Aeson.Types.ToJSON..= proxyProviderRedirectUris obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("refresh_token_validity" Data.Aeson.Types.ToJSON..=)) (proxyProviderRefreshTokenValidity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("skip_path_regex" Data.Aeson.Types.ToJSON..=)) (proxyProviderSkipPathRegex obj) : ["verbose_name" Data.Aeson.Types.ToJSON..= proxyProviderVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= proxyProviderVerboseNamePlural obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON ProxyProvider where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "ProxyProvider" (\obj -> (((((((((((((((((((((((((((((((GHC.Base.pure ProxyProvider GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "access_token_validity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assigned_application_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assigned_application_slug")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assigned_backchannel_application_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assigned_backchannel_application_slug")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "authentication_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "authorization_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "basic_auth_enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "basic_auth_password_attribute")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "basic_auth_user_attribute")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "certificate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "client_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cookie_domain")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "external_host")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "intercept_header_auth")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "internal_host")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "internal_host_ssl_validation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "invalidation_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "jwt_federation_providers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "jwt_federation_sources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "outpost_set")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "property_mappings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "redirect_uris")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "refresh_token_validity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "skip_path_regex")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural"))

-- | Create a new 'ProxyProvider' with all required fields.
mkProxyProvider ::
  -- | 'proxyProviderAssignedApplicationName'
  Data.Text.Internal.Text ->
  -- | 'proxyProviderAssignedApplicationSlug'
  Data.Text.Internal.Text ->
  -- | 'proxyProviderAssignedBackchannelApplicationName'
  Data.Text.Internal.Text ->
  -- | 'proxyProviderAssignedBackchannelApplicationSlug'
  Data.Text.Internal.Text ->
  -- | 'proxyProviderAuthorizationFlow'
  Data.Text.Internal.Text ->
  -- | 'proxyProviderClientId'
  Data.Text.Internal.Text ->
  -- | 'proxyProviderComponent'
  Data.Text.Internal.Text ->
  -- | 'proxyProviderExternalHost'
  Data.Text.Internal.Text ->
  -- | 'proxyProviderInvalidationFlow'
  Data.Text.Internal.Text ->
  -- | 'proxyProviderMetaModelName'
  Data.Text.Internal.Text ->
  -- | 'proxyProviderName'
  Data.Text.Internal.Text ->
  -- | 'proxyProviderOutpostSet'
  [Data.Text.Internal.Text] ->
  -- | 'proxyProviderPk'
  GHC.Types.Int ->
  -- | 'proxyProviderRedirectUris'
  [RedirectURI] ->
  -- | 'proxyProviderVerboseName'
  Data.Text.Internal.Text ->
  -- | 'proxyProviderVerboseNamePlural'
  Data.Text.Internal.Text ->
  ProxyProvider
mkProxyProvider proxyProviderAssignedApplicationName proxyProviderAssignedApplicationSlug proxyProviderAssignedBackchannelApplicationName proxyProviderAssignedBackchannelApplicationSlug proxyProviderAuthorizationFlow proxyProviderClientId proxyProviderComponent proxyProviderExternalHost proxyProviderInvalidationFlow proxyProviderMetaModelName proxyProviderName proxyProviderOutpostSet proxyProviderPk proxyProviderRedirectUris proxyProviderVerboseName proxyProviderVerboseNamePlural =
  ProxyProvider
    { proxyProviderAccessTokenValidity = GHC.Maybe.Nothing,
      proxyProviderAssignedApplicationName = proxyProviderAssignedApplicationName,
      proxyProviderAssignedApplicationSlug = proxyProviderAssignedApplicationSlug,
      proxyProviderAssignedBackchannelApplicationName = proxyProviderAssignedBackchannelApplicationName,
      proxyProviderAssignedBackchannelApplicationSlug = proxyProviderAssignedBackchannelApplicationSlug,
      proxyProviderAuthenticationFlow = GHC.Maybe.Nothing,
      proxyProviderAuthorizationFlow = proxyProviderAuthorizationFlow,
      proxyProviderBasicAuthEnabled = GHC.Maybe.Nothing,
      proxyProviderBasicAuthPasswordAttribute = GHC.Maybe.Nothing,
      proxyProviderBasicAuthUserAttribute = GHC.Maybe.Nothing,
      proxyProviderCertificate = GHC.Maybe.Nothing,
      proxyProviderClientId = proxyProviderClientId,
      proxyProviderComponent = proxyProviderComponent,
      proxyProviderCookieDomain = GHC.Maybe.Nothing,
      proxyProviderExternalHost = proxyProviderExternalHost,
      proxyProviderInterceptHeaderAuth = GHC.Maybe.Nothing,
      proxyProviderInternalHost = GHC.Maybe.Nothing,
      proxyProviderInternalHostSslValidation = GHC.Maybe.Nothing,
      proxyProviderInvalidationFlow = proxyProviderInvalidationFlow,
      proxyProviderJwtFederationProviders = GHC.Maybe.Nothing,
      proxyProviderJwtFederationSources = GHC.Maybe.Nothing,
      proxyProviderMetaModelName = proxyProviderMetaModelName,
      proxyProviderMode = GHC.Maybe.Nothing,
      proxyProviderName = proxyProviderName,
      proxyProviderOutpostSet = proxyProviderOutpostSet,
      proxyProviderPk = proxyProviderPk,
      proxyProviderPropertyMappings = GHC.Maybe.Nothing,
      proxyProviderRedirectUris = proxyProviderRedirectUris,
      proxyProviderRefreshTokenValidity = GHC.Maybe.Nothing,
      proxyProviderSkipPathRegex = GHC.Maybe.Nothing,
      proxyProviderVerboseName = proxyProviderVerboseName,
      proxyProviderVerboseNamePlural = proxyProviderVerboseNamePlural
    }

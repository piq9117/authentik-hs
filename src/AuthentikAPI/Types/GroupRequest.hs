{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema GroupRequest
module AuthentikAPI.Types.GroupRequest where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.GroupRequest@ in the specification.
--
-- Group Serializer
data GroupRequest = GroupRequest
  { -- | attributes
    groupRequestAttributes :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | is_superuser: Users added to this group will be superusers.
    groupRequestIsSuperuser :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | name
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    groupRequestName :: Data.Text.Internal.Text,
    -- | parent
    groupRequestParent :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | roles
    groupRequestRoles :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | users
    groupRequestUsers :: (GHC.Maybe.Maybe [GHC.Types.Int])
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GroupRequest where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (groupRequestAttributes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_superuser" Data.Aeson.Types.ToJSON..=)) (groupRequestIsSuperuser obj) : ["name" Data.Aeson.Types.ToJSON..= groupRequestName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("parent" Data.Aeson.Types.ToJSON..=)) (groupRequestParent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("roles" Data.Aeson.Types.ToJSON..=)) (groupRequestRoles obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("users" Data.Aeson.Types.ToJSON..=)) (groupRequestUsers obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (groupRequestAttributes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_superuser" Data.Aeson.Types.ToJSON..=)) (groupRequestIsSuperuser obj) : ["name" Data.Aeson.Types.ToJSON..= groupRequestName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("parent" Data.Aeson.Types.ToJSON..=)) (groupRequestParent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("roles" Data.Aeson.Types.ToJSON..=)) (groupRequestRoles obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("users" Data.Aeson.Types.ToJSON..=)) (groupRequestUsers obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GroupRequest where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GroupRequest" (\obj -> (((((GHC.Base.pure GroupRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "attributes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "is_superuser")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "parent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "roles")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "users"))

-- | Create a new 'GroupRequest' with all required fields.
mkGroupRequest ::
  -- | 'groupRequestName'
  Data.Text.Internal.Text ->
  GroupRequest
mkGroupRequest groupRequestName =
  GroupRequest
    { groupRequestAttributes = GHC.Maybe.Nothing,
      groupRequestIsSuperuser = GHC.Maybe.Nothing,
      groupRequestName = groupRequestName,
      groupRequestParent = GHC.Maybe.Nothing,
      groupRequestRoles = GHC.Maybe.Nothing,
      groupRequestUsers = GHC.Maybe.Nothing
    }

{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema SCIMProvider
module AuthentikAPI.Types.SCIMProvider where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.SCIMProvider@ in the specification.
--
-- SCIMProvider Serializer
data SCIMProvider = SCIMProvider
  { -- | assigned_backchannel_application_name: Application\'s display Name.
    sCIMProviderAssignedBackchannelApplicationName :: Data.Text.Internal.Text,
    -- | assigned_backchannel_application_slug: Internal application name, used in URLs.
    sCIMProviderAssignedBackchannelApplicationSlug :: Data.Text.Internal.Text,
    -- | compatibility_mode: Alter authentik behavior for vendor-specific SCIM implementations.
    sCIMProviderCompatibilityMode :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | component: Get object component so that we know how to edit the object
    sCIMProviderComponent :: Data.Text.Internal.Text,
    -- | dry_run: When enabled, provider will not modify or create objects in the remote system.
    sCIMProviderDryRun :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | exclude_users_service_account
    sCIMProviderExcludeUsersServiceAccount :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | filter_group
    sCIMProviderFilterGroup :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | meta_model_name: Return internal model name
    sCIMProviderMetaModelName :: Data.Text.Internal.Text,
    -- | name
    sCIMProviderName :: Data.Text.Internal.Text,
    -- | pk
    sCIMProviderPk :: GHC.Types.Int,
    -- | property_mappings
    sCIMProviderPropertyMappings :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | property_mappings_group: Property mappings used for group creation\/updating.
    sCIMProviderPropertyMappingsGroup :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | token: Authentication token
    sCIMProviderToken :: Data.Text.Internal.Text,
    -- | url: Base URL to SCIM requests, usually ends in \/v2
    sCIMProviderUrl :: Data.Text.Internal.Text,
    -- | verbose_name: Return object\'s verbose_name
    sCIMProviderVerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    sCIMProviderVerboseNamePlural :: Data.Text.Internal.Text,
    -- | verify_certificates
    sCIMProviderVerifyCertificates :: (GHC.Maybe.Maybe GHC.Types.Bool)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SCIMProvider where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["assigned_backchannel_application_name" Data.Aeson.Types.ToJSON..= sCIMProviderAssignedBackchannelApplicationName obj] : ["assigned_backchannel_application_slug" Data.Aeson.Types.ToJSON..= sCIMProviderAssignedBackchannelApplicationSlug obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("compatibility_mode" Data.Aeson.Types.ToJSON..=)) (sCIMProviderCompatibilityMode obj) : ["component" Data.Aeson.Types.ToJSON..= sCIMProviderComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dry_run" Data.Aeson.Types.ToJSON..=)) (sCIMProviderDryRun obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exclude_users_service_account" Data.Aeson.Types.ToJSON..=)) (sCIMProviderExcludeUsersServiceAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("filter_group" Data.Aeson.Types.ToJSON..=)) (sCIMProviderFilterGroup obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= sCIMProviderMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= sCIMProviderName obj] : ["pk" Data.Aeson.Types.ToJSON..= sCIMProviderPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings" Data.Aeson.Types.ToJSON..=)) (sCIMProviderPropertyMappings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings_group" Data.Aeson.Types.ToJSON..=)) (sCIMProviderPropertyMappingsGroup obj) : ["token" Data.Aeson.Types.ToJSON..= sCIMProviderToken obj] : ["url" Data.Aeson.Types.ToJSON..= sCIMProviderUrl obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= sCIMProviderVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= sCIMProviderVerboseNamePlural obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verify_certificates" Data.Aeson.Types.ToJSON..=)) (sCIMProviderVerifyCertificates obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["assigned_backchannel_application_name" Data.Aeson.Types.ToJSON..= sCIMProviderAssignedBackchannelApplicationName obj] : ["assigned_backchannel_application_slug" Data.Aeson.Types.ToJSON..= sCIMProviderAssignedBackchannelApplicationSlug obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("compatibility_mode" Data.Aeson.Types.ToJSON..=)) (sCIMProviderCompatibilityMode obj) : ["component" Data.Aeson.Types.ToJSON..= sCIMProviderComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dry_run" Data.Aeson.Types.ToJSON..=)) (sCIMProviderDryRun obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exclude_users_service_account" Data.Aeson.Types.ToJSON..=)) (sCIMProviderExcludeUsersServiceAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("filter_group" Data.Aeson.Types.ToJSON..=)) (sCIMProviderFilterGroup obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= sCIMProviderMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= sCIMProviderName obj] : ["pk" Data.Aeson.Types.ToJSON..= sCIMProviderPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings" Data.Aeson.Types.ToJSON..=)) (sCIMProviderPropertyMappings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings_group" Data.Aeson.Types.ToJSON..=)) (sCIMProviderPropertyMappingsGroup obj) : ["token" Data.Aeson.Types.ToJSON..= sCIMProviderToken obj] : ["url" Data.Aeson.Types.ToJSON..= sCIMProviderUrl obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= sCIMProviderVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= sCIMProviderVerboseNamePlural obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verify_certificates" Data.Aeson.Types.ToJSON..=)) (sCIMProviderVerifyCertificates obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SCIMProvider where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SCIMProvider" (\obj -> ((((((((((((((((GHC.Base.pure SCIMProvider GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assigned_backchannel_application_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assigned_backchannel_application_slug")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "compatibility_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "dry_run")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "exclude_users_service_account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "filter_group")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "property_mappings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "property_mappings_group")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "token")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verify_certificates"))

-- | Create a new 'SCIMProvider' with all required fields.
mkSCIMProvider ::
  -- | 'sCIMProviderAssignedBackchannelApplicationName'
  Data.Text.Internal.Text ->
  -- | 'sCIMProviderAssignedBackchannelApplicationSlug'
  Data.Text.Internal.Text ->
  -- | 'sCIMProviderComponent'
  Data.Text.Internal.Text ->
  -- | 'sCIMProviderMetaModelName'
  Data.Text.Internal.Text ->
  -- | 'sCIMProviderName'
  Data.Text.Internal.Text ->
  -- | 'sCIMProviderPk'
  GHC.Types.Int ->
  -- | 'sCIMProviderToken'
  Data.Text.Internal.Text ->
  -- | 'sCIMProviderUrl'
  Data.Text.Internal.Text ->
  -- | 'sCIMProviderVerboseName'
  Data.Text.Internal.Text ->
  -- | 'sCIMProviderVerboseNamePlural'
  Data.Text.Internal.Text ->
  SCIMProvider
mkSCIMProvider sCIMProviderAssignedBackchannelApplicationName sCIMProviderAssignedBackchannelApplicationSlug sCIMProviderComponent sCIMProviderMetaModelName sCIMProviderName sCIMProviderPk sCIMProviderToken sCIMProviderUrl sCIMProviderVerboseName sCIMProviderVerboseNamePlural =
  SCIMProvider
    { sCIMProviderAssignedBackchannelApplicationName = sCIMProviderAssignedBackchannelApplicationName,
      sCIMProviderAssignedBackchannelApplicationSlug = sCIMProviderAssignedBackchannelApplicationSlug,
      sCIMProviderCompatibilityMode = GHC.Maybe.Nothing,
      sCIMProviderComponent = sCIMProviderComponent,
      sCIMProviderDryRun = GHC.Maybe.Nothing,
      sCIMProviderExcludeUsersServiceAccount = GHC.Maybe.Nothing,
      sCIMProviderFilterGroup = GHC.Maybe.Nothing,
      sCIMProviderMetaModelName = sCIMProviderMetaModelName,
      sCIMProviderName = sCIMProviderName,
      sCIMProviderPk = sCIMProviderPk,
      sCIMProviderPropertyMappings = GHC.Maybe.Nothing,
      sCIMProviderPropertyMappingsGroup = GHC.Maybe.Nothing,
      sCIMProviderToken = sCIMProviderToken,
      sCIMProviderUrl = sCIMProviderUrl,
      sCIMProviderVerboseName = sCIMProviderVerboseName,
      sCIMProviderVerboseNamePlural = sCIMProviderVerboseNamePlural,
      sCIMProviderVerifyCertificates = GHC.Maybe.Nothing
    }

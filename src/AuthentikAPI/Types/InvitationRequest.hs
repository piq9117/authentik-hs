{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema InvitationRequest
module AuthentikAPI.Types.InvitationRequest where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.InvitationRequest@ in the specification.
--
-- Invitation Serializer
data InvitationRequest = InvitationRequest
  { -- | expires
    invitationRequestExpires :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | fixed_data
    invitationRequestFixedData :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | flow: When set, only the configured flow can use this invitation.
    invitationRequestFlow :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | name
    --
    -- Constraints:
    --
    -- * Maximum length of 50
    -- * Minimum length of 1
    -- * Must match pattern \'^[-a-zA-Z0-9_]+\$\'
    invitationRequestName :: Data.Text.Internal.Text,
    -- | single_use: When enabled, the invitation will be deleted after usage.
    invitationRequestSingleUse :: (GHC.Maybe.Maybe GHC.Types.Bool)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON InvitationRequest where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires" Data.Aeson.Types.ToJSON..=)) (invitationRequestExpires obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fixed_data" Data.Aeson.Types.ToJSON..=)) (invitationRequestFixedData obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow" Data.Aeson.Types.ToJSON..=)) (invitationRequestFlow obj) : ["name" Data.Aeson.Types.ToJSON..= invitationRequestName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("single_use" Data.Aeson.Types.ToJSON..=)) (invitationRequestSingleUse obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires" Data.Aeson.Types.ToJSON..=)) (invitationRequestExpires obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fixed_data" Data.Aeson.Types.ToJSON..=)) (invitationRequestFixedData obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow" Data.Aeson.Types.ToJSON..=)) (invitationRequestFlow obj) : ["name" Data.Aeson.Types.ToJSON..= invitationRequestName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("single_use" Data.Aeson.Types.ToJSON..=)) (invitationRequestSingleUse obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON InvitationRequest where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "InvitationRequest" (\obj -> ((((GHC.Base.pure InvitationRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expires")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "fixed_data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "single_use"))

-- | Create a new 'InvitationRequest' with all required fields.
mkInvitationRequest ::
  -- | 'invitationRequestName'
  Data.Text.Internal.Text ->
  InvitationRequest
mkInvitationRequest invitationRequestName =
  InvitationRequest
    { invitationRequestExpires = GHC.Maybe.Nothing,
      invitationRequestFixedData = GHC.Maybe.Nothing,
      invitationRequestFlow = GHC.Maybe.Nothing,
      invitationRequestName = invitationRequestName,
      invitationRequestSingleUse = GHC.Maybe.Nothing
    }

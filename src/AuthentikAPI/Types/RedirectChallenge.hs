{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema RedirectChallenge
module AuthentikAPI.Types.RedirectChallenge where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.ContextualFlowInfo
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.RedirectChallenge@ in the specification.
--
-- Challenge type to redirect the client
data RedirectChallenge = RedirectChallenge
  { -- | component
    redirectChallengeComponent :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | flow_info: Contextual flow information for a challenge
    redirectChallengeFlowInfo :: (GHC.Maybe.Maybe ContextualFlowInfo),
    -- | response_errors
    redirectChallengeResponseErrors :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | to
    redirectChallengeTo :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON RedirectChallenge where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("component" Data.Aeson.Types.ToJSON..=)) (redirectChallengeComponent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_info" Data.Aeson.Types.ToJSON..=)) (redirectChallengeFlowInfo obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("response_errors" Data.Aeson.Types.ToJSON..=)) (redirectChallengeResponseErrors obj) : ["to" Data.Aeson.Types.ToJSON..= redirectChallengeTo obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("component" Data.Aeson.Types.ToJSON..=)) (redirectChallengeComponent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_info" Data.Aeson.Types.ToJSON..=)) (redirectChallengeFlowInfo obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("response_errors" Data.Aeson.Types.ToJSON..=)) (redirectChallengeResponseErrors obj) : ["to" Data.Aeson.Types.ToJSON..= redirectChallengeTo obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON RedirectChallenge where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "RedirectChallenge" (\obj -> (((GHC.Base.pure RedirectChallenge GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_info")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "response_errors")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "to"))

-- | Create a new 'RedirectChallenge' with all required fields.
mkRedirectChallenge ::
  -- | 'redirectChallengeTo'
  Data.Text.Internal.Text ->
  RedirectChallenge
mkRedirectChallenge redirectChallengeTo =
  RedirectChallenge
    { redirectChallengeComponent = GHC.Maybe.Nothing,
      redirectChallengeFlowInfo = GHC.Maybe.Nothing,
      redirectChallengeResponseErrors = GHC.Maybe.Nothing,
      redirectChallengeTo = redirectChallengeTo
    }

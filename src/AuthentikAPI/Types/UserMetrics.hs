{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema UserMetrics
module AuthentikAPI.Types.UserMetrics where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.Coordinate
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.UserMetrics@ in the specification.
--
-- User Metrics
data UserMetrics = UserMetrics
  { -- | authorizations
    userMetricsAuthorizations :: [Coordinate],
    -- | logins
    userMetricsLogins :: [Coordinate],
    -- | logins_failed
    userMetricsLoginsFailed :: [Coordinate]
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON UserMetrics where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["authorizations" Data.Aeson.Types.ToJSON..= userMetricsAuthorizations obj] : ["logins" Data.Aeson.Types.ToJSON..= userMetricsLogins obj] : ["logins_failed" Data.Aeson.Types.ToJSON..= userMetricsLoginsFailed obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["authorizations" Data.Aeson.Types.ToJSON..= userMetricsAuthorizations obj] : ["logins" Data.Aeson.Types.ToJSON..= userMetricsLogins obj] : ["logins_failed" Data.Aeson.Types.ToJSON..= userMetricsLoginsFailed obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON UserMetrics where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "UserMetrics" (\obj -> ((GHC.Base.pure UserMetrics GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "authorizations")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "logins")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "logins_failed"))

-- | Create a new 'UserMetrics' with all required fields.
mkUserMetrics ::
  -- | 'userMetricsAuthorizations'
  [Coordinate] ->
  -- | 'userMetricsLogins'
  [Coordinate] ->
  -- | 'userMetricsLoginsFailed'
  [Coordinate] ->
  UserMetrics
mkUserMetrics userMetricsAuthorizations userMetricsLogins userMetricsLoginsFailed =
  UserMetrics
    { userMetricsAuthorizations = userMetricsAuthorizations,
      userMetricsLogins = userMetricsLogins,
      userMetricsLoginsFailed = userMetricsLoginsFailed
    }

{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema SourceStage
module AuthentikAPI.Types.SourceStage where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.FlowSet
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.SourceStage@ in the specification.
--
-- SourceStage Serializer
data SourceStage = SourceStage
  { -- | component: Get object type so that we know how to edit the object
    sourceStageComponent :: Data.Text.Internal.Text,
    -- | flow_set
    sourceStageFlowSet :: (GHC.Maybe.Maybe [FlowSet]),
    -- | meta_model_name: Return internal model name
    sourceStageMetaModelName :: Data.Text.Internal.Text,
    -- | name
    sourceStageName :: Data.Text.Internal.Text,
    -- | pk
    sourceStagePk :: Data.Text.Internal.Text,
    -- | resume_timeout: Amount of time a user can take to return from the source to continue the flow (Format: hours=-1;minutes=-2;seconds=-3)
    sourceStageResumeTimeout :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | source
    sourceStageSource :: Data.Text.Internal.Text,
    -- | verbose_name: Return object\'s verbose_name
    sourceStageVerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    sourceStageVerboseNamePlural :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SourceStage where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["component" Data.Aeson.Types.ToJSON..= sourceStageComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_set" Data.Aeson.Types.ToJSON..=)) (sourceStageFlowSet obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= sourceStageMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= sourceStageName obj] : ["pk" Data.Aeson.Types.ToJSON..= sourceStagePk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("resume_timeout" Data.Aeson.Types.ToJSON..=)) (sourceStageResumeTimeout obj) : ["source" Data.Aeson.Types.ToJSON..= sourceStageSource obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= sourceStageVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= sourceStageVerboseNamePlural obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["component" Data.Aeson.Types.ToJSON..= sourceStageComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_set" Data.Aeson.Types.ToJSON..=)) (sourceStageFlowSet obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= sourceStageMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= sourceStageName obj] : ["pk" Data.Aeson.Types.ToJSON..= sourceStagePk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("resume_timeout" Data.Aeson.Types.ToJSON..=)) (sourceStageResumeTimeout obj) : ["source" Data.Aeson.Types.ToJSON..= sourceStageSource obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= sourceStageVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= sourceStageVerboseNamePlural obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SourceStage where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SourceStage" (\obj -> ((((((((GHC.Base.pure SourceStage GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_set")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "resume_timeout")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "source")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural"))

-- | Create a new 'SourceStage' with all required fields.
mkSourceStage ::
  -- | 'sourceStageComponent'
  Data.Text.Internal.Text ->
  -- | 'sourceStageMetaModelName'
  Data.Text.Internal.Text ->
  -- | 'sourceStageName'
  Data.Text.Internal.Text ->
  -- | 'sourceStagePk'
  Data.Text.Internal.Text ->
  -- | 'sourceStageSource'
  Data.Text.Internal.Text ->
  -- | 'sourceStageVerboseName'
  Data.Text.Internal.Text ->
  -- | 'sourceStageVerboseNamePlural'
  Data.Text.Internal.Text ->
  SourceStage
mkSourceStage sourceStageComponent sourceStageMetaModelName sourceStageName sourceStagePk sourceStageSource sourceStageVerboseName sourceStageVerboseNamePlural =
  SourceStage
    { sourceStageComponent = sourceStageComponent,
      sourceStageFlowSet = GHC.Maybe.Nothing,
      sourceStageMetaModelName = sourceStageMetaModelName,
      sourceStageName = sourceStageName,
      sourceStagePk = sourceStagePk,
      sourceStageResumeTimeout = GHC.Maybe.Nothing,
      sourceStageSource = sourceStageSource,
      sourceStageVerboseName = sourceStageVerboseName,
      sourceStageVerboseNamePlural = sourceStageVerboseNamePlural
    }

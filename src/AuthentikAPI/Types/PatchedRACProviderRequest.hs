{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PatchedRACProviderRequest
module AuthentikAPI.Types.PatchedRACProviderRequest where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.PatchedRACProviderRequest@ in the specification.
--
-- RACProvider Serializer
data PatchedRACProviderRequest = PatchedRACProviderRequest
  { -- | authentication_flow: Flow used for authentication when the associated application is accessed by an un-authenticated user.
    patchedRACProviderRequestAuthenticationFlow :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | authorization_flow: Flow used when authorizing this provider.
    patchedRACProviderRequestAuthorizationFlow :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | connection_expiry: Determines how long a session lasts. Default of 0 means that the sessions lasts until the browser is closed. (Format: hours=-1;minutes=-2;seconds=-3)
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedRACProviderRequestConnectionExpiry :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | delete_token_on_disconnect: When set to true, connection tokens will be deleted upon disconnect.
    patchedRACProviderRequestDeleteTokenOnDisconnect :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | name
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedRACProviderRequestName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | property_mappings
    patchedRACProviderRequestPropertyMappings :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | settings
    patchedRACProviderRequestSettings :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PatchedRACProviderRequest where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication_flow" Data.Aeson.Types.ToJSON..=)) (patchedRACProviderRequestAuthenticationFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authorization_flow" Data.Aeson.Types.ToJSON..=)) (patchedRACProviderRequestAuthorizationFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("connection_expiry" Data.Aeson.Types.ToJSON..=)) (patchedRACProviderRequestConnectionExpiry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delete_token_on_disconnect" Data.Aeson.Types.ToJSON..=)) (patchedRACProviderRequestDeleteTokenOnDisconnect obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (patchedRACProviderRequestName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings" Data.Aeson.Types.ToJSON..=)) (patchedRACProviderRequestPropertyMappings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("settings" Data.Aeson.Types.ToJSON..=)) (patchedRACProviderRequestSettings obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication_flow" Data.Aeson.Types.ToJSON..=)) (patchedRACProviderRequestAuthenticationFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authorization_flow" Data.Aeson.Types.ToJSON..=)) (patchedRACProviderRequestAuthorizationFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("connection_expiry" Data.Aeson.Types.ToJSON..=)) (patchedRACProviderRequestConnectionExpiry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delete_token_on_disconnect" Data.Aeson.Types.ToJSON..=)) (patchedRACProviderRequestDeleteTokenOnDisconnect obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (patchedRACProviderRequestName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings" Data.Aeson.Types.ToJSON..=)) (patchedRACProviderRequestPropertyMappings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("settings" Data.Aeson.Types.ToJSON..=)) (patchedRACProviderRequestSettings obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PatchedRACProviderRequest where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchedRACProviderRequest" (\obj -> ((((((GHC.Base.pure PatchedRACProviderRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "authentication_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "authorization_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "connection_expiry")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "delete_token_on_disconnect")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "property_mappings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "settings"))

-- | Create a new 'PatchedRACProviderRequest' with all required fields.
mkPatchedRACProviderRequest :: PatchedRACProviderRequest
mkPatchedRACProviderRequest =
  PatchedRACProviderRequest
    { patchedRACProviderRequestAuthenticationFlow = GHC.Maybe.Nothing,
      patchedRACProviderRequestAuthorizationFlow = GHC.Maybe.Nothing,
      patchedRACProviderRequestConnectionExpiry = GHC.Maybe.Nothing,
      patchedRACProviderRequestDeleteTokenOnDisconnect = GHC.Maybe.Nothing,
      patchedRACProviderRequestName = GHC.Maybe.Nothing,
      patchedRACProviderRequestPropertyMappings = GHC.Maybe.Nothing,
      patchedRACProviderRequestSettings = GHC.Maybe.Nothing
    }

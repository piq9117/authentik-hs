{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Reputation
module AuthentikAPI.Types.Reputation where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.Reputation@ in the specification.
--
-- Reputation Serializer
data Reputation = Reputation
  { -- | identifier
    reputationIdentifier :: Data.Text.Internal.Text,
    -- | ip
    reputationIp :: Data.Text.Internal.Text,
    -- | ip_asn_data
    reputationIpAsnData :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | ip_geo_data
    reputationIpGeoData :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | pk
    reputationPk :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | score
    --
    -- Constraints:
    --
    -- * Maxium  of 9.223372e18
    -- * Minimum  of -9.223372e18
    reputationScore :: (GHC.Maybe.Maybe GHC.Int.Int64),
    -- | updated
    reputationUpdated :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Reputation where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["identifier" Data.Aeson.Types.ToJSON..= reputationIdentifier obj] : ["ip" Data.Aeson.Types.ToJSON..= reputationIp obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ip_asn_data" Data.Aeson.Types.ToJSON..=)) (reputationIpAsnData obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ip_geo_data" Data.Aeson.Types.ToJSON..=)) (reputationIpGeoData obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pk" Data.Aeson.Types.ToJSON..=)) (reputationPk obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("score" Data.Aeson.Types.ToJSON..=)) (reputationScore obj) : ["updated" Data.Aeson.Types.ToJSON..= reputationUpdated obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["identifier" Data.Aeson.Types.ToJSON..= reputationIdentifier obj] : ["ip" Data.Aeson.Types.ToJSON..= reputationIp obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ip_asn_data" Data.Aeson.Types.ToJSON..=)) (reputationIpAsnData obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ip_geo_data" Data.Aeson.Types.ToJSON..=)) (reputationIpGeoData obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pk" Data.Aeson.Types.ToJSON..=)) (reputationPk obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("score" Data.Aeson.Types.ToJSON..=)) (reputationScore obj) : ["updated" Data.Aeson.Types.ToJSON..= reputationUpdated obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Reputation where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Reputation" (\obj -> ((((((GHC.Base.pure Reputation GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "identifier")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ip_asn_data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ip_geo_data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "score")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "updated"))

-- | Create a new 'Reputation' with all required fields.
mkReputation ::
  -- | 'reputationIdentifier'
  Data.Text.Internal.Text ->
  -- | 'reputationIp'
  Data.Text.Internal.Text ->
  -- | 'reputationUpdated'
  Data.Text.Internal.Text ->
  Reputation
mkReputation reputationIdentifier reputationIp reputationUpdated =
  Reputation
    { reputationIdentifier = reputationIdentifier,
      reputationIp = reputationIp,
      reputationIpAsnData = GHC.Maybe.Nothing,
      reputationIpGeoData = GHC.Maybe.Nothing,
      reputationPk = GHC.Maybe.Nothing,
      reputationScore = GHC.Maybe.Nothing,
      reputationUpdated = reputationUpdated
    }

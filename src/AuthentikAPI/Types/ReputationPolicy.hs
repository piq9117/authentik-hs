{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema ReputationPolicy
module AuthentikAPI.Types.ReputationPolicy where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.ReputationPolicy@ in the specification.
--
-- Reputation Policy Serializer
data ReputationPolicy = ReputationPolicy
  { -- | bound_to: Return objects policy is bound to
    reputationPolicyBoundTo :: GHC.Types.Int,
    -- | check_ip
    reputationPolicyCheckIp :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | check_username
    reputationPolicyCheckUsername :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | component: Get object component so that we know how to edit the object
    reputationPolicyComponent :: Data.Text.Internal.Text,
    -- | execution_logging: When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.
    reputationPolicyExecutionLogging :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | meta_model_name: Return internal model name
    reputationPolicyMetaModelName :: Data.Text.Internal.Text,
    -- | name
    reputationPolicyName :: Data.Text.Internal.Text,
    -- | pk
    reputationPolicyPk :: Data.Text.Internal.Text,
    -- | threshold
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of -2.1474836e9
    reputationPolicyThreshold :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | verbose_name: Return object\'s verbose_name
    reputationPolicyVerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    reputationPolicyVerboseNamePlural :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON ReputationPolicy where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["bound_to" Data.Aeson.Types.ToJSON..= reputationPolicyBoundTo obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("check_ip" Data.Aeson.Types.ToJSON..=)) (reputationPolicyCheckIp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("check_username" Data.Aeson.Types.ToJSON..=)) (reputationPolicyCheckUsername obj) : ["component" Data.Aeson.Types.ToJSON..= reputationPolicyComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("execution_logging" Data.Aeson.Types.ToJSON..=)) (reputationPolicyExecutionLogging obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= reputationPolicyMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= reputationPolicyName obj] : ["pk" Data.Aeson.Types.ToJSON..= reputationPolicyPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("threshold" Data.Aeson.Types.ToJSON..=)) (reputationPolicyThreshold obj) : ["verbose_name" Data.Aeson.Types.ToJSON..= reputationPolicyVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= reputationPolicyVerboseNamePlural obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["bound_to" Data.Aeson.Types.ToJSON..= reputationPolicyBoundTo obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("check_ip" Data.Aeson.Types.ToJSON..=)) (reputationPolicyCheckIp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("check_username" Data.Aeson.Types.ToJSON..=)) (reputationPolicyCheckUsername obj) : ["component" Data.Aeson.Types.ToJSON..= reputationPolicyComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("execution_logging" Data.Aeson.Types.ToJSON..=)) (reputationPolicyExecutionLogging obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= reputationPolicyMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= reputationPolicyName obj] : ["pk" Data.Aeson.Types.ToJSON..= reputationPolicyPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("threshold" Data.Aeson.Types.ToJSON..=)) (reputationPolicyThreshold obj) : ["verbose_name" Data.Aeson.Types.ToJSON..= reputationPolicyVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= reputationPolicyVerboseNamePlural obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON ReputationPolicy where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "ReputationPolicy" (\obj -> ((((((((((GHC.Base.pure ReputationPolicy GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "bound_to")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "check_ip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "check_username")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "execution_logging")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "threshold")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural"))

-- | Create a new 'ReputationPolicy' with all required fields.
mkReputationPolicy ::
  -- | 'reputationPolicyBoundTo'
  GHC.Types.Int ->
  -- | 'reputationPolicyComponent'
  Data.Text.Internal.Text ->
  -- | 'reputationPolicyMetaModelName'
  Data.Text.Internal.Text ->
  -- | 'reputationPolicyName'
  Data.Text.Internal.Text ->
  -- | 'reputationPolicyPk'
  Data.Text.Internal.Text ->
  -- | 'reputationPolicyVerboseName'
  Data.Text.Internal.Text ->
  -- | 'reputationPolicyVerboseNamePlural'
  Data.Text.Internal.Text ->
  ReputationPolicy
mkReputationPolicy reputationPolicyBoundTo reputationPolicyComponent reputationPolicyMetaModelName reputationPolicyName reputationPolicyPk reputationPolicyVerboseName reputationPolicyVerboseNamePlural =
  ReputationPolicy
    { reputationPolicyBoundTo = reputationPolicyBoundTo,
      reputationPolicyCheckIp = GHC.Maybe.Nothing,
      reputationPolicyCheckUsername = GHC.Maybe.Nothing,
      reputationPolicyComponent = reputationPolicyComponent,
      reputationPolicyExecutionLogging = GHC.Maybe.Nothing,
      reputationPolicyMetaModelName = reputationPolicyMetaModelName,
      reputationPolicyName = reputationPolicyName,
      reputationPolicyPk = reputationPolicyPk,
      reputationPolicyThreshold = GHC.Maybe.Nothing,
      reputationPolicyVerboseName = reputationPolicyVerboseName,
      reputationPolicyVerboseNamePlural = reputationPolicyVerboseNamePlural
    }

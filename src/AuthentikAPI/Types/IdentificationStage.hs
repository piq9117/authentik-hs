{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema IdentificationStage
module AuthentikAPI.Types.IdentificationStage where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.FlowSet
import {-# SOURCE #-} AuthentikAPI.Types.UserFieldsEnum
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.IdentificationStage@ in the specification.
--
-- IdentificationStage Serializer
data IdentificationStage = IdentificationStage
  { -- | captcha_stage: When set, adds functionality exactly like a Captcha stage, but baked into the Identification stage.
    identificationStageCaptchaStage :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | case_insensitive_matching: When enabled, user fields are matched regardless of their casing.
    identificationStageCaseInsensitiveMatching :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | component: Get object type so that we know how to edit the object
    identificationStageComponent :: Data.Text.Internal.Text,
    -- | enable_remember_me: Show the user the \'Remember me on this device\' toggle, allowing repeat users to skip straight to entering their password.
    identificationStageEnableRememberMe :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | enrollment_flow: Optional enrollment flow, which is linked at the bottom of the page.
    identificationStageEnrollmentFlow :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | flow_set
    identificationStageFlowSet :: (GHC.Maybe.Maybe [FlowSet]),
    -- | meta_model_name: Return internal model name
    identificationStageMetaModelName :: Data.Text.Internal.Text,
    -- | name
    identificationStageName :: Data.Text.Internal.Text,
    -- | password_stage: When set, shows a password field, instead of showing the password field as separate step.
    identificationStagePasswordStage :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | passwordless_flow: Optional passwordless flow, which is linked at the bottom of the page.
    identificationStagePasswordlessFlow :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | pk
    identificationStagePk :: Data.Text.Internal.Text,
    -- | pretend_user_exists: When enabled, the stage will succeed and continue even when incorrect user info is entered.
    identificationStagePretendUserExists :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | recovery_flow: Optional recovery flow, which is linked at the bottom of the page.
    identificationStageRecoveryFlow :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | show_matched_user: When a valid username\/email has been entered, and this option is enabled, the user\'s username and avatar will be shown. Otherwise, the text that the user entered will be shown
    identificationStageShowMatchedUser :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | show_source_labels
    identificationStageShowSourceLabels :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | sources: Specify which sources should be shown.
    identificationStageSources :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | user_fields: Fields of the user object to match against. (Hold shift to select multiple options)
    identificationStageUserFields :: (GHC.Maybe.Maybe [UserFieldsEnum]),
    -- | verbose_name: Return object\'s verbose_name
    identificationStageVerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    identificationStageVerboseNamePlural :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IdentificationStage where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("captcha_stage" Data.Aeson.Types.ToJSON..=)) (identificationStageCaptchaStage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("case_insensitive_matching" Data.Aeson.Types.ToJSON..=)) (identificationStageCaseInsensitiveMatching obj) : ["component" Data.Aeson.Types.ToJSON..= identificationStageComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enable_remember_me" Data.Aeson.Types.ToJSON..=)) (identificationStageEnableRememberMe obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enrollment_flow" Data.Aeson.Types.ToJSON..=)) (identificationStageEnrollmentFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_set" Data.Aeson.Types.ToJSON..=)) (identificationStageFlowSet obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= identificationStageMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= identificationStageName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("password_stage" Data.Aeson.Types.ToJSON..=)) (identificationStagePasswordStage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("passwordless_flow" Data.Aeson.Types.ToJSON..=)) (identificationStagePasswordlessFlow obj) : ["pk" Data.Aeson.Types.ToJSON..= identificationStagePk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pretend_user_exists" Data.Aeson.Types.ToJSON..=)) (identificationStagePretendUserExists obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("recovery_flow" Data.Aeson.Types.ToJSON..=)) (identificationStageRecoveryFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("show_matched_user" Data.Aeson.Types.ToJSON..=)) (identificationStageShowMatchedUser obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("show_source_labels" Data.Aeson.Types.ToJSON..=)) (identificationStageShowSourceLabels obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sources" Data.Aeson.Types.ToJSON..=)) (identificationStageSources obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_fields" Data.Aeson.Types.ToJSON..=)) (identificationStageUserFields obj) : ["verbose_name" Data.Aeson.Types.ToJSON..= identificationStageVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= identificationStageVerboseNamePlural obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("captcha_stage" Data.Aeson.Types.ToJSON..=)) (identificationStageCaptchaStage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("case_insensitive_matching" Data.Aeson.Types.ToJSON..=)) (identificationStageCaseInsensitiveMatching obj) : ["component" Data.Aeson.Types.ToJSON..= identificationStageComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enable_remember_me" Data.Aeson.Types.ToJSON..=)) (identificationStageEnableRememberMe obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enrollment_flow" Data.Aeson.Types.ToJSON..=)) (identificationStageEnrollmentFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_set" Data.Aeson.Types.ToJSON..=)) (identificationStageFlowSet obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= identificationStageMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= identificationStageName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("password_stage" Data.Aeson.Types.ToJSON..=)) (identificationStagePasswordStage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("passwordless_flow" Data.Aeson.Types.ToJSON..=)) (identificationStagePasswordlessFlow obj) : ["pk" Data.Aeson.Types.ToJSON..= identificationStagePk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pretend_user_exists" Data.Aeson.Types.ToJSON..=)) (identificationStagePretendUserExists obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("recovery_flow" Data.Aeson.Types.ToJSON..=)) (identificationStageRecoveryFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("show_matched_user" Data.Aeson.Types.ToJSON..=)) (identificationStageShowMatchedUser obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("show_source_labels" Data.Aeson.Types.ToJSON..=)) (identificationStageShowSourceLabels obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sources" Data.Aeson.Types.ToJSON..=)) (identificationStageSources obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_fields" Data.Aeson.Types.ToJSON..=)) (identificationStageUserFields obj) : ["verbose_name" Data.Aeson.Types.ToJSON..= identificationStageVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= identificationStageVerboseNamePlural obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON IdentificationStage where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IdentificationStage" (\obj -> ((((((((((((((((((GHC.Base.pure IdentificationStage GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "captcha_stage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "case_insensitive_matching")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "enable_remember_me")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "enrollment_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_set")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "password_stage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "passwordless_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "pretend_user_exists")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "recovery_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "show_matched_user")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "show_source_labels")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "user_fields")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural"))

-- | Create a new 'IdentificationStage' with all required fields.
mkIdentificationStage ::
  -- | 'identificationStageComponent'
  Data.Text.Internal.Text ->
  -- | 'identificationStageMetaModelName'
  Data.Text.Internal.Text ->
  -- | 'identificationStageName'
  Data.Text.Internal.Text ->
  -- | 'identificationStagePk'
  Data.Text.Internal.Text ->
  -- | 'identificationStageVerboseName'
  Data.Text.Internal.Text ->
  -- | 'identificationStageVerboseNamePlural'
  Data.Text.Internal.Text ->
  IdentificationStage
mkIdentificationStage identificationStageComponent identificationStageMetaModelName identificationStageName identificationStagePk identificationStageVerboseName identificationStageVerboseNamePlural =
  IdentificationStage
    { identificationStageCaptchaStage = GHC.Maybe.Nothing,
      identificationStageCaseInsensitiveMatching = GHC.Maybe.Nothing,
      identificationStageComponent = identificationStageComponent,
      identificationStageEnableRememberMe = GHC.Maybe.Nothing,
      identificationStageEnrollmentFlow = GHC.Maybe.Nothing,
      identificationStageFlowSet = GHC.Maybe.Nothing,
      identificationStageMetaModelName = identificationStageMetaModelName,
      identificationStageName = identificationStageName,
      identificationStagePasswordStage = GHC.Maybe.Nothing,
      identificationStagePasswordlessFlow = GHC.Maybe.Nothing,
      identificationStagePk = identificationStagePk,
      identificationStagePretendUserExists = GHC.Maybe.Nothing,
      identificationStageRecoveryFlow = GHC.Maybe.Nothing,
      identificationStageShowMatchedUser = GHC.Maybe.Nothing,
      identificationStageShowSourceLabels = GHC.Maybe.Nothing,
      identificationStageSources = GHC.Maybe.Nothing,
      identificationStageUserFields = GHC.Maybe.Nothing,
      identificationStageVerboseName = identificationStageVerboseName,
      identificationStageVerboseNamePlural = identificationStageVerboseNamePlural
    }

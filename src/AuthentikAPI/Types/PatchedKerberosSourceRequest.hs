{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PatchedKerberosSourceRequest
module AuthentikAPI.Types.PatchedKerberosSourceRequest where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.PolicyEngineMode
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.PatchedKerberosSourceRequest@ in the specification.
--
-- Kerberos Source Serializer
data PatchedKerberosSourceRequest = PatchedKerberosSourceRequest
  { -- | authentication_flow: Flow to use when authenticating existing users.
    patchedKerberosSourceRequestAuthenticationFlow :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | enabled
    patchedKerberosSourceRequestEnabled :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | enrollment_flow: Flow to use when enrolling new users.
    patchedKerberosSourceRequestEnrollmentFlow :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | group_matching_mode: How the source determines if an existing group should be used or a new group created.
    patchedKerberosSourceRequestGroupMatchingMode :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | group_property_mappings
    patchedKerberosSourceRequestGroupPropertyMappings :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | kadmin_type: KAdmin server type
    patchedKerberosSourceRequestKadminType :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | krb5_conf: Custom krb5.conf to use. Uses the system one by default
    patchedKerberosSourceRequestKrb5Conf :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | name: Source\'s display Name.
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedKerberosSourceRequestName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | password_login_update_internal_password: If enabled, the authentik-stored password will be updated upon login with the Kerberos password backend
    patchedKerberosSourceRequestPasswordLoginUpdateInternalPassword :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | policy_engine_mode
    patchedKerberosSourceRequestPolicyEngineMode :: (GHC.Maybe.Maybe PolicyEngineMode),
    -- | realm: Kerberos realm
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedKerberosSourceRequestRealm :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | slug: Internal source name, used in URLs.
    --
    -- Constraints:
    --
    -- * Maximum length of 50
    -- * Minimum length of 1
    -- * Must match pattern \'^[-a-zA-Z0-9_]+\$\'
    patchedKerberosSourceRequestSlug :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | spnego_ccache: Credential cache to use for SPNEGO in form type:residual
    patchedKerberosSourceRequestSpnegoCcache :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | spnego_keytab: SPNEGO keytab base64-encoded or path to keytab in the form FILE:path
    patchedKerberosSourceRequestSpnegoKeytab :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | spnego_server_name: Force the use of a specific server name for SPNEGO. Must be in the form HTTP\@hostname
    patchedKerberosSourceRequestSpnegoServerName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | sync_ccache: Credentials cache to authenticate to kadmin for sync. Must be in the form TYPE:residual
    patchedKerberosSourceRequestSyncCcache :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | sync_keytab: Keytab to authenticate to kadmin for sync. Must be base64-encoded or in the form TYPE:residual
    patchedKerberosSourceRequestSyncKeytab :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | sync_password: Password to authenticate to kadmin for sync
    patchedKerberosSourceRequestSyncPassword :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | sync_principal: Principal to authenticate to kadmin for sync.
    patchedKerberosSourceRequestSyncPrincipal :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | sync_users: Sync users from Kerberos into authentik
    patchedKerberosSourceRequestSyncUsers :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | sync_users_password: When a user changes their password, sync it back to Kerberos
    patchedKerberosSourceRequestSyncUsersPassword :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | user_matching_mode: How the source determines if an existing user should be authenticated or a new user enrolled.
    patchedKerberosSourceRequestUserMatchingMode :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | user_path_template
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedKerberosSourceRequestUserPathTemplate :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | user_property_mappings
    patchedKerberosSourceRequestUserPropertyMappings :: (GHC.Maybe.Maybe [Data.Text.Internal.Text])
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PatchedKerberosSourceRequest where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication_flow" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestAuthenticationFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enabled" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enrollment_flow" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestEnrollmentFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("group_matching_mode" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestGroupMatchingMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("group_property_mappings" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestGroupPropertyMappings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("kadmin_type" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestKadminType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("krb5_conf" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestKrb5Conf obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("password_login_update_internal_password" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestPasswordLoginUpdateInternalPassword obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("policy_engine_mode" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestPolicyEngineMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("realm" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestRealm obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("slug" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestSlug obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("spnego_ccache" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestSpnegoCcache obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("spnego_keytab" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestSpnegoKeytab obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("spnego_server_name" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestSpnegoServerName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sync_ccache" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestSyncCcache obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sync_keytab" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestSyncKeytab obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sync_password" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestSyncPassword obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sync_principal" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestSyncPrincipal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sync_users" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestSyncUsers obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sync_users_password" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestSyncUsersPassword obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_matching_mode" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestUserMatchingMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_path_template" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestUserPathTemplate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_property_mappings" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestUserPropertyMappings obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication_flow" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestAuthenticationFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enabled" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enrollment_flow" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestEnrollmentFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("group_matching_mode" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestGroupMatchingMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("group_property_mappings" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestGroupPropertyMappings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("kadmin_type" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestKadminType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("krb5_conf" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestKrb5Conf obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("password_login_update_internal_password" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestPasswordLoginUpdateInternalPassword obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("policy_engine_mode" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestPolicyEngineMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("realm" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestRealm obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("slug" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestSlug obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("spnego_ccache" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestSpnegoCcache obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("spnego_keytab" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestSpnegoKeytab obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("spnego_server_name" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestSpnegoServerName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sync_ccache" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestSyncCcache obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sync_keytab" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestSyncKeytab obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sync_password" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestSyncPassword obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sync_principal" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestSyncPrincipal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sync_users" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestSyncUsers obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sync_users_password" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestSyncUsersPassword obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_matching_mode" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestUserMatchingMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_path_template" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestUserPathTemplate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_property_mappings" Data.Aeson.Types.ToJSON..=)) (patchedKerberosSourceRequestUserPropertyMappings obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PatchedKerberosSourceRequest where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchedKerberosSourceRequest" (\obj -> (((((((((((((((((((((((GHC.Base.pure PatchedKerberosSourceRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "authentication_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "enrollment_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "group_matching_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "group_property_mappings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "kadmin_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "krb5_conf")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "password_login_update_internal_password")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "policy_engine_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "realm")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "slug")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "spnego_ccache")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "spnego_keytab")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "spnego_server_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sync_ccache")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sync_keytab")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sync_password")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sync_principal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sync_users")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sync_users_password")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "user_matching_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "user_path_template")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "user_property_mappings"))

-- | Create a new 'PatchedKerberosSourceRequest' with all required fields.
mkPatchedKerberosSourceRequest :: PatchedKerberosSourceRequest
mkPatchedKerberosSourceRequest =
  PatchedKerberosSourceRequest
    { patchedKerberosSourceRequestAuthenticationFlow = GHC.Maybe.Nothing,
      patchedKerberosSourceRequestEnabled = GHC.Maybe.Nothing,
      patchedKerberosSourceRequestEnrollmentFlow = GHC.Maybe.Nothing,
      patchedKerberosSourceRequestGroupMatchingMode = GHC.Maybe.Nothing,
      patchedKerberosSourceRequestGroupPropertyMappings = GHC.Maybe.Nothing,
      patchedKerberosSourceRequestKadminType = GHC.Maybe.Nothing,
      patchedKerberosSourceRequestKrb5Conf = GHC.Maybe.Nothing,
      patchedKerberosSourceRequestName = GHC.Maybe.Nothing,
      patchedKerberosSourceRequestPasswordLoginUpdateInternalPassword = GHC.Maybe.Nothing,
      patchedKerberosSourceRequestPolicyEngineMode = GHC.Maybe.Nothing,
      patchedKerberosSourceRequestRealm = GHC.Maybe.Nothing,
      patchedKerberosSourceRequestSlug = GHC.Maybe.Nothing,
      patchedKerberosSourceRequestSpnegoCcache = GHC.Maybe.Nothing,
      patchedKerberosSourceRequestSpnegoKeytab = GHC.Maybe.Nothing,
      patchedKerberosSourceRequestSpnegoServerName = GHC.Maybe.Nothing,
      patchedKerberosSourceRequestSyncCcache = GHC.Maybe.Nothing,
      patchedKerberosSourceRequestSyncKeytab = GHC.Maybe.Nothing,
      patchedKerberosSourceRequestSyncPassword = GHC.Maybe.Nothing,
      patchedKerberosSourceRequestSyncPrincipal = GHC.Maybe.Nothing,
      patchedKerberosSourceRequestSyncUsers = GHC.Maybe.Nothing,
      patchedKerberosSourceRequestSyncUsersPassword = GHC.Maybe.Nothing,
      patchedKerberosSourceRequestUserMatchingMode = GHC.Maybe.Nothing,
      patchedKerberosSourceRequestUserPathTemplate = GHC.Maybe.Nothing,
      patchedKerberosSourceRequestUserPropertyMappings = GHC.Maybe.Nothing
    }

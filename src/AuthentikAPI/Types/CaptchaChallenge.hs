{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema CaptchaChallenge
module AuthentikAPI.Types.CaptchaChallenge where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.ContextualFlowInfo
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.CaptchaChallenge@ in the specification.
--
-- Site public key
data CaptchaChallenge = CaptchaChallenge
  { -- | component
    captchaChallengeComponent :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | flow_info: Contextual flow information for a challenge
    captchaChallengeFlowInfo :: (GHC.Maybe.Maybe ContextualFlowInfo),
    -- | interactive
    captchaChallengeInteractive :: GHC.Types.Bool,
    -- | js_url
    captchaChallengeJsUrl :: Data.Text.Internal.Text,
    -- | pending_user
    captchaChallengePendingUser :: Data.Text.Internal.Text,
    -- | pending_user_avatar
    captchaChallengePendingUserAvatar :: Data.Text.Internal.Text,
    -- | response_errors
    captchaChallengeResponseErrors :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | site_key
    captchaChallengeSiteKey :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON CaptchaChallenge where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("component" Data.Aeson.Types.ToJSON..=)) (captchaChallengeComponent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_info" Data.Aeson.Types.ToJSON..=)) (captchaChallengeFlowInfo obj) : ["interactive" Data.Aeson.Types.ToJSON..= captchaChallengeInteractive obj] : ["js_url" Data.Aeson.Types.ToJSON..= captchaChallengeJsUrl obj] : ["pending_user" Data.Aeson.Types.ToJSON..= captchaChallengePendingUser obj] : ["pending_user_avatar" Data.Aeson.Types.ToJSON..= captchaChallengePendingUserAvatar obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("response_errors" Data.Aeson.Types.ToJSON..=)) (captchaChallengeResponseErrors obj) : ["site_key" Data.Aeson.Types.ToJSON..= captchaChallengeSiteKey obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("component" Data.Aeson.Types.ToJSON..=)) (captchaChallengeComponent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_info" Data.Aeson.Types.ToJSON..=)) (captchaChallengeFlowInfo obj) : ["interactive" Data.Aeson.Types.ToJSON..= captchaChallengeInteractive obj] : ["js_url" Data.Aeson.Types.ToJSON..= captchaChallengeJsUrl obj] : ["pending_user" Data.Aeson.Types.ToJSON..= captchaChallengePendingUser obj] : ["pending_user_avatar" Data.Aeson.Types.ToJSON..= captchaChallengePendingUserAvatar obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("response_errors" Data.Aeson.Types.ToJSON..=)) (captchaChallengeResponseErrors obj) : ["site_key" Data.Aeson.Types.ToJSON..= captchaChallengeSiteKey obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON CaptchaChallenge where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "CaptchaChallenge" (\obj -> (((((((GHC.Base.pure CaptchaChallenge GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_info")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "interactive")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "js_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pending_user")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pending_user_avatar")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "response_errors")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "site_key"))

-- | Create a new 'CaptchaChallenge' with all required fields.
mkCaptchaChallenge ::
  -- | 'captchaChallengeInteractive'
  GHC.Types.Bool ->
  -- | 'captchaChallengeJsUrl'
  Data.Text.Internal.Text ->
  -- | 'captchaChallengePendingUser'
  Data.Text.Internal.Text ->
  -- | 'captchaChallengePendingUserAvatar'
  Data.Text.Internal.Text ->
  -- | 'captchaChallengeSiteKey'
  Data.Text.Internal.Text ->
  CaptchaChallenge
mkCaptchaChallenge captchaChallengeInteractive captchaChallengeJsUrl captchaChallengePendingUser captchaChallengePendingUserAvatar captchaChallengeSiteKey =
  CaptchaChallenge
    { captchaChallengeComponent = GHC.Maybe.Nothing,
      captchaChallengeFlowInfo = GHC.Maybe.Nothing,
      captchaChallengeInteractive = captchaChallengeInteractive,
      captchaChallengeJsUrl = captchaChallengeJsUrl,
      captchaChallengePendingUser = captchaChallengePendingUser,
      captchaChallengePendingUserAvatar = captchaChallengePendingUserAvatar,
      captchaChallengeResponseErrors = GHC.Maybe.Nothing,
      captchaChallengeSiteKey = captchaChallengeSiteKey
    }

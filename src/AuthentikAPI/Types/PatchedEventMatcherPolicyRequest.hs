{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PatchedEventMatcherPolicyRequest
module AuthentikAPI.Types.PatchedEventMatcherPolicyRequest where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.PatchedEventMatcherPolicyRequest@ in the specification.
--
-- Event Matcher Policy Serializer
data PatchedEventMatcherPolicyRequest = PatchedEventMatcherPolicyRequest
  { -- | action: Match created events with this action type. When left empty, all action types will be matched.
    patchedEventMatcherPolicyRequestAction :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Aeson.Types.Internal.Object)),
    -- | app: Match events created by selected application. When left empty, all applications are matched.
    patchedEventMatcherPolicyRequestApp :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Aeson.Types.Internal.Object)),
    -- | client_ip: Matches Event\'s Client IP (strict matching, for network matching use an Expression Policy)
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedEventMatcherPolicyRequestClientIp :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | execution_logging: When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.
    patchedEventMatcherPolicyRequestExecutionLogging :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | model: Match events created by selected model. When left empty, all models are matched. When an app is selected, all the application\'s models are matched.
    patchedEventMatcherPolicyRequestModel :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Aeson.Types.Internal.Object)),
    -- | name
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedEventMatcherPolicyRequestName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PatchedEventMatcherPolicyRequest where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("action" Data.Aeson.Types.ToJSON..=)) (patchedEventMatcherPolicyRequestAction obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("app" Data.Aeson.Types.ToJSON..=)) (patchedEventMatcherPolicyRequestApp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("client_ip" Data.Aeson.Types.ToJSON..=)) (patchedEventMatcherPolicyRequestClientIp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("execution_logging" Data.Aeson.Types.ToJSON..=)) (patchedEventMatcherPolicyRequestExecutionLogging obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("model" Data.Aeson.Types.ToJSON..=)) (patchedEventMatcherPolicyRequestModel obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (patchedEventMatcherPolicyRequestName obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("action" Data.Aeson.Types.ToJSON..=)) (patchedEventMatcherPolicyRequestAction obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("app" Data.Aeson.Types.ToJSON..=)) (patchedEventMatcherPolicyRequestApp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("client_ip" Data.Aeson.Types.ToJSON..=)) (patchedEventMatcherPolicyRequestClientIp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("execution_logging" Data.Aeson.Types.ToJSON..=)) (patchedEventMatcherPolicyRequestExecutionLogging obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("model" Data.Aeson.Types.ToJSON..=)) (patchedEventMatcherPolicyRequestModel obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (patchedEventMatcherPolicyRequestName obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PatchedEventMatcherPolicyRequest where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchedEventMatcherPolicyRequest" (\obj -> (((((GHC.Base.pure PatchedEventMatcherPolicyRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "action")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "app")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "client_ip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "execution_logging")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "model")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "name"))

-- | Create a new 'PatchedEventMatcherPolicyRequest' with all required fields.
mkPatchedEventMatcherPolicyRequest :: PatchedEventMatcherPolicyRequest
mkPatchedEventMatcherPolicyRequest =
  PatchedEventMatcherPolicyRequest
    { patchedEventMatcherPolicyRequestAction = GHC.Maybe.Nothing,
      patchedEventMatcherPolicyRequestApp = GHC.Maybe.Nothing,
      patchedEventMatcherPolicyRequestClientIp = GHC.Maybe.Nothing,
      patchedEventMatcherPolicyRequestExecutionLogging = GHC.Maybe.Nothing,
      patchedEventMatcherPolicyRequestModel = GHC.Maybe.Nothing,
      patchedEventMatcherPolicyRequestName = GHC.Maybe.Nothing
    }

{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Token
module AuthentikAPI.Types.Token where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.IntentEnum
import {-# SOURCE #-} AuthentikAPI.Types.User
import {-# SOURCE #-} AuthentikAPI.Types.UserGroup
import {-# SOURCE #-} AuthentikAPI.Types.UserTypeEnum
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.Token@ in the specification.
--
-- Token Serializer
data Token = Token
  { -- | description
    tokenDescription :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | expires
    tokenExpires :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | expiring
    tokenExpiring :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | identifier
    --
    -- Constraints:
    --
    -- * Maximum length of 255
    -- * Must match pattern \'^[-a-zA-Z0-9_]+\$\'
    tokenIdentifier :: Data.Text.Internal.Text,
    -- | intent
    tokenIntent :: (GHC.Maybe.Maybe IntentEnum),
    -- | managed: Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
    tokenManaged :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | pk
    tokenPk :: Data.Text.Internal.Text,
    -- | user
    tokenUser :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | user_obj
    tokenUserObj :: TokenUserObj'
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Token where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (tokenDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires" Data.Aeson.Types.ToJSON..=)) (tokenExpires obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expiring" Data.Aeson.Types.ToJSON..=)) (tokenExpiring obj) : ["identifier" Data.Aeson.Types.ToJSON..= tokenIdentifier obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("intent" Data.Aeson.Types.ToJSON..=)) (tokenIntent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("managed" Data.Aeson.Types.ToJSON..=)) (tokenManaged obj) : ["pk" Data.Aeson.Types.ToJSON..= tokenPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user" Data.Aeson.Types.ToJSON..=)) (tokenUser obj) : ["user_obj" Data.Aeson.Types.ToJSON..= tokenUserObj obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (tokenDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires" Data.Aeson.Types.ToJSON..=)) (tokenExpires obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expiring" Data.Aeson.Types.ToJSON..=)) (tokenExpiring obj) : ["identifier" Data.Aeson.Types.ToJSON..= tokenIdentifier obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("intent" Data.Aeson.Types.ToJSON..=)) (tokenIntent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("managed" Data.Aeson.Types.ToJSON..=)) (tokenManaged obj) : ["pk" Data.Aeson.Types.ToJSON..= tokenPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user" Data.Aeson.Types.ToJSON..=)) (tokenUser obj) : ["user_obj" Data.Aeson.Types.ToJSON..= tokenUserObj obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Token where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Token" (\obj -> ((((((((GHC.Base.pure Token GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expires")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expiring")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "identifier")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "intent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "managed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "user")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "user_obj"))

-- | Create a new 'Token' with all required fields.
mkToken ::
  -- | 'tokenIdentifier'
  Data.Text.Internal.Text ->
  -- | 'tokenPk'
  Data.Text.Internal.Text ->
  -- | 'tokenUserObj'
  TokenUserObj' ->
  Token
mkToken tokenIdentifier tokenPk tokenUserObj =
  Token
    { tokenDescription = GHC.Maybe.Nothing,
      tokenExpires = GHC.Maybe.Nothing,
      tokenExpiring = GHC.Maybe.Nothing,
      tokenIdentifier = tokenIdentifier,
      tokenIntent = GHC.Maybe.Nothing,
      tokenManaged = GHC.Maybe.Nothing,
      tokenPk = tokenPk,
      tokenUser = GHC.Maybe.Nothing,
      tokenUserObj = tokenUserObj
    }

-- | Defines the object schema located at @components.schemas.Token.properties.user_obj.allOf@ in the specification.
data TokenUserObj' = TokenUserObj'
  { -- | attributes
    tokenUserObj'Attributes :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | avatar: User\'s avatar, either a http\/https URL or a data URI
    tokenUserObj'Avatar :: Data.Text.Internal.Text,
    -- | date_joined
    tokenUserObj'DateJoined :: Data.Text.Internal.Text,
    -- | email
    --
    -- Constraints:
    --
    -- * Maximum length of 254
    tokenUserObj'Email :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | groups
    tokenUserObj'Groups :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | groups_obj
    tokenUserObj'GroupsObj :: (AuthentikAPI.Common.Nullable [UserGroup]),
    -- | is_active: Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
    tokenUserObj'IsActive :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | is_superuser
    tokenUserObj'IsSuperuser :: GHC.Types.Bool,
    -- | last_login
    tokenUserObj'LastLogin :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | name: User\'s display name.
    tokenUserObj'Name :: Data.Text.Internal.Text,
    -- | password_change_date
    tokenUserObj'PasswordChangeDate :: Data.Text.Internal.Text,
    -- | path
    tokenUserObj'Path :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | pk
    tokenUserObj'Pk :: GHC.Types.Int,
    -- | type
    tokenUserObj'Type :: (GHC.Maybe.Maybe UserTypeEnum),
    -- | uid
    tokenUserObj'Uid :: Data.Text.Internal.Text,
    -- | username
    --
    -- Constraints:
    --
    -- * Maximum length of 150
    tokenUserObj'Username :: Data.Text.Internal.Text,
    -- | uuid
    tokenUserObj'Uuid :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON TokenUserObj' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (tokenUserObj'Attributes obj) : ["avatar" Data.Aeson.Types.ToJSON..= tokenUserObj'Avatar obj] : ["date_joined" Data.Aeson.Types.ToJSON..= tokenUserObj'DateJoined obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (tokenUserObj'Email obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("groups" Data.Aeson.Types.ToJSON..=)) (tokenUserObj'Groups obj) : ["groups_obj" Data.Aeson.Types.ToJSON..= tokenUserObj'GroupsObj obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_active" Data.Aeson.Types.ToJSON..=)) (tokenUserObj'IsActive obj) : ["is_superuser" Data.Aeson.Types.ToJSON..= tokenUserObj'IsSuperuser obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_login" Data.Aeson.Types.ToJSON..=)) (tokenUserObj'LastLogin obj) : ["name" Data.Aeson.Types.ToJSON..= tokenUserObj'Name obj] : ["password_change_date" Data.Aeson.Types.ToJSON..= tokenUserObj'PasswordChangeDate obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("path" Data.Aeson.Types.ToJSON..=)) (tokenUserObj'Path obj) : ["pk" Data.Aeson.Types.ToJSON..= tokenUserObj'Pk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (tokenUserObj'Type obj) : ["uid" Data.Aeson.Types.ToJSON..= tokenUserObj'Uid obj] : ["username" Data.Aeson.Types.ToJSON..= tokenUserObj'Username obj] : ["uuid" Data.Aeson.Types.ToJSON..= tokenUserObj'Uuid obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (tokenUserObj'Attributes obj) : ["avatar" Data.Aeson.Types.ToJSON..= tokenUserObj'Avatar obj] : ["date_joined" Data.Aeson.Types.ToJSON..= tokenUserObj'DateJoined obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (tokenUserObj'Email obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("groups" Data.Aeson.Types.ToJSON..=)) (tokenUserObj'Groups obj) : ["groups_obj" Data.Aeson.Types.ToJSON..= tokenUserObj'GroupsObj obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_active" Data.Aeson.Types.ToJSON..=)) (tokenUserObj'IsActive obj) : ["is_superuser" Data.Aeson.Types.ToJSON..= tokenUserObj'IsSuperuser obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_login" Data.Aeson.Types.ToJSON..=)) (tokenUserObj'LastLogin obj) : ["name" Data.Aeson.Types.ToJSON..= tokenUserObj'Name obj] : ["password_change_date" Data.Aeson.Types.ToJSON..= tokenUserObj'PasswordChangeDate obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("path" Data.Aeson.Types.ToJSON..=)) (tokenUserObj'Path obj) : ["pk" Data.Aeson.Types.ToJSON..= tokenUserObj'Pk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (tokenUserObj'Type obj) : ["uid" Data.Aeson.Types.ToJSON..= tokenUserObj'Uid obj] : ["username" Data.Aeson.Types.ToJSON..= tokenUserObj'Username obj] : ["uuid" Data.Aeson.Types.ToJSON..= tokenUserObj'Uuid obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON TokenUserObj' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "TokenUserObj'" (\obj -> ((((((((((((((((GHC.Base.pure TokenUserObj' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "attributes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "avatar")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "date_joined")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "groups")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "groups_obj")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "is_active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "is_superuser")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "last_login")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "password_change_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "path")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "uid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "username")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "uuid"))

-- | Create a new 'TokenUserObj'' with all required fields.
mkTokenUserObj' ::
  -- | 'tokenUserObj'Avatar'
  Data.Text.Internal.Text ->
  -- | 'tokenUserObj'DateJoined'
  Data.Text.Internal.Text ->
  -- | 'tokenUserObj'GroupsObj'
  AuthentikAPI.Common.Nullable [UserGroup] ->
  -- | 'tokenUserObj'IsSuperuser'
  GHC.Types.Bool ->
  -- | 'tokenUserObj'Name'
  Data.Text.Internal.Text ->
  -- | 'tokenUserObj'PasswordChangeDate'
  Data.Text.Internal.Text ->
  -- | 'tokenUserObj'Pk'
  GHC.Types.Int ->
  -- | 'tokenUserObj'Uid'
  Data.Text.Internal.Text ->
  -- | 'tokenUserObj'Username'
  Data.Text.Internal.Text ->
  -- | 'tokenUserObj'Uuid'
  Data.Text.Internal.Text ->
  TokenUserObj'
mkTokenUserObj' tokenUserObj'Avatar tokenUserObj'DateJoined tokenUserObj'GroupsObj tokenUserObj'IsSuperuser tokenUserObj'Name tokenUserObj'PasswordChangeDate tokenUserObj'Pk tokenUserObj'Uid tokenUserObj'Username tokenUserObj'Uuid =
  TokenUserObj'
    { tokenUserObj'Attributes = GHC.Maybe.Nothing,
      tokenUserObj'Avatar = tokenUserObj'Avatar,
      tokenUserObj'DateJoined = tokenUserObj'DateJoined,
      tokenUserObj'Email = GHC.Maybe.Nothing,
      tokenUserObj'Groups = GHC.Maybe.Nothing,
      tokenUserObj'GroupsObj = tokenUserObj'GroupsObj,
      tokenUserObj'IsActive = GHC.Maybe.Nothing,
      tokenUserObj'IsSuperuser = tokenUserObj'IsSuperuser,
      tokenUserObj'LastLogin = GHC.Maybe.Nothing,
      tokenUserObj'Name = tokenUserObj'Name,
      tokenUserObj'PasswordChangeDate = tokenUserObj'PasswordChangeDate,
      tokenUserObj'Path = GHC.Maybe.Nothing,
      tokenUserObj'Pk = tokenUserObj'Pk,
      tokenUserObj'Type = GHC.Maybe.Nothing,
      tokenUserObj'Uid = tokenUserObj'Uid,
      tokenUserObj'Username = tokenUserObj'Username,
      tokenUserObj'Uuid = tokenUserObj'Uuid
    }

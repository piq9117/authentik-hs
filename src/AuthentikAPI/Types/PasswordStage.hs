{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PasswordStage
module AuthentikAPI.Types.PasswordStage where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.BackendsEnum
import {-# SOURCE #-} AuthentikAPI.Types.FlowSet
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.PasswordStage@ in the specification.
--
-- PasswordStage Serializer
data PasswordStage = PasswordStage
  { -- | allow_show_password: When enabled, provides a \'show password\' button with the password input field.
    passwordStageAllowShowPassword :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | backends: Selection of backends to test the password against.
    passwordStageBackends :: [BackendsEnum],
    -- | component: Get object type so that we know how to edit the object
    passwordStageComponent :: Data.Text.Internal.Text,
    -- | configure_flow: Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
    passwordStageConfigureFlow :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | failed_attempts_before_cancel: How many attempts a user has before the flow is canceled. To lock the user out, use a reputation policy and a user_write stage.
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of -2.1474836e9
    passwordStageFailedAttemptsBeforeCancel :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | flow_set
    passwordStageFlowSet :: (GHC.Maybe.Maybe [FlowSet]),
    -- | meta_model_name: Return internal model name
    passwordStageMetaModelName :: Data.Text.Internal.Text,
    -- | name
    passwordStageName :: Data.Text.Internal.Text,
    -- | pk
    passwordStagePk :: Data.Text.Internal.Text,
    -- | verbose_name: Return object\'s verbose_name
    passwordStageVerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    passwordStageVerboseNamePlural :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PasswordStage where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allow_show_password" Data.Aeson.Types.ToJSON..=)) (passwordStageAllowShowPassword obj) : ["backends" Data.Aeson.Types.ToJSON..= passwordStageBackends obj] : ["component" Data.Aeson.Types.ToJSON..= passwordStageComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("configure_flow" Data.Aeson.Types.ToJSON..=)) (passwordStageConfigureFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("failed_attempts_before_cancel" Data.Aeson.Types.ToJSON..=)) (passwordStageFailedAttemptsBeforeCancel obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_set" Data.Aeson.Types.ToJSON..=)) (passwordStageFlowSet obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= passwordStageMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= passwordStageName obj] : ["pk" Data.Aeson.Types.ToJSON..= passwordStagePk obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= passwordStageVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= passwordStageVerboseNamePlural obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allow_show_password" Data.Aeson.Types.ToJSON..=)) (passwordStageAllowShowPassword obj) : ["backends" Data.Aeson.Types.ToJSON..= passwordStageBackends obj] : ["component" Data.Aeson.Types.ToJSON..= passwordStageComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("configure_flow" Data.Aeson.Types.ToJSON..=)) (passwordStageConfigureFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("failed_attempts_before_cancel" Data.Aeson.Types.ToJSON..=)) (passwordStageFailedAttemptsBeforeCancel obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_set" Data.Aeson.Types.ToJSON..=)) (passwordStageFlowSet obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= passwordStageMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= passwordStageName obj] : ["pk" Data.Aeson.Types.ToJSON..= passwordStagePk obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= passwordStageVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= passwordStageVerboseNamePlural obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PasswordStage where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PasswordStage" (\obj -> ((((((((((GHC.Base.pure PasswordStage GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "allow_show_password")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "backends")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "configure_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "failed_attempts_before_cancel")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_set")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural"))

-- | Create a new 'PasswordStage' with all required fields.
mkPasswordStage ::
  -- | 'passwordStageBackends'
  [BackendsEnum] ->
  -- | 'passwordStageComponent'
  Data.Text.Internal.Text ->
  -- | 'passwordStageMetaModelName'
  Data.Text.Internal.Text ->
  -- | 'passwordStageName'
  Data.Text.Internal.Text ->
  -- | 'passwordStagePk'
  Data.Text.Internal.Text ->
  -- | 'passwordStageVerboseName'
  Data.Text.Internal.Text ->
  -- | 'passwordStageVerboseNamePlural'
  Data.Text.Internal.Text ->
  PasswordStage
mkPasswordStage passwordStageBackends passwordStageComponent passwordStageMetaModelName passwordStageName passwordStagePk passwordStageVerboseName passwordStageVerboseNamePlural =
  PasswordStage
    { passwordStageAllowShowPassword = GHC.Maybe.Nothing,
      passwordStageBackends = passwordStageBackends,
      passwordStageComponent = passwordStageComponent,
      passwordStageConfigureFlow = GHC.Maybe.Nothing,
      passwordStageFailedAttemptsBeforeCancel = GHC.Maybe.Nothing,
      passwordStageFlowSet = GHC.Maybe.Nothing,
      passwordStageMetaModelName = passwordStageMetaModelName,
      passwordStageName = passwordStageName,
      passwordStagePk = passwordStagePk,
      passwordStageVerboseName = passwordStageVerboseName,
      passwordStageVerboseNamePlural = passwordStageVerboseNamePlural
    }

{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema AuthenticatorEmailChallenge
module AuthentikAPI.Types.AuthenticatorEmailChallenge where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.ContextualFlowInfo
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.AuthenticatorEmailChallenge@ in the specification.
--
-- Authenticator Email Setup challenge
data AuthenticatorEmailChallenge = AuthenticatorEmailChallenge
  { -- | component
    authenticatorEmailChallengeComponent :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | email
    authenticatorEmailChallengeEmail :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | email_required
    authenticatorEmailChallengeEmailRequired :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | flow_info: Contextual flow information for a challenge
    authenticatorEmailChallengeFlowInfo :: (GHC.Maybe.Maybe ContextualFlowInfo),
    -- | pending_user
    authenticatorEmailChallengePendingUser :: Data.Text.Internal.Text,
    -- | pending_user_avatar
    authenticatorEmailChallengePendingUserAvatar :: Data.Text.Internal.Text,
    -- | response_errors
    authenticatorEmailChallengeResponseErrors :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON AuthenticatorEmailChallenge where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("component" Data.Aeson.Types.ToJSON..=)) (authenticatorEmailChallengeComponent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (authenticatorEmailChallengeEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email_required" Data.Aeson.Types.ToJSON..=)) (authenticatorEmailChallengeEmailRequired obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_info" Data.Aeson.Types.ToJSON..=)) (authenticatorEmailChallengeFlowInfo obj) : ["pending_user" Data.Aeson.Types.ToJSON..= authenticatorEmailChallengePendingUser obj] : ["pending_user_avatar" Data.Aeson.Types.ToJSON..= authenticatorEmailChallengePendingUserAvatar obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("response_errors" Data.Aeson.Types.ToJSON..=)) (authenticatorEmailChallengeResponseErrors obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("component" Data.Aeson.Types.ToJSON..=)) (authenticatorEmailChallengeComponent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (authenticatorEmailChallengeEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email_required" Data.Aeson.Types.ToJSON..=)) (authenticatorEmailChallengeEmailRequired obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_info" Data.Aeson.Types.ToJSON..=)) (authenticatorEmailChallengeFlowInfo obj) : ["pending_user" Data.Aeson.Types.ToJSON..= authenticatorEmailChallengePendingUser obj] : ["pending_user_avatar" Data.Aeson.Types.ToJSON..= authenticatorEmailChallengePendingUserAvatar obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("response_errors" Data.Aeson.Types.ToJSON..=)) (authenticatorEmailChallengeResponseErrors obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON AuthenticatorEmailChallenge where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "AuthenticatorEmailChallenge" (\obj -> ((((((GHC.Base.pure AuthenticatorEmailChallenge GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "email_required")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_info")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pending_user")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pending_user_avatar")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "response_errors"))

-- | Create a new 'AuthenticatorEmailChallenge' with all required fields.
mkAuthenticatorEmailChallenge ::
  -- | 'authenticatorEmailChallengePendingUser'
  Data.Text.Internal.Text ->
  -- | 'authenticatorEmailChallengePendingUserAvatar'
  Data.Text.Internal.Text ->
  AuthenticatorEmailChallenge
mkAuthenticatorEmailChallenge authenticatorEmailChallengePendingUser authenticatorEmailChallengePendingUserAvatar =
  AuthenticatorEmailChallenge
    { authenticatorEmailChallengeComponent = GHC.Maybe.Nothing,
      authenticatorEmailChallengeEmail = GHC.Maybe.Nothing,
      authenticatorEmailChallengeEmailRequired = GHC.Maybe.Nothing,
      authenticatorEmailChallengeFlowInfo = GHC.Maybe.Nothing,
      authenticatorEmailChallengePendingUser = authenticatorEmailChallengePendingUser,
      authenticatorEmailChallengePendingUserAvatar = authenticatorEmailChallengePendingUserAvatar,
      authenticatorEmailChallengeResponseErrors = GHC.Maybe.Nothing
    }

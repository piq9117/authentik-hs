{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema OAuth2Provider
module AuthentikAPI.Types.OAuth2Provider where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.RedirectURI
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.OAuth2Provider@ in the specification.
--
-- OAuth2Provider Serializer
data OAuth2Provider = OAuth2Provider
  { -- | access_code_validity: Access codes not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).
    oAuth2ProviderAccessCodeValidity :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | access_token_validity: Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).
    oAuth2ProviderAccessTokenValidity :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | assigned_application_name: Application\'s display Name.
    oAuth2ProviderAssignedApplicationName :: Data.Text.Internal.Text,
    -- | assigned_application_slug: Internal application name, used in URLs.
    oAuth2ProviderAssignedApplicationSlug :: Data.Text.Internal.Text,
    -- | assigned_backchannel_application_name: Application\'s display Name.
    oAuth2ProviderAssignedBackchannelApplicationName :: Data.Text.Internal.Text,
    -- | assigned_backchannel_application_slug: Internal application name, used in URLs.
    oAuth2ProviderAssignedBackchannelApplicationSlug :: Data.Text.Internal.Text,
    -- | authentication_flow: Flow used for authentication when the associated application is accessed by an un-authenticated user.
    oAuth2ProviderAuthenticationFlow :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | authorization_flow: Flow used when authorizing this provider.
    oAuth2ProviderAuthorizationFlow :: Data.Text.Internal.Text,
    -- | client_id
    --
    -- Constraints:
    --
    -- * Maximum length of 255
    oAuth2ProviderClientId :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | client_secret
    --
    -- Constraints:
    --
    -- * Maximum length of 255
    oAuth2ProviderClientSecret :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | client_type: Confidential clients are capable of maintaining the confidentiality of their credentials. Public clients are incapable
    oAuth2ProviderClientType :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | component: Get object component so that we know how to edit the object
    oAuth2ProviderComponent :: Data.Text.Internal.Text,
    -- | encryption_key: Key used to encrypt the tokens. When set, tokens will be encrypted and returned as JWEs.
    oAuth2ProviderEncryptionKey :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | include_claims_in_id_token: Include User claims from scopes in the id_token, for applications that don\'t access the userinfo endpoint.
    oAuth2ProviderIncludeClaimsInIdToken :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | invalidation_flow: Flow used ending the session from a provider.
    oAuth2ProviderInvalidationFlow :: Data.Text.Internal.Text,
    -- | issuer_mode: Configure how the issuer field of the ID Token should be filled.
    oAuth2ProviderIssuerMode :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | jwt_federation_providers
    oAuth2ProviderJwtFederationProviders :: (GHC.Maybe.Maybe [GHC.Types.Int]),
    -- | jwt_federation_sources
    oAuth2ProviderJwtFederationSources :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | meta_model_name: Return internal model name
    oAuth2ProviderMetaModelName :: Data.Text.Internal.Text,
    -- | name
    oAuth2ProviderName :: Data.Text.Internal.Text,
    -- | pk
    oAuth2ProviderPk :: GHC.Types.Int,
    -- | property_mappings
    oAuth2ProviderPropertyMappings :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | redirect_uris
    oAuth2ProviderRedirectUris :: [RedirectURI],
    -- | refresh_token_validity: Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).
    oAuth2ProviderRefreshTokenValidity :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | signing_key: Key used to sign the tokens.
    oAuth2ProviderSigningKey :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | sub_mode: Configure what data should be used as unique User Identifier. For most cases, the default should be fine.
    oAuth2ProviderSubMode :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | verbose_name: Return object\'s verbose_name
    oAuth2ProviderVerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    oAuth2ProviderVerboseNamePlural :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON OAuth2Provider where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("access_code_validity" Data.Aeson.Types.ToJSON..=)) (oAuth2ProviderAccessCodeValidity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("access_token_validity" Data.Aeson.Types.ToJSON..=)) (oAuth2ProviderAccessTokenValidity obj) : ["assigned_application_name" Data.Aeson.Types.ToJSON..= oAuth2ProviderAssignedApplicationName obj] : ["assigned_application_slug" Data.Aeson.Types.ToJSON..= oAuth2ProviderAssignedApplicationSlug obj] : ["assigned_backchannel_application_name" Data.Aeson.Types.ToJSON..= oAuth2ProviderAssignedBackchannelApplicationName obj] : ["assigned_backchannel_application_slug" Data.Aeson.Types.ToJSON..= oAuth2ProviderAssignedBackchannelApplicationSlug obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication_flow" Data.Aeson.Types.ToJSON..=)) (oAuth2ProviderAuthenticationFlow obj) : ["authorization_flow" Data.Aeson.Types.ToJSON..= oAuth2ProviderAuthorizationFlow obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("client_id" Data.Aeson.Types.ToJSON..=)) (oAuth2ProviderClientId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("client_secret" Data.Aeson.Types.ToJSON..=)) (oAuth2ProviderClientSecret obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("client_type" Data.Aeson.Types.ToJSON..=)) (oAuth2ProviderClientType obj) : ["component" Data.Aeson.Types.ToJSON..= oAuth2ProviderComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("encryption_key" Data.Aeson.Types.ToJSON..=)) (oAuth2ProviderEncryptionKey obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("include_claims_in_id_token" Data.Aeson.Types.ToJSON..=)) (oAuth2ProviderIncludeClaimsInIdToken obj) : ["invalidation_flow" Data.Aeson.Types.ToJSON..= oAuth2ProviderInvalidationFlow obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("issuer_mode" Data.Aeson.Types.ToJSON..=)) (oAuth2ProviderIssuerMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("jwt_federation_providers" Data.Aeson.Types.ToJSON..=)) (oAuth2ProviderJwtFederationProviders obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("jwt_federation_sources" Data.Aeson.Types.ToJSON..=)) (oAuth2ProviderJwtFederationSources obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= oAuth2ProviderMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= oAuth2ProviderName obj] : ["pk" Data.Aeson.Types.ToJSON..= oAuth2ProviderPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings" Data.Aeson.Types.ToJSON..=)) (oAuth2ProviderPropertyMappings obj) : ["redirect_uris" Data.Aeson.Types.ToJSON..= oAuth2ProviderRedirectUris obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("refresh_token_validity" Data.Aeson.Types.ToJSON..=)) (oAuth2ProviderRefreshTokenValidity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("signing_key" Data.Aeson.Types.ToJSON..=)) (oAuth2ProviderSigningKey obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sub_mode" Data.Aeson.Types.ToJSON..=)) (oAuth2ProviderSubMode obj) : ["verbose_name" Data.Aeson.Types.ToJSON..= oAuth2ProviderVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= oAuth2ProviderVerboseNamePlural obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("access_code_validity" Data.Aeson.Types.ToJSON..=)) (oAuth2ProviderAccessCodeValidity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("access_token_validity" Data.Aeson.Types.ToJSON..=)) (oAuth2ProviderAccessTokenValidity obj) : ["assigned_application_name" Data.Aeson.Types.ToJSON..= oAuth2ProviderAssignedApplicationName obj] : ["assigned_application_slug" Data.Aeson.Types.ToJSON..= oAuth2ProviderAssignedApplicationSlug obj] : ["assigned_backchannel_application_name" Data.Aeson.Types.ToJSON..= oAuth2ProviderAssignedBackchannelApplicationName obj] : ["assigned_backchannel_application_slug" Data.Aeson.Types.ToJSON..= oAuth2ProviderAssignedBackchannelApplicationSlug obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication_flow" Data.Aeson.Types.ToJSON..=)) (oAuth2ProviderAuthenticationFlow obj) : ["authorization_flow" Data.Aeson.Types.ToJSON..= oAuth2ProviderAuthorizationFlow obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("client_id" Data.Aeson.Types.ToJSON..=)) (oAuth2ProviderClientId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("client_secret" Data.Aeson.Types.ToJSON..=)) (oAuth2ProviderClientSecret obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("client_type" Data.Aeson.Types.ToJSON..=)) (oAuth2ProviderClientType obj) : ["component" Data.Aeson.Types.ToJSON..= oAuth2ProviderComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("encryption_key" Data.Aeson.Types.ToJSON..=)) (oAuth2ProviderEncryptionKey obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("include_claims_in_id_token" Data.Aeson.Types.ToJSON..=)) (oAuth2ProviderIncludeClaimsInIdToken obj) : ["invalidation_flow" Data.Aeson.Types.ToJSON..= oAuth2ProviderInvalidationFlow obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("issuer_mode" Data.Aeson.Types.ToJSON..=)) (oAuth2ProviderIssuerMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("jwt_federation_providers" Data.Aeson.Types.ToJSON..=)) (oAuth2ProviderJwtFederationProviders obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("jwt_federation_sources" Data.Aeson.Types.ToJSON..=)) (oAuth2ProviderJwtFederationSources obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= oAuth2ProviderMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= oAuth2ProviderName obj] : ["pk" Data.Aeson.Types.ToJSON..= oAuth2ProviderPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings" Data.Aeson.Types.ToJSON..=)) (oAuth2ProviderPropertyMappings obj) : ["redirect_uris" Data.Aeson.Types.ToJSON..= oAuth2ProviderRedirectUris obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("refresh_token_validity" Data.Aeson.Types.ToJSON..=)) (oAuth2ProviderRefreshTokenValidity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("signing_key" Data.Aeson.Types.ToJSON..=)) (oAuth2ProviderSigningKey obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sub_mode" Data.Aeson.Types.ToJSON..=)) (oAuth2ProviderSubMode obj) : ["verbose_name" Data.Aeson.Types.ToJSON..= oAuth2ProviderVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= oAuth2ProviderVerboseNamePlural obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON OAuth2Provider where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "OAuth2Provider" (\obj -> (((((((((((((((((((((((((((GHC.Base.pure OAuth2Provider GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "access_code_validity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "access_token_validity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assigned_application_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assigned_application_slug")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assigned_backchannel_application_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "assigned_backchannel_application_slug")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "authentication_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "authorization_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "client_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "client_secret")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "client_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "encryption_key")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "include_claims_in_id_token")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "invalidation_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "issuer_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "jwt_federation_providers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "jwt_federation_sources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "property_mappings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "redirect_uris")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "refresh_token_validity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "signing_key")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sub_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural"))

-- | Create a new 'OAuth2Provider' with all required fields.
mkOAuth2Provider ::
  -- | 'oAuth2ProviderAssignedApplicationName'
  Data.Text.Internal.Text ->
  -- | 'oAuth2ProviderAssignedApplicationSlug'
  Data.Text.Internal.Text ->
  -- | 'oAuth2ProviderAssignedBackchannelApplicationName'
  Data.Text.Internal.Text ->
  -- | 'oAuth2ProviderAssignedBackchannelApplicationSlug'
  Data.Text.Internal.Text ->
  -- | 'oAuth2ProviderAuthorizationFlow'
  Data.Text.Internal.Text ->
  -- | 'oAuth2ProviderComponent'
  Data.Text.Internal.Text ->
  -- | 'oAuth2ProviderInvalidationFlow'
  Data.Text.Internal.Text ->
  -- | 'oAuth2ProviderMetaModelName'
  Data.Text.Internal.Text ->
  -- | 'oAuth2ProviderName'
  Data.Text.Internal.Text ->
  -- | 'oAuth2ProviderPk'
  GHC.Types.Int ->
  -- | 'oAuth2ProviderRedirectUris'
  [RedirectURI] ->
  -- | 'oAuth2ProviderVerboseName'
  Data.Text.Internal.Text ->
  -- | 'oAuth2ProviderVerboseNamePlural'
  Data.Text.Internal.Text ->
  OAuth2Provider
mkOAuth2Provider oAuth2ProviderAssignedApplicationName oAuth2ProviderAssignedApplicationSlug oAuth2ProviderAssignedBackchannelApplicationName oAuth2ProviderAssignedBackchannelApplicationSlug oAuth2ProviderAuthorizationFlow oAuth2ProviderComponent oAuth2ProviderInvalidationFlow oAuth2ProviderMetaModelName oAuth2ProviderName oAuth2ProviderPk oAuth2ProviderRedirectUris oAuth2ProviderVerboseName oAuth2ProviderVerboseNamePlural =
  OAuth2Provider
    { oAuth2ProviderAccessCodeValidity = GHC.Maybe.Nothing,
      oAuth2ProviderAccessTokenValidity = GHC.Maybe.Nothing,
      oAuth2ProviderAssignedApplicationName = oAuth2ProviderAssignedApplicationName,
      oAuth2ProviderAssignedApplicationSlug = oAuth2ProviderAssignedApplicationSlug,
      oAuth2ProviderAssignedBackchannelApplicationName = oAuth2ProviderAssignedBackchannelApplicationName,
      oAuth2ProviderAssignedBackchannelApplicationSlug = oAuth2ProviderAssignedBackchannelApplicationSlug,
      oAuth2ProviderAuthenticationFlow = GHC.Maybe.Nothing,
      oAuth2ProviderAuthorizationFlow = oAuth2ProviderAuthorizationFlow,
      oAuth2ProviderClientId = GHC.Maybe.Nothing,
      oAuth2ProviderClientSecret = GHC.Maybe.Nothing,
      oAuth2ProviderClientType = GHC.Maybe.Nothing,
      oAuth2ProviderComponent = oAuth2ProviderComponent,
      oAuth2ProviderEncryptionKey = GHC.Maybe.Nothing,
      oAuth2ProviderIncludeClaimsInIdToken = GHC.Maybe.Nothing,
      oAuth2ProviderInvalidationFlow = oAuth2ProviderInvalidationFlow,
      oAuth2ProviderIssuerMode = GHC.Maybe.Nothing,
      oAuth2ProviderJwtFederationProviders = GHC.Maybe.Nothing,
      oAuth2ProviderJwtFederationSources = GHC.Maybe.Nothing,
      oAuth2ProviderMetaModelName = oAuth2ProviderMetaModelName,
      oAuth2ProviderName = oAuth2ProviderName,
      oAuth2ProviderPk = oAuth2ProviderPk,
      oAuth2ProviderPropertyMappings = GHC.Maybe.Nothing,
      oAuth2ProviderRedirectUris = oAuth2ProviderRedirectUris,
      oAuth2ProviderRefreshTokenValidity = GHC.Maybe.Nothing,
      oAuth2ProviderSigningKey = GHC.Maybe.Nothing,
      oAuth2ProviderSubMode = GHC.Maybe.Nothing,
      oAuth2ProviderVerboseName = oAuth2ProviderVerboseName,
      oAuth2ProviderVerboseNamePlural = oAuth2ProviderVerboseNamePlural
    }

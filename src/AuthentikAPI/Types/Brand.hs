{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Brand
module AuthentikAPI.Types.Brand where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.Brand@ in the specification.
--
-- Brand Serializer
data Brand = Brand
  { -- | attributes
    brandAttributes :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | brand_uuid
    brandBrandUuid :: Data.Text.Internal.Text,
    -- | branding_custom_css
    brandBrandingCustomCss :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | branding_default_flow_background
    brandBrandingDefaultFlowBackground :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | branding_favicon
    brandBrandingFavicon :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | branding_logo
    brandBrandingLogo :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | branding_title
    brandBrandingTitle :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | default
    brandDefault :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | default_application: When set, external users will be redirected to this application after authenticating.
    brandDefaultApplication :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | domain: Domain that activates this brand. Can be a superset, i.e. \`a.b\` for \`aa.b\` and \`ba.b\`
    brandDomain :: Data.Text.Internal.Text,
    -- | flow_authentication
    brandFlowAuthentication :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | flow_device_code
    brandFlowDeviceCode :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | flow_invalidation
    brandFlowInvalidation :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | flow_recovery
    brandFlowRecovery :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | flow_unenrollment
    brandFlowUnenrollment :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | flow_user_settings
    brandFlowUserSettings :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | web_certificate: Web Certificate used by the authentik Core webserver.
    brandWebCertificate :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Brand where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (brandAttributes obj) : ["brand_uuid" Data.Aeson.Types.ToJSON..= brandBrandUuid obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("branding_custom_css" Data.Aeson.Types.ToJSON..=)) (brandBrandingCustomCss obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("branding_default_flow_background" Data.Aeson.Types.ToJSON..=)) (brandBrandingDefaultFlowBackground obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("branding_favicon" Data.Aeson.Types.ToJSON..=)) (brandBrandingFavicon obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("branding_logo" Data.Aeson.Types.ToJSON..=)) (brandBrandingLogo obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("branding_title" Data.Aeson.Types.ToJSON..=)) (brandBrandingTitle obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("default" Data.Aeson.Types.ToJSON..=)) (brandDefault obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("default_application" Data.Aeson.Types.ToJSON..=)) (brandDefaultApplication obj) : ["domain" Data.Aeson.Types.ToJSON..= brandDomain obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_authentication" Data.Aeson.Types.ToJSON..=)) (brandFlowAuthentication obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_device_code" Data.Aeson.Types.ToJSON..=)) (brandFlowDeviceCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_invalidation" Data.Aeson.Types.ToJSON..=)) (brandFlowInvalidation obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_recovery" Data.Aeson.Types.ToJSON..=)) (brandFlowRecovery obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_unenrollment" Data.Aeson.Types.ToJSON..=)) (brandFlowUnenrollment obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_user_settings" Data.Aeson.Types.ToJSON..=)) (brandFlowUserSettings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("web_certificate" Data.Aeson.Types.ToJSON..=)) (brandWebCertificate obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (brandAttributes obj) : ["brand_uuid" Data.Aeson.Types.ToJSON..= brandBrandUuid obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("branding_custom_css" Data.Aeson.Types.ToJSON..=)) (brandBrandingCustomCss obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("branding_default_flow_background" Data.Aeson.Types.ToJSON..=)) (brandBrandingDefaultFlowBackground obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("branding_favicon" Data.Aeson.Types.ToJSON..=)) (brandBrandingFavicon obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("branding_logo" Data.Aeson.Types.ToJSON..=)) (brandBrandingLogo obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("branding_title" Data.Aeson.Types.ToJSON..=)) (brandBrandingTitle obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("default" Data.Aeson.Types.ToJSON..=)) (brandDefault obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("default_application" Data.Aeson.Types.ToJSON..=)) (brandDefaultApplication obj) : ["domain" Data.Aeson.Types.ToJSON..= brandDomain obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_authentication" Data.Aeson.Types.ToJSON..=)) (brandFlowAuthentication obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_device_code" Data.Aeson.Types.ToJSON..=)) (brandFlowDeviceCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_invalidation" Data.Aeson.Types.ToJSON..=)) (brandFlowInvalidation obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_recovery" Data.Aeson.Types.ToJSON..=)) (brandFlowRecovery obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_unenrollment" Data.Aeson.Types.ToJSON..=)) (brandFlowUnenrollment obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_user_settings" Data.Aeson.Types.ToJSON..=)) (brandFlowUserSettings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("web_certificate" Data.Aeson.Types.ToJSON..=)) (brandWebCertificate obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Brand where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Brand" (\obj -> ((((((((((((((((GHC.Base.pure Brand GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "attributes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "brand_uuid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "branding_custom_css")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "branding_default_flow_background")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "branding_favicon")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "branding_logo")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "branding_title")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "default")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "default_application")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "domain")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_authentication")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_device_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_invalidation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_recovery")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_unenrollment")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_user_settings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "web_certificate"))

-- | Create a new 'Brand' with all required fields.
mkBrand ::
  -- | 'brandBrandUuid'
  Data.Text.Internal.Text ->
  -- | 'brandDomain'
  Data.Text.Internal.Text ->
  Brand
mkBrand brandBrandUuid brandDomain =
  Brand
    { brandAttributes = GHC.Maybe.Nothing,
      brandBrandUuid = brandBrandUuid,
      brandBrandingCustomCss = GHC.Maybe.Nothing,
      brandBrandingDefaultFlowBackground = GHC.Maybe.Nothing,
      brandBrandingFavicon = GHC.Maybe.Nothing,
      brandBrandingLogo = GHC.Maybe.Nothing,
      brandBrandingTitle = GHC.Maybe.Nothing,
      brandDefault = GHC.Maybe.Nothing,
      brandDefaultApplication = GHC.Maybe.Nothing,
      brandDomain = brandDomain,
      brandFlowAuthentication = GHC.Maybe.Nothing,
      brandFlowDeviceCode = GHC.Maybe.Nothing,
      brandFlowInvalidation = GHC.Maybe.Nothing,
      brandFlowRecovery = GHC.Maybe.Nothing,
      brandFlowUnenrollment = GHC.Maybe.Nothing,
      brandFlowUserSettings = GHC.Maybe.Nothing,
      brandWebCertificate = GHC.Maybe.Nothing
    }

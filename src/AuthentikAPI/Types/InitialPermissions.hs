{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema InitialPermissions
module AuthentikAPI.Types.InitialPermissions where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.InitialPermissionsModeEnum
import {-# SOURCE #-} AuthentikAPI.Types.Permission
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.InitialPermissions@ in the specification.
--
-- InitialPermissions serializer
data InitialPermissions = InitialPermissions
  { -- | mode
    initialPermissionsMode :: InitialPermissionsModeEnum,
    -- | name
    --
    -- Constraints:
    --
    -- * Maximum length of 150
    initialPermissionsName :: Data.Text.Internal.Text,
    -- | permissions
    initialPermissionsPermissions :: (GHC.Maybe.Maybe [GHC.Types.Int]),
    -- | permissions_obj
    initialPermissionsPermissionsObj :: [Permission],
    -- | pk
    initialPermissionsPk :: GHC.Types.Int,
    -- | role
    initialPermissionsRole :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON InitialPermissions where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["mode" Data.Aeson.Types.ToJSON..= initialPermissionsMode obj] : ["name" Data.Aeson.Types.ToJSON..= initialPermissionsName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("permissions" Data.Aeson.Types.ToJSON..=)) (initialPermissionsPermissions obj) : ["permissions_obj" Data.Aeson.Types.ToJSON..= initialPermissionsPermissionsObj obj] : ["pk" Data.Aeson.Types.ToJSON..= initialPermissionsPk obj] : ["role" Data.Aeson.Types.ToJSON..= initialPermissionsRole obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["mode" Data.Aeson.Types.ToJSON..= initialPermissionsMode obj] : ["name" Data.Aeson.Types.ToJSON..= initialPermissionsName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("permissions" Data.Aeson.Types.ToJSON..=)) (initialPermissionsPermissions obj) : ["permissions_obj" Data.Aeson.Types.ToJSON..= initialPermissionsPermissionsObj obj] : ["pk" Data.Aeson.Types.ToJSON..= initialPermissionsPk obj] : ["role" Data.Aeson.Types.ToJSON..= initialPermissionsRole obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON InitialPermissions where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "InitialPermissions" (\obj -> (((((GHC.Base.pure InitialPermissions GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "permissions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "permissions_obj")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "role"))

-- | Create a new 'InitialPermissions' with all required fields.
mkInitialPermissions ::
  -- | 'initialPermissionsMode'
  InitialPermissionsModeEnum ->
  -- | 'initialPermissionsName'
  Data.Text.Internal.Text ->
  -- | 'initialPermissionsPermissionsObj'
  [Permission] ->
  -- | 'initialPermissionsPk'
  GHC.Types.Int ->
  -- | 'initialPermissionsRole'
  Data.Text.Internal.Text ->
  InitialPermissions
mkInitialPermissions initialPermissionsMode initialPermissionsName initialPermissionsPermissionsObj initialPermissionsPk initialPermissionsRole =
  InitialPermissions
    { initialPermissionsMode = initialPermissionsMode,
      initialPermissionsName = initialPermissionsName,
      initialPermissionsPermissions = GHC.Maybe.Nothing,
      initialPermissionsPermissionsObj = initialPermissionsPermissionsObj,
      initialPermissionsPk = initialPermissionsPk,
      initialPermissionsRole = initialPermissionsRole
    }

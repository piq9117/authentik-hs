{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema OpenIDConnectConfiguration
module AuthentikAPI.Types.OpenIDConnectConfiguration where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.OpenIDConnectConfiguration@ in the specification.
--
-- rest_framework Serializer for OIDC Configuration
data OpenIDConnectConfiguration = OpenIDConnectConfiguration
  { -- | authorization_endpoint
    openIDConnectConfigurationAuthorizationEndpoint :: Data.Text.Internal.Text,
    -- | end_session_endpoint
    openIDConnectConfigurationEndSessionEndpoint :: Data.Text.Internal.Text,
    -- | id_token_signing_alg_values_supported
    openIDConnectConfigurationIdTokenSigningAlgValuesSupported :: [Data.Text.Internal.Text],
    -- | introspection_endpoint
    openIDConnectConfigurationIntrospectionEndpoint :: Data.Text.Internal.Text,
    -- | issuer
    openIDConnectConfigurationIssuer :: Data.Text.Internal.Text,
    -- | jwks_uri
    openIDConnectConfigurationJwksUri :: Data.Text.Internal.Text,
    -- | response_types_supported
    openIDConnectConfigurationResponseTypesSupported :: [Data.Text.Internal.Text],
    -- | subject_types_supported
    openIDConnectConfigurationSubjectTypesSupported :: [Data.Text.Internal.Text],
    -- | token_endpoint
    openIDConnectConfigurationTokenEndpoint :: Data.Text.Internal.Text,
    -- | token_endpoint_auth_methods_supported
    openIDConnectConfigurationTokenEndpointAuthMethodsSupported :: [Data.Text.Internal.Text],
    -- | userinfo_endpoint
    openIDConnectConfigurationUserinfoEndpoint :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON OpenIDConnectConfiguration where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["authorization_endpoint" Data.Aeson.Types.ToJSON..= openIDConnectConfigurationAuthorizationEndpoint obj] : ["end_session_endpoint" Data.Aeson.Types.ToJSON..= openIDConnectConfigurationEndSessionEndpoint obj] : ["id_token_signing_alg_values_supported" Data.Aeson.Types.ToJSON..= openIDConnectConfigurationIdTokenSigningAlgValuesSupported obj] : ["introspection_endpoint" Data.Aeson.Types.ToJSON..= openIDConnectConfigurationIntrospectionEndpoint obj] : ["issuer" Data.Aeson.Types.ToJSON..= openIDConnectConfigurationIssuer obj] : ["jwks_uri" Data.Aeson.Types.ToJSON..= openIDConnectConfigurationJwksUri obj] : ["response_types_supported" Data.Aeson.Types.ToJSON..= openIDConnectConfigurationResponseTypesSupported obj] : ["subject_types_supported" Data.Aeson.Types.ToJSON..= openIDConnectConfigurationSubjectTypesSupported obj] : ["token_endpoint" Data.Aeson.Types.ToJSON..= openIDConnectConfigurationTokenEndpoint obj] : ["token_endpoint_auth_methods_supported" Data.Aeson.Types.ToJSON..= openIDConnectConfigurationTokenEndpointAuthMethodsSupported obj] : ["userinfo_endpoint" Data.Aeson.Types.ToJSON..= openIDConnectConfigurationUserinfoEndpoint obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["authorization_endpoint" Data.Aeson.Types.ToJSON..= openIDConnectConfigurationAuthorizationEndpoint obj] : ["end_session_endpoint" Data.Aeson.Types.ToJSON..= openIDConnectConfigurationEndSessionEndpoint obj] : ["id_token_signing_alg_values_supported" Data.Aeson.Types.ToJSON..= openIDConnectConfigurationIdTokenSigningAlgValuesSupported obj] : ["introspection_endpoint" Data.Aeson.Types.ToJSON..= openIDConnectConfigurationIntrospectionEndpoint obj] : ["issuer" Data.Aeson.Types.ToJSON..= openIDConnectConfigurationIssuer obj] : ["jwks_uri" Data.Aeson.Types.ToJSON..= openIDConnectConfigurationJwksUri obj] : ["response_types_supported" Data.Aeson.Types.ToJSON..= openIDConnectConfigurationResponseTypesSupported obj] : ["subject_types_supported" Data.Aeson.Types.ToJSON..= openIDConnectConfigurationSubjectTypesSupported obj] : ["token_endpoint" Data.Aeson.Types.ToJSON..= openIDConnectConfigurationTokenEndpoint obj] : ["token_endpoint_auth_methods_supported" Data.Aeson.Types.ToJSON..= openIDConnectConfigurationTokenEndpointAuthMethodsSupported obj] : ["userinfo_endpoint" Data.Aeson.Types.ToJSON..= openIDConnectConfigurationUserinfoEndpoint obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON OpenIDConnectConfiguration where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "OpenIDConnectConfiguration" (\obj -> ((((((((((GHC.Base.pure OpenIDConnectConfiguration GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "authorization_endpoint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "end_session_endpoint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id_token_signing_alg_values_supported")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "introspection_endpoint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "issuer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "jwks_uri")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "response_types_supported")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "subject_types_supported")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "token_endpoint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "token_endpoint_auth_methods_supported")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "userinfo_endpoint"))

-- | Create a new 'OpenIDConnectConfiguration' with all required fields.
mkOpenIDConnectConfiguration ::
  -- | 'openIDConnectConfigurationAuthorizationEndpoint'
  Data.Text.Internal.Text ->
  -- | 'openIDConnectConfigurationEndSessionEndpoint'
  Data.Text.Internal.Text ->
  -- | 'openIDConnectConfigurationIdTokenSigningAlgValuesSupported'
  [Data.Text.Internal.Text] ->
  -- | 'openIDConnectConfigurationIntrospectionEndpoint'
  Data.Text.Internal.Text ->
  -- | 'openIDConnectConfigurationIssuer'
  Data.Text.Internal.Text ->
  -- | 'openIDConnectConfigurationJwksUri'
  Data.Text.Internal.Text ->
  -- | 'openIDConnectConfigurationResponseTypesSupported'
  [Data.Text.Internal.Text] ->
  -- | 'openIDConnectConfigurationSubjectTypesSupported'
  [Data.Text.Internal.Text] ->
  -- | 'openIDConnectConfigurationTokenEndpoint'
  Data.Text.Internal.Text ->
  -- | 'openIDConnectConfigurationTokenEndpointAuthMethodsSupported'
  [Data.Text.Internal.Text] ->
  -- | 'openIDConnectConfigurationUserinfoEndpoint'
  Data.Text.Internal.Text ->
  OpenIDConnectConfiguration
mkOpenIDConnectConfiguration openIDConnectConfigurationAuthorizationEndpoint openIDConnectConfigurationEndSessionEndpoint openIDConnectConfigurationIdTokenSigningAlgValuesSupported openIDConnectConfigurationIntrospectionEndpoint openIDConnectConfigurationIssuer openIDConnectConfigurationJwksUri openIDConnectConfigurationResponseTypesSupported openIDConnectConfigurationSubjectTypesSupported openIDConnectConfigurationTokenEndpoint openIDConnectConfigurationTokenEndpointAuthMethodsSupported openIDConnectConfigurationUserinfoEndpoint =
  OpenIDConnectConfiguration
    { openIDConnectConfigurationAuthorizationEndpoint = openIDConnectConfigurationAuthorizationEndpoint,
      openIDConnectConfigurationEndSessionEndpoint = openIDConnectConfigurationEndSessionEndpoint,
      openIDConnectConfigurationIdTokenSigningAlgValuesSupported = openIDConnectConfigurationIdTokenSigningAlgValuesSupported,
      openIDConnectConfigurationIntrospectionEndpoint = openIDConnectConfigurationIntrospectionEndpoint,
      openIDConnectConfigurationIssuer = openIDConnectConfigurationIssuer,
      openIDConnectConfigurationJwksUri = openIDConnectConfigurationJwksUri,
      openIDConnectConfigurationResponseTypesSupported = openIDConnectConfigurationResponseTypesSupported,
      openIDConnectConfigurationSubjectTypesSupported = openIDConnectConfigurationSubjectTypesSupported,
      openIDConnectConfigurationTokenEndpoint = openIDConnectConfigurationTokenEndpoint,
      openIDConnectConfigurationTokenEndpointAuthMethodsSupported = openIDConnectConfigurationTokenEndpointAuthMethodsSupported,
      openIDConnectConfigurationUserinfoEndpoint = openIDConnectConfigurationUserinfoEndpoint
    }

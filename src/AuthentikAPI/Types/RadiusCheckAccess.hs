{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema RadiusCheckAccess
module AuthentikAPI.Types.RadiusCheckAccess where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.PolicyTestResult
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.RadiusCheckAccess@ in the specification.
--
-- Base serializer class which doesn\'t implement create\/update methods
data RadiusCheckAccess = RadiusCheckAccess
  { -- | access: result of a policy test
    radiusCheckAccessAccess :: PolicyTestResult,
    -- | attributes
    radiusCheckAccessAttributes :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON RadiusCheckAccess where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["access" Data.Aeson.Types.ToJSON..= radiusCheckAccessAccess obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (radiusCheckAccessAttributes obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["access" Data.Aeson.Types.ToJSON..= radiusCheckAccessAccess obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (radiusCheckAccessAttributes obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON RadiusCheckAccess where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "RadiusCheckAccess" (\obj -> (GHC.Base.pure RadiusCheckAccess GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "access")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "attributes"))

-- | Create a new 'RadiusCheckAccess' with all required fields.
mkRadiusCheckAccess ::
  -- | 'radiusCheckAccessAccess'
  PolicyTestResult ->
  RadiusCheckAccess
mkRadiusCheckAccess radiusCheckAccessAccess =
  RadiusCheckAccess
    { radiusCheckAccessAccess = radiusCheckAccessAccess,
      radiusCheckAccessAttributes = GHC.Maybe.Nothing
    }

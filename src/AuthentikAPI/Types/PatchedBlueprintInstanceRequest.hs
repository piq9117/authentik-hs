{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PatchedBlueprintInstanceRequest
module AuthentikAPI.Types.PatchedBlueprintInstanceRequest where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.PatchedBlueprintInstanceRequest@ in the specification.
--
-- Info about a single blueprint instance file
data PatchedBlueprintInstanceRequest = PatchedBlueprintInstanceRequest
  { -- | content
    patchedBlueprintInstanceRequestContent :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | context
    patchedBlueprintInstanceRequestContext :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | enabled
    patchedBlueprintInstanceRequestEnabled :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | name
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedBlueprintInstanceRequestName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | path
    patchedBlueprintInstanceRequestPath :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PatchedBlueprintInstanceRequest where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("content" Data.Aeson.Types.ToJSON..=)) (patchedBlueprintInstanceRequestContent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("context" Data.Aeson.Types.ToJSON..=)) (patchedBlueprintInstanceRequestContext obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enabled" Data.Aeson.Types.ToJSON..=)) (patchedBlueprintInstanceRequestEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (patchedBlueprintInstanceRequestName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("path" Data.Aeson.Types.ToJSON..=)) (patchedBlueprintInstanceRequestPath obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("content" Data.Aeson.Types.ToJSON..=)) (patchedBlueprintInstanceRequestContent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("context" Data.Aeson.Types.ToJSON..=)) (patchedBlueprintInstanceRequestContext obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enabled" Data.Aeson.Types.ToJSON..=)) (patchedBlueprintInstanceRequestEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (patchedBlueprintInstanceRequestName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("path" Data.Aeson.Types.ToJSON..=)) (patchedBlueprintInstanceRequestPath obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PatchedBlueprintInstanceRequest where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchedBlueprintInstanceRequest" (\obj -> ((((GHC.Base.pure PatchedBlueprintInstanceRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "content")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "context")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "path"))

-- | Create a new 'PatchedBlueprintInstanceRequest' with all required fields.
mkPatchedBlueprintInstanceRequest :: PatchedBlueprintInstanceRequest
mkPatchedBlueprintInstanceRequest =
  PatchedBlueprintInstanceRequest
    { patchedBlueprintInstanceRequestContent = GHC.Maybe.Nothing,
      patchedBlueprintInstanceRequestContext = GHC.Maybe.Nothing,
      patchedBlueprintInstanceRequestEnabled = GHC.Maybe.Nothing,
      patchedBlueprintInstanceRequestName = GHC.Maybe.Nothing,
      patchedBlueprintInstanceRequestPath = GHC.Maybe.Nothing
    }

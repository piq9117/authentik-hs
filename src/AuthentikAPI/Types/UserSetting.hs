{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema UserSetting
module AuthentikAPI.Types.UserSetting where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.UserSetting@ in the specification.
--
-- Serializer for User settings for stages and sources
data UserSetting = UserSetting
  { -- | component
    userSettingComponent :: Data.Text.Internal.Text,
    -- | configure_url
    userSettingConfigureUrl :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | icon_url
    userSettingIconUrl :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | object_uid
    userSettingObjectUid :: Data.Text.Internal.Text,
    -- | title
    userSettingTitle :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON UserSetting where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["component" Data.Aeson.Types.ToJSON..= userSettingComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("configure_url" Data.Aeson.Types.ToJSON..=)) (userSettingConfigureUrl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("icon_url" Data.Aeson.Types.ToJSON..=)) (userSettingIconUrl obj) : ["object_uid" Data.Aeson.Types.ToJSON..= userSettingObjectUid obj] : ["title" Data.Aeson.Types.ToJSON..= userSettingTitle obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["component" Data.Aeson.Types.ToJSON..= userSettingComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("configure_url" Data.Aeson.Types.ToJSON..=)) (userSettingConfigureUrl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("icon_url" Data.Aeson.Types.ToJSON..=)) (userSettingIconUrl obj) : ["object_uid" Data.Aeson.Types.ToJSON..= userSettingObjectUid obj] : ["title" Data.Aeson.Types.ToJSON..= userSettingTitle obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON UserSetting where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "UserSetting" (\obj -> ((((GHC.Base.pure UserSetting GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "configure_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "icon_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object_uid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "title"))

-- | Create a new 'UserSetting' with all required fields.
mkUserSetting ::
  -- | 'userSettingComponent'
  Data.Text.Internal.Text ->
  -- | 'userSettingObjectUid'
  Data.Text.Internal.Text ->
  -- | 'userSettingTitle'
  Data.Text.Internal.Text ->
  UserSetting
mkUserSetting userSettingComponent userSettingObjectUid userSettingTitle =
  UserSetting
    { userSettingComponent = userSettingComponent,
      userSettingConfigureUrl = GHC.Maybe.Nothing,
      userSettingIconUrl = GHC.Maybe.Nothing,
      userSettingObjectUid = userSettingObjectUid,
      userSettingTitle = userSettingTitle
    }

{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PlexSourceRequest
module AuthentikAPI.Types.PlexSourceRequest where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.PolicyEngineMode
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.PlexSourceRequest@ in the specification.
--
-- Plex Source Serializer
data PlexSourceRequest = PlexSourceRequest
  { -- | allow_friends: Allow friends to authenticate, even if you don\'t share a server.
    plexSourceRequestAllowFriends :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | allowed_servers: Which servers a user has to be a member of to be granted access. Empty list allows every server.
    plexSourceRequestAllowedServers :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | authentication_flow: Flow to use when authenticating existing users.
    plexSourceRequestAuthenticationFlow :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | client_id: Client identifier used to talk to Plex.
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    plexSourceRequestClientId :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | enabled
    plexSourceRequestEnabled :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | enrollment_flow: Flow to use when enrolling new users.
    plexSourceRequestEnrollmentFlow :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | group_matching_mode: How the source determines if an existing group should be used or a new group created.
    plexSourceRequestGroupMatchingMode :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | group_property_mappings
    plexSourceRequestGroupPropertyMappings :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | name: Source\'s display Name.
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    plexSourceRequestName :: Data.Text.Internal.Text,
    -- | plex_token: Plex token used to check friends
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    plexSourceRequestPlexToken :: Data.Text.Internal.Text,
    -- | policy_engine_mode
    plexSourceRequestPolicyEngineMode :: (GHC.Maybe.Maybe PolicyEngineMode),
    -- | slug: Internal source name, used in URLs.
    --
    -- Constraints:
    --
    -- * Maximum length of 50
    -- * Minimum length of 1
    -- * Must match pattern \'^[-a-zA-Z0-9_]+\$\'
    plexSourceRequestSlug :: Data.Text.Internal.Text,
    -- | user_matching_mode: How the source determines if an existing user should be authenticated or a new user enrolled.
    plexSourceRequestUserMatchingMode :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | user_path_template
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    plexSourceRequestUserPathTemplate :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | user_property_mappings
    plexSourceRequestUserPropertyMappings :: (GHC.Maybe.Maybe [Data.Text.Internal.Text])
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PlexSourceRequest where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allow_friends" Data.Aeson.Types.ToJSON..=)) (plexSourceRequestAllowFriends obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allowed_servers" Data.Aeson.Types.ToJSON..=)) (plexSourceRequestAllowedServers obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication_flow" Data.Aeson.Types.ToJSON..=)) (plexSourceRequestAuthenticationFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("client_id" Data.Aeson.Types.ToJSON..=)) (plexSourceRequestClientId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enabled" Data.Aeson.Types.ToJSON..=)) (plexSourceRequestEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enrollment_flow" Data.Aeson.Types.ToJSON..=)) (plexSourceRequestEnrollmentFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("group_matching_mode" Data.Aeson.Types.ToJSON..=)) (plexSourceRequestGroupMatchingMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("group_property_mappings" Data.Aeson.Types.ToJSON..=)) (plexSourceRequestGroupPropertyMappings obj) : ["name" Data.Aeson.Types.ToJSON..= plexSourceRequestName obj] : ["plex_token" Data.Aeson.Types.ToJSON..= plexSourceRequestPlexToken obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("policy_engine_mode" Data.Aeson.Types.ToJSON..=)) (plexSourceRequestPolicyEngineMode obj) : ["slug" Data.Aeson.Types.ToJSON..= plexSourceRequestSlug obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_matching_mode" Data.Aeson.Types.ToJSON..=)) (plexSourceRequestUserMatchingMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_path_template" Data.Aeson.Types.ToJSON..=)) (plexSourceRequestUserPathTemplate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_property_mappings" Data.Aeson.Types.ToJSON..=)) (plexSourceRequestUserPropertyMappings obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allow_friends" Data.Aeson.Types.ToJSON..=)) (plexSourceRequestAllowFriends obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allowed_servers" Data.Aeson.Types.ToJSON..=)) (plexSourceRequestAllowedServers obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication_flow" Data.Aeson.Types.ToJSON..=)) (plexSourceRequestAuthenticationFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("client_id" Data.Aeson.Types.ToJSON..=)) (plexSourceRequestClientId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enabled" Data.Aeson.Types.ToJSON..=)) (plexSourceRequestEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enrollment_flow" Data.Aeson.Types.ToJSON..=)) (plexSourceRequestEnrollmentFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("group_matching_mode" Data.Aeson.Types.ToJSON..=)) (plexSourceRequestGroupMatchingMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("group_property_mappings" Data.Aeson.Types.ToJSON..=)) (plexSourceRequestGroupPropertyMappings obj) : ["name" Data.Aeson.Types.ToJSON..= plexSourceRequestName obj] : ["plex_token" Data.Aeson.Types.ToJSON..= plexSourceRequestPlexToken obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("policy_engine_mode" Data.Aeson.Types.ToJSON..=)) (plexSourceRequestPolicyEngineMode obj) : ["slug" Data.Aeson.Types.ToJSON..= plexSourceRequestSlug obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_matching_mode" Data.Aeson.Types.ToJSON..=)) (plexSourceRequestUserMatchingMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_path_template" Data.Aeson.Types.ToJSON..=)) (plexSourceRequestUserPathTemplate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_property_mappings" Data.Aeson.Types.ToJSON..=)) (plexSourceRequestUserPropertyMappings obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PlexSourceRequest where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PlexSourceRequest" (\obj -> ((((((((((((((GHC.Base.pure PlexSourceRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "allow_friends")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "allowed_servers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "authentication_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "client_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "enrollment_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "group_matching_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "group_property_mappings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "plex_token")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "policy_engine_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "slug")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "user_matching_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "user_path_template")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "user_property_mappings"))

-- | Create a new 'PlexSourceRequest' with all required fields.
mkPlexSourceRequest ::
  -- | 'plexSourceRequestName'
  Data.Text.Internal.Text ->
  -- | 'plexSourceRequestPlexToken'
  Data.Text.Internal.Text ->
  -- | 'plexSourceRequestSlug'
  Data.Text.Internal.Text ->
  PlexSourceRequest
mkPlexSourceRequest plexSourceRequestName plexSourceRequestPlexToken plexSourceRequestSlug =
  PlexSourceRequest
    { plexSourceRequestAllowFriends = GHC.Maybe.Nothing,
      plexSourceRequestAllowedServers = GHC.Maybe.Nothing,
      plexSourceRequestAuthenticationFlow = GHC.Maybe.Nothing,
      plexSourceRequestClientId = GHC.Maybe.Nothing,
      plexSourceRequestEnabled = GHC.Maybe.Nothing,
      plexSourceRequestEnrollmentFlow = GHC.Maybe.Nothing,
      plexSourceRequestGroupMatchingMode = GHC.Maybe.Nothing,
      plexSourceRequestGroupPropertyMappings = GHC.Maybe.Nothing,
      plexSourceRequestName = plexSourceRequestName,
      plexSourceRequestPlexToken = plexSourceRequestPlexToken,
      plexSourceRequestPolicyEngineMode = GHC.Maybe.Nothing,
      plexSourceRequestSlug = plexSourceRequestSlug,
      plexSourceRequestUserMatchingMode = GHC.Maybe.Nothing,
      plexSourceRequestUserPathTemplate = GHC.Maybe.Nothing,
      plexSourceRequestUserPropertyMappings = GHC.Maybe.Nothing
    }

{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PasswordExpiryPolicy
module AuthentikAPI.Types.PasswordExpiryPolicy where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.PasswordExpiryPolicy@ in the specification.
--
-- Password Expiry Policy Serializer
data PasswordExpiryPolicy = PasswordExpiryPolicy
  { -- | bound_to: Return objects policy is bound to
    passwordExpiryPolicyBoundTo :: GHC.Types.Int,
    -- | component: Get object component so that we know how to edit the object
    passwordExpiryPolicyComponent :: Data.Text.Internal.Text,
    -- | days
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of -2.1474836e9
    passwordExpiryPolicyDays :: GHC.Types.Int,
    -- | deny_only
    passwordExpiryPolicyDenyOnly :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | execution_logging: When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.
    passwordExpiryPolicyExecutionLogging :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | meta_model_name: Return internal model name
    passwordExpiryPolicyMetaModelName :: Data.Text.Internal.Text,
    -- | name
    passwordExpiryPolicyName :: Data.Text.Internal.Text,
    -- | pk
    passwordExpiryPolicyPk :: Data.Text.Internal.Text,
    -- | verbose_name: Return object\'s verbose_name
    passwordExpiryPolicyVerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    passwordExpiryPolicyVerboseNamePlural :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PasswordExpiryPolicy where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["bound_to" Data.Aeson.Types.ToJSON..= passwordExpiryPolicyBoundTo obj] : ["component" Data.Aeson.Types.ToJSON..= passwordExpiryPolicyComponent obj] : ["days" Data.Aeson.Types.ToJSON..= passwordExpiryPolicyDays obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("deny_only" Data.Aeson.Types.ToJSON..=)) (passwordExpiryPolicyDenyOnly obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("execution_logging" Data.Aeson.Types.ToJSON..=)) (passwordExpiryPolicyExecutionLogging obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= passwordExpiryPolicyMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= passwordExpiryPolicyName obj] : ["pk" Data.Aeson.Types.ToJSON..= passwordExpiryPolicyPk obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= passwordExpiryPolicyVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= passwordExpiryPolicyVerboseNamePlural obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["bound_to" Data.Aeson.Types.ToJSON..= passwordExpiryPolicyBoundTo obj] : ["component" Data.Aeson.Types.ToJSON..= passwordExpiryPolicyComponent obj] : ["days" Data.Aeson.Types.ToJSON..= passwordExpiryPolicyDays obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("deny_only" Data.Aeson.Types.ToJSON..=)) (passwordExpiryPolicyDenyOnly obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("execution_logging" Data.Aeson.Types.ToJSON..=)) (passwordExpiryPolicyExecutionLogging obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= passwordExpiryPolicyMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= passwordExpiryPolicyName obj] : ["pk" Data.Aeson.Types.ToJSON..= passwordExpiryPolicyPk obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= passwordExpiryPolicyVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= passwordExpiryPolicyVerboseNamePlural obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PasswordExpiryPolicy where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PasswordExpiryPolicy" (\obj -> (((((((((GHC.Base.pure PasswordExpiryPolicy GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "bound_to")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "days")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "deny_only")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "execution_logging")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural"))

-- | Create a new 'PasswordExpiryPolicy' with all required fields.
mkPasswordExpiryPolicy ::
  -- | 'passwordExpiryPolicyBoundTo'
  GHC.Types.Int ->
  -- | 'passwordExpiryPolicyComponent'
  Data.Text.Internal.Text ->
  -- | 'passwordExpiryPolicyDays'
  GHC.Types.Int ->
  -- | 'passwordExpiryPolicyMetaModelName'
  Data.Text.Internal.Text ->
  -- | 'passwordExpiryPolicyName'
  Data.Text.Internal.Text ->
  -- | 'passwordExpiryPolicyPk'
  Data.Text.Internal.Text ->
  -- | 'passwordExpiryPolicyVerboseName'
  Data.Text.Internal.Text ->
  -- | 'passwordExpiryPolicyVerboseNamePlural'
  Data.Text.Internal.Text ->
  PasswordExpiryPolicy
mkPasswordExpiryPolicy passwordExpiryPolicyBoundTo passwordExpiryPolicyComponent passwordExpiryPolicyDays passwordExpiryPolicyMetaModelName passwordExpiryPolicyName passwordExpiryPolicyPk passwordExpiryPolicyVerboseName passwordExpiryPolicyVerboseNamePlural =
  PasswordExpiryPolicy
    { passwordExpiryPolicyBoundTo = passwordExpiryPolicyBoundTo,
      passwordExpiryPolicyComponent = passwordExpiryPolicyComponent,
      passwordExpiryPolicyDays = passwordExpiryPolicyDays,
      passwordExpiryPolicyDenyOnly = GHC.Maybe.Nothing,
      passwordExpiryPolicyExecutionLogging = GHC.Maybe.Nothing,
      passwordExpiryPolicyMetaModelName = passwordExpiryPolicyMetaModelName,
      passwordExpiryPolicyName = passwordExpiryPolicyName,
      passwordExpiryPolicyPk = passwordExpiryPolicyPk,
      passwordExpiryPolicyVerboseName = passwordExpiryPolicyVerboseName,
      passwordExpiryPolicyVerboseNamePlural = passwordExpiryPolicyVerboseNamePlural
    }

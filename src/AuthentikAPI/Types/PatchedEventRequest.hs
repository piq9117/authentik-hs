{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PatchedEventRequest
module AuthentikAPI.Types.PatchedEventRequest where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.EventActions
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.PatchedEventRequest@ in the specification.
--
-- Event Serializer
data PatchedEventRequest = PatchedEventRequest
  { -- | action
    patchedEventRequestAction :: (GHC.Maybe.Maybe EventActions),
    -- | app
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedEventRequestApp :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | brand
    patchedEventRequestBrand :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | client_ip
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedEventRequestClientIp :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | context
    patchedEventRequestContext :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | expires
    patchedEventRequestExpires :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | user
    patchedEventRequestUser :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PatchedEventRequest where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("action" Data.Aeson.Types.ToJSON..=)) (patchedEventRequestAction obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("app" Data.Aeson.Types.ToJSON..=)) (patchedEventRequestApp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("brand" Data.Aeson.Types.ToJSON..=)) (patchedEventRequestBrand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("client_ip" Data.Aeson.Types.ToJSON..=)) (patchedEventRequestClientIp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("context" Data.Aeson.Types.ToJSON..=)) (patchedEventRequestContext obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires" Data.Aeson.Types.ToJSON..=)) (patchedEventRequestExpires obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user" Data.Aeson.Types.ToJSON..=)) (patchedEventRequestUser obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("action" Data.Aeson.Types.ToJSON..=)) (patchedEventRequestAction obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("app" Data.Aeson.Types.ToJSON..=)) (patchedEventRequestApp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("brand" Data.Aeson.Types.ToJSON..=)) (patchedEventRequestBrand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("client_ip" Data.Aeson.Types.ToJSON..=)) (patchedEventRequestClientIp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("context" Data.Aeson.Types.ToJSON..=)) (patchedEventRequestContext obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires" Data.Aeson.Types.ToJSON..=)) (patchedEventRequestExpires obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user" Data.Aeson.Types.ToJSON..=)) (patchedEventRequestUser obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PatchedEventRequest where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchedEventRequest" (\obj -> ((((((GHC.Base.pure PatchedEventRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "action")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "app")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "brand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "client_ip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "context")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expires")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "user"))

-- | Create a new 'PatchedEventRequest' with all required fields.
mkPatchedEventRequest :: PatchedEventRequest
mkPatchedEventRequest =
  PatchedEventRequest
    { patchedEventRequestAction = GHC.Maybe.Nothing,
      patchedEventRequestApp = GHC.Maybe.Nothing,
      patchedEventRequestBrand = GHC.Maybe.Nothing,
      patchedEventRequestClientIp = GHC.Maybe.Nothing,
      patchedEventRequestContext = GHC.Maybe.Nothing,
      patchedEventRequestExpires = GHC.Maybe.Nothing,
      patchedEventRequestUser = GHC.Maybe.Nothing
    }

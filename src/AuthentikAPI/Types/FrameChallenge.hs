{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema FrameChallenge
module AuthentikAPI.Types.FrameChallenge where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.ContextualFlowInfo
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.FrameChallenge@ in the specification.
--
-- Challenge type to render a frame
data FrameChallenge = FrameChallenge
  { -- | component
    frameChallengeComponent :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | flow_info: Contextual flow information for a challenge
    frameChallengeFlowInfo :: (GHC.Maybe.Maybe ContextualFlowInfo),
    -- | loading_overlay
    frameChallengeLoadingOverlay :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | loading_text
    frameChallengeLoadingText :: Data.Text.Internal.Text,
    -- | response_errors
    frameChallengeResponseErrors :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | url
    frameChallengeUrl :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON FrameChallenge where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("component" Data.Aeson.Types.ToJSON..=)) (frameChallengeComponent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_info" Data.Aeson.Types.ToJSON..=)) (frameChallengeFlowInfo obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("loading_overlay" Data.Aeson.Types.ToJSON..=)) (frameChallengeLoadingOverlay obj) : ["loading_text" Data.Aeson.Types.ToJSON..= frameChallengeLoadingText obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("response_errors" Data.Aeson.Types.ToJSON..=)) (frameChallengeResponseErrors obj) : ["url" Data.Aeson.Types.ToJSON..= frameChallengeUrl obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("component" Data.Aeson.Types.ToJSON..=)) (frameChallengeComponent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_info" Data.Aeson.Types.ToJSON..=)) (frameChallengeFlowInfo obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("loading_overlay" Data.Aeson.Types.ToJSON..=)) (frameChallengeLoadingOverlay obj) : ["loading_text" Data.Aeson.Types.ToJSON..= frameChallengeLoadingText obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("response_errors" Data.Aeson.Types.ToJSON..=)) (frameChallengeResponseErrors obj) : ["url" Data.Aeson.Types.ToJSON..= frameChallengeUrl obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON FrameChallenge where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "FrameChallenge" (\obj -> (((((GHC.Base.pure FrameChallenge GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_info")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "loading_overlay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "loading_text")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "response_errors")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Create a new 'FrameChallenge' with all required fields.
mkFrameChallenge ::
  -- | 'frameChallengeLoadingText'
  Data.Text.Internal.Text ->
  -- | 'frameChallengeUrl'
  Data.Text.Internal.Text ->
  FrameChallenge
mkFrameChallenge frameChallengeLoadingText frameChallengeUrl =
  FrameChallenge
    { frameChallengeComponent = GHC.Maybe.Nothing,
      frameChallengeFlowInfo = GHC.Maybe.Nothing,
      frameChallengeLoadingOverlay = GHC.Maybe.Nothing,
      frameChallengeLoadingText = frameChallengeLoadingText,
      frameChallengeResponseErrors = GHC.Maybe.Nothing,
      frameChallengeUrl = frameChallengeUrl
    }

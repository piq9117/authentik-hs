{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema FlowStageBinding
module AuthentikAPI.Types.FlowStageBinding where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.FlowSet
import {-# SOURCE #-} AuthentikAPI.Types.PolicyEngineMode
import {-# SOURCE #-} AuthentikAPI.Types.Stage
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.FlowStageBinding@ in the specification.
--
-- FlowStageBinding Serializer
data FlowStageBinding = FlowStageBinding
  { -- | evaluate_on_plan: Evaluate policies during the Flow planning process.
    flowStageBindingEvaluateOnPlan :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | invalid_response_action: Configure how the flow executor should handle an invalid response to a challenge. RETRY returns the error message and a similar challenge to the executor. RESTART restarts the flow from the beginning, and RESTART_WITH_CONTEXT restarts the flow while keeping the current context.
    flowStageBindingInvalidResponseAction :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | order
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of -2.1474836e9
    flowStageBindingOrder :: GHC.Types.Int,
    -- | pk
    flowStageBindingPk :: Data.Text.Internal.Text,
    -- | policy_engine_mode
    flowStageBindingPolicyEngineMode :: (GHC.Maybe.Maybe PolicyEngineMode),
    -- | policybindingmodel_ptr_id
    flowStageBindingPolicybindingmodelPtrId :: Data.Text.Internal.Text,
    -- | re_evaluate_policies: Evaluate policies when the Stage is presented to the user.
    flowStageBindingReEvaluatePolicies :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | stage
    flowStageBindingStage :: Data.Text.Internal.Text,
    -- | stage_obj
    flowStageBindingStageObj :: FlowStageBindingStageObj',
    -- | target
    flowStageBindingTarget :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON FlowStageBinding where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("evaluate_on_plan" Data.Aeson.Types.ToJSON..=)) (flowStageBindingEvaluateOnPlan obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("invalid_response_action" Data.Aeson.Types.ToJSON..=)) (flowStageBindingInvalidResponseAction obj) : ["order" Data.Aeson.Types.ToJSON..= flowStageBindingOrder obj] : ["pk" Data.Aeson.Types.ToJSON..= flowStageBindingPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("policy_engine_mode" Data.Aeson.Types.ToJSON..=)) (flowStageBindingPolicyEngineMode obj) : ["policybindingmodel_ptr_id" Data.Aeson.Types.ToJSON..= flowStageBindingPolicybindingmodelPtrId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("re_evaluate_policies" Data.Aeson.Types.ToJSON..=)) (flowStageBindingReEvaluatePolicies obj) : ["stage" Data.Aeson.Types.ToJSON..= flowStageBindingStage obj] : ["stage_obj" Data.Aeson.Types.ToJSON..= flowStageBindingStageObj obj] : ["target" Data.Aeson.Types.ToJSON..= flowStageBindingTarget obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("evaluate_on_plan" Data.Aeson.Types.ToJSON..=)) (flowStageBindingEvaluateOnPlan obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("invalid_response_action" Data.Aeson.Types.ToJSON..=)) (flowStageBindingInvalidResponseAction obj) : ["order" Data.Aeson.Types.ToJSON..= flowStageBindingOrder obj] : ["pk" Data.Aeson.Types.ToJSON..= flowStageBindingPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("policy_engine_mode" Data.Aeson.Types.ToJSON..=)) (flowStageBindingPolicyEngineMode obj) : ["policybindingmodel_ptr_id" Data.Aeson.Types.ToJSON..= flowStageBindingPolicybindingmodelPtrId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("re_evaluate_policies" Data.Aeson.Types.ToJSON..=)) (flowStageBindingReEvaluatePolicies obj) : ["stage" Data.Aeson.Types.ToJSON..= flowStageBindingStage obj] : ["stage_obj" Data.Aeson.Types.ToJSON..= flowStageBindingStageObj obj] : ["target" Data.Aeson.Types.ToJSON..= flowStageBindingTarget obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON FlowStageBinding where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "FlowStageBinding" (\obj -> (((((((((GHC.Base.pure FlowStageBinding GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "evaluate_on_plan")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "invalid_response_action")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "order")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "policy_engine_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "policybindingmodel_ptr_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "re_evaluate_policies")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "stage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "stage_obj")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "target"))

-- | Create a new 'FlowStageBinding' with all required fields.
mkFlowStageBinding ::
  -- | 'flowStageBindingOrder'
  GHC.Types.Int ->
  -- | 'flowStageBindingPk'
  Data.Text.Internal.Text ->
  -- | 'flowStageBindingPolicybindingmodelPtrId'
  Data.Text.Internal.Text ->
  -- | 'flowStageBindingStage'
  Data.Text.Internal.Text ->
  -- | 'flowStageBindingStageObj'
  FlowStageBindingStageObj' ->
  -- | 'flowStageBindingTarget'
  Data.Text.Internal.Text ->
  FlowStageBinding
mkFlowStageBinding flowStageBindingOrder flowStageBindingPk flowStageBindingPolicybindingmodelPtrId flowStageBindingStage flowStageBindingStageObj flowStageBindingTarget =
  FlowStageBinding
    { flowStageBindingEvaluateOnPlan = GHC.Maybe.Nothing,
      flowStageBindingInvalidResponseAction = GHC.Maybe.Nothing,
      flowStageBindingOrder = flowStageBindingOrder,
      flowStageBindingPk = flowStageBindingPk,
      flowStageBindingPolicyEngineMode = GHC.Maybe.Nothing,
      flowStageBindingPolicybindingmodelPtrId = flowStageBindingPolicybindingmodelPtrId,
      flowStageBindingReEvaluatePolicies = GHC.Maybe.Nothing,
      flowStageBindingStage = flowStageBindingStage,
      flowStageBindingStageObj = flowStageBindingStageObj,
      flowStageBindingTarget = flowStageBindingTarget
    }

-- | Defines the object schema located at @components.schemas.FlowStageBinding.properties.stage_obj.allOf@ in the specification.
data FlowStageBindingStageObj' = FlowStageBindingStageObj'
  { -- | component: Get object type so that we know how to edit the object
    flowStageBindingStageObj'Component :: Data.Text.Internal.Text,
    -- | flow_set
    flowStageBindingStageObj'FlowSet :: (GHC.Maybe.Maybe [FlowSet]),
    -- | meta_model_name: Return internal model name
    flowStageBindingStageObj'MetaModelName :: Data.Text.Internal.Text,
    -- | name
    flowStageBindingStageObj'Name :: Data.Text.Internal.Text,
    -- | pk
    flowStageBindingStageObj'Pk :: Data.Text.Internal.Text,
    -- | verbose_name: Return object\'s verbose_name
    flowStageBindingStageObj'VerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    flowStageBindingStageObj'VerboseNamePlural :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON FlowStageBindingStageObj' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["component" Data.Aeson.Types.ToJSON..= flowStageBindingStageObj'Component obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_set" Data.Aeson.Types.ToJSON..=)) (flowStageBindingStageObj'FlowSet obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= flowStageBindingStageObj'MetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= flowStageBindingStageObj'Name obj] : ["pk" Data.Aeson.Types.ToJSON..= flowStageBindingStageObj'Pk obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= flowStageBindingStageObj'VerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= flowStageBindingStageObj'VerboseNamePlural obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["component" Data.Aeson.Types.ToJSON..= flowStageBindingStageObj'Component obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_set" Data.Aeson.Types.ToJSON..=)) (flowStageBindingStageObj'FlowSet obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= flowStageBindingStageObj'MetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= flowStageBindingStageObj'Name obj] : ["pk" Data.Aeson.Types.ToJSON..= flowStageBindingStageObj'Pk obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= flowStageBindingStageObj'VerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= flowStageBindingStageObj'VerboseNamePlural obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON FlowStageBindingStageObj' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "FlowStageBindingStageObj'" (\obj -> ((((((GHC.Base.pure FlowStageBindingStageObj' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_set")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural"))

-- | Create a new 'FlowStageBindingStageObj'' with all required fields.
mkFlowStageBindingStageObj' ::
  -- | 'flowStageBindingStageObj'Component'
  Data.Text.Internal.Text ->
  -- | 'flowStageBindingStageObj'MetaModelName'
  Data.Text.Internal.Text ->
  -- | 'flowStageBindingStageObj'Name'
  Data.Text.Internal.Text ->
  -- | 'flowStageBindingStageObj'Pk'
  Data.Text.Internal.Text ->
  -- | 'flowStageBindingStageObj'VerboseName'
  Data.Text.Internal.Text ->
  -- | 'flowStageBindingStageObj'VerboseNamePlural'
  Data.Text.Internal.Text ->
  FlowStageBindingStageObj'
mkFlowStageBindingStageObj' flowStageBindingStageObj'Component flowStageBindingStageObj'MetaModelName flowStageBindingStageObj'Name flowStageBindingStageObj'Pk flowStageBindingStageObj'VerboseName flowStageBindingStageObj'VerboseNamePlural =
  FlowStageBindingStageObj'
    { flowStageBindingStageObj'Component = flowStageBindingStageObj'Component,
      flowStageBindingStageObj'FlowSet = GHC.Maybe.Nothing,
      flowStageBindingStageObj'MetaModelName = flowStageBindingStageObj'MetaModelName,
      flowStageBindingStageObj'Name = flowStageBindingStageObj'Name,
      flowStageBindingStageObj'Pk = flowStageBindingStageObj'Pk,
      flowStageBindingStageObj'VerboseName = flowStageBindingStageObj'VerboseName,
      flowStageBindingStageObj'VerboseNamePlural = flowStageBindingStageObj'VerboseNamePlural
    }

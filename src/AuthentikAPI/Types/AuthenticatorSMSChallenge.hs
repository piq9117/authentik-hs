{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema AuthenticatorSMSChallenge
module AuthentikAPI.Types.AuthenticatorSMSChallenge where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.ContextualFlowInfo
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.AuthenticatorSMSChallenge@ in the specification.
--
-- SMS Setup challenge
data AuthenticatorSMSChallenge = AuthenticatorSMSChallenge
  { -- | component
    authenticatorSMSChallengeComponent :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | flow_info: Contextual flow information for a challenge
    authenticatorSMSChallengeFlowInfo :: (GHC.Maybe.Maybe ContextualFlowInfo),
    -- | pending_user
    authenticatorSMSChallengePendingUser :: Data.Text.Internal.Text,
    -- | pending_user_avatar
    authenticatorSMSChallengePendingUserAvatar :: Data.Text.Internal.Text,
    -- | phone_number_required
    authenticatorSMSChallengePhoneNumberRequired :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | response_errors
    authenticatorSMSChallengeResponseErrors :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON AuthenticatorSMSChallenge where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("component" Data.Aeson.Types.ToJSON..=)) (authenticatorSMSChallengeComponent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_info" Data.Aeson.Types.ToJSON..=)) (authenticatorSMSChallengeFlowInfo obj) : ["pending_user" Data.Aeson.Types.ToJSON..= authenticatorSMSChallengePendingUser obj] : ["pending_user_avatar" Data.Aeson.Types.ToJSON..= authenticatorSMSChallengePendingUserAvatar obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("phone_number_required" Data.Aeson.Types.ToJSON..=)) (authenticatorSMSChallengePhoneNumberRequired obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("response_errors" Data.Aeson.Types.ToJSON..=)) (authenticatorSMSChallengeResponseErrors obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("component" Data.Aeson.Types.ToJSON..=)) (authenticatorSMSChallengeComponent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_info" Data.Aeson.Types.ToJSON..=)) (authenticatorSMSChallengeFlowInfo obj) : ["pending_user" Data.Aeson.Types.ToJSON..= authenticatorSMSChallengePendingUser obj] : ["pending_user_avatar" Data.Aeson.Types.ToJSON..= authenticatorSMSChallengePendingUserAvatar obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("phone_number_required" Data.Aeson.Types.ToJSON..=)) (authenticatorSMSChallengePhoneNumberRequired obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("response_errors" Data.Aeson.Types.ToJSON..=)) (authenticatorSMSChallengeResponseErrors obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON AuthenticatorSMSChallenge where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "AuthenticatorSMSChallenge" (\obj -> (((((GHC.Base.pure AuthenticatorSMSChallenge GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_info")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pending_user")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pending_user_avatar")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "phone_number_required")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "response_errors"))

-- | Create a new 'AuthenticatorSMSChallenge' with all required fields.
mkAuthenticatorSMSChallenge ::
  -- | 'authenticatorSMSChallengePendingUser'
  Data.Text.Internal.Text ->
  -- | 'authenticatorSMSChallengePendingUserAvatar'
  Data.Text.Internal.Text ->
  AuthenticatorSMSChallenge
mkAuthenticatorSMSChallenge authenticatorSMSChallengePendingUser authenticatorSMSChallengePendingUserAvatar =
  AuthenticatorSMSChallenge
    { authenticatorSMSChallengeComponent = GHC.Maybe.Nothing,
      authenticatorSMSChallengeFlowInfo = GHC.Maybe.Nothing,
      authenticatorSMSChallengePendingUser = authenticatorSMSChallengePendingUser,
      authenticatorSMSChallengePendingUserAvatar = authenticatorSMSChallengePendingUserAvatar,
      authenticatorSMSChallengePhoneNumberRequired = GHC.Maybe.Nothing,
      authenticatorSMSChallengeResponseErrors = GHC.Maybe.Nothing
    }

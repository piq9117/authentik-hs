{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PlexSource
module AuthentikAPI.Types.PlexSource where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.PolicyEngineMode
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.PlexSource@ in the specification.
--
-- Plex Source Serializer
data PlexSource = PlexSource
  { -- | allow_friends: Allow friends to authenticate, even if you don\'t share a server.
    plexSourceAllowFriends :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | allowed_servers: Which servers a user has to be a member of to be granted access. Empty list allows every server.
    plexSourceAllowedServers :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | authentication_flow: Flow to use when authenticating existing users.
    plexSourceAuthenticationFlow :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | client_id: Client identifier used to talk to Plex.
    plexSourceClientId :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | component: Get object component so that we know how to edit the object
    plexSourceComponent :: Data.Text.Internal.Text,
    -- | enabled
    plexSourceEnabled :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | enrollment_flow: Flow to use when enrolling new users.
    plexSourceEnrollmentFlow :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | group_matching_mode: How the source determines if an existing group should be used or a new group created.
    plexSourceGroupMatchingMode :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | group_property_mappings
    plexSourceGroupPropertyMappings :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | icon
    plexSourceIcon :: Data.Text.Internal.Text,
    -- | managed: Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
    plexSourceManaged :: (AuthentikAPI.Common.Nullable Data.Text.Internal.Text),
    -- | meta_model_name: Return internal model name
    plexSourceMetaModelName :: Data.Text.Internal.Text,
    -- | name: Source\'s display Name.
    plexSourceName :: Data.Text.Internal.Text,
    -- | pk
    plexSourcePk :: Data.Text.Internal.Text,
    -- | plex_token: Plex token used to check friends
    plexSourcePlexToken :: Data.Text.Internal.Text,
    -- | policy_engine_mode
    plexSourcePolicyEngineMode :: (GHC.Maybe.Maybe PolicyEngineMode),
    -- | slug: Internal source name, used in URLs.
    --
    -- Constraints:
    --
    -- * Maximum length of 50
    -- * Must match pattern \'^[-a-zA-Z0-9_]+\$\'
    plexSourceSlug :: Data.Text.Internal.Text,
    -- | user_matching_mode: How the source determines if an existing user should be authenticated or a new user enrolled.
    plexSourceUserMatchingMode :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | user_path_template
    plexSourceUserPathTemplate :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | user_property_mappings
    plexSourceUserPropertyMappings :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | verbose_name: Return object\'s verbose_name
    plexSourceVerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    plexSourceVerboseNamePlural :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PlexSource where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allow_friends" Data.Aeson.Types.ToJSON..=)) (plexSourceAllowFriends obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allowed_servers" Data.Aeson.Types.ToJSON..=)) (plexSourceAllowedServers obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication_flow" Data.Aeson.Types.ToJSON..=)) (plexSourceAuthenticationFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("client_id" Data.Aeson.Types.ToJSON..=)) (plexSourceClientId obj) : ["component" Data.Aeson.Types.ToJSON..= plexSourceComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enabled" Data.Aeson.Types.ToJSON..=)) (plexSourceEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enrollment_flow" Data.Aeson.Types.ToJSON..=)) (plexSourceEnrollmentFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("group_matching_mode" Data.Aeson.Types.ToJSON..=)) (plexSourceGroupMatchingMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("group_property_mappings" Data.Aeson.Types.ToJSON..=)) (plexSourceGroupPropertyMappings obj) : ["icon" Data.Aeson.Types.ToJSON..= plexSourceIcon obj] : ["managed" Data.Aeson.Types.ToJSON..= plexSourceManaged obj] : ["meta_model_name" Data.Aeson.Types.ToJSON..= plexSourceMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= plexSourceName obj] : ["pk" Data.Aeson.Types.ToJSON..= plexSourcePk obj] : ["plex_token" Data.Aeson.Types.ToJSON..= plexSourcePlexToken obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("policy_engine_mode" Data.Aeson.Types.ToJSON..=)) (plexSourcePolicyEngineMode obj) : ["slug" Data.Aeson.Types.ToJSON..= plexSourceSlug obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_matching_mode" Data.Aeson.Types.ToJSON..=)) (plexSourceUserMatchingMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_path_template" Data.Aeson.Types.ToJSON..=)) (plexSourceUserPathTemplate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_property_mappings" Data.Aeson.Types.ToJSON..=)) (plexSourceUserPropertyMappings obj) : ["verbose_name" Data.Aeson.Types.ToJSON..= plexSourceVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= plexSourceVerboseNamePlural obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allow_friends" Data.Aeson.Types.ToJSON..=)) (plexSourceAllowFriends obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allowed_servers" Data.Aeson.Types.ToJSON..=)) (plexSourceAllowedServers obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication_flow" Data.Aeson.Types.ToJSON..=)) (plexSourceAuthenticationFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("client_id" Data.Aeson.Types.ToJSON..=)) (plexSourceClientId obj) : ["component" Data.Aeson.Types.ToJSON..= plexSourceComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enabled" Data.Aeson.Types.ToJSON..=)) (plexSourceEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enrollment_flow" Data.Aeson.Types.ToJSON..=)) (plexSourceEnrollmentFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("group_matching_mode" Data.Aeson.Types.ToJSON..=)) (plexSourceGroupMatchingMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("group_property_mappings" Data.Aeson.Types.ToJSON..=)) (plexSourceGroupPropertyMappings obj) : ["icon" Data.Aeson.Types.ToJSON..= plexSourceIcon obj] : ["managed" Data.Aeson.Types.ToJSON..= plexSourceManaged obj] : ["meta_model_name" Data.Aeson.Types.ToJSON..= plexSourceMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= plexSourceName obj] : ["pk" Data.Aeson.Types.ToJSON..= plexSourcePk obj] : ["plex_token" Data.Aeson.Types.ToJSON..= plexSourcePlexToken obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("policy_engine_mode" Data.Aeson.Types.ToJSON..=)) (plexSourcePolicyEngineMode obj) : ["slug" Data.Aeson.Types.ToJSON..= plexSourceSlug obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_matching_mode" Data.Aeson.Types.ToJSON..=)) (plexSourceUserMatchingMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_path_template" Data.Aeson.Types.ToJSON..=)) (plexSourceUserPathTemplate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_property_mappings" Data.Aeson.Types.ToJSON..=)) (plexSourceUserPropertyMappings obj) : ["verbose_name" Data.Aeson.Types.ToJSON..= plexSourceVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= plexSourceVerboseNamePlural obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PlexSource where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PlexSource" (\obj -> (((((((((((((((((((((GHC.Base.pure PlexSource GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "allow_friends")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "allowed_servers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "authentication_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "client_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "enrollment_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "group_matching_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "group_property_mappings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "icon")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "managed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "plex_token")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "policy_engine_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "slug")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "user_matching_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "user_path_template")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "user_property_mappings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural"))

-- | Create a new 'PlexSource' with all required fields.
mkPlexSource ::
  -- | 'plexSourceComponent'
  Data.Text.Internal.Text ->
  -- | 'plexSourceIcon'
  Data.Text.Internal.Text ->
  -- | 'plexSourceManaged'
  AuthentikAPI.Common.Nullable Data.Text.Internal.Text ->
  -- | 'plexSourceMetaModelName'
  Data.Text.Internal.Text ->
  -- | 'plexSourceName'
  Data.Text.Internal.Text ->
  -- | 'plexSourcePk'
  Data.Text.Internal.Text ->
  -- | 'plexSourcePlexToken'
  Data.Text.Internal.Text ->
  -- | 'plexSourceSlug'
  Data.Text.Internal.Text ->
  -- | 'plexSourceVerboseName'
  Data.Text.Internal.Text ->
  -- | 'plexSourceVerboseNamePlural'
  Data.Text.Internal.Text ->
  PlexSource
mkPlexSource plexSourceComponent plexSourceIcon plexSourceManaged plexSourceMetaModelName plexSourceName plexSourcePk plexSourcePlexToken plexSourceSlug plexSourceVerboseName plexSourceVerboseNamePlural =
  PlexSource
    { plexSourceAllowFriends = GHC.Maybe.Nothing,
      plexSourceAllowedServers = GHC.Maybe.Nothing,
      plexSourceAuthenticationFlow = GHC.Maybe.Nothing,
      plexSourceClientId = GHC.Maybe.Nothing,
      plexSourceComponent = plexSourceComponent,
      plexSourceEnabled = GHC.Maybe.Nothing,
      plexSourceEnrollmentFlow = GHC.Maybe.Nothing,
      plexSourceGroupMatchingMode = GHC.Maybe.Nothing,
      plexSourceGroupPropertyMappings = GHC.Maybe.Nothing,
      plexSourceIcon = plexSourceIcon,
      plexSourceManaged = plexSourceManaged,
      plexSourceMetaModelName = plexSourceMetaModelName,
      plexSourceName = plexSourceName,
      plexSourcePk = plexSourcePk,
      plexSourcePlexToken = plexSourcePlexToken,
      plexSourcePolicyEngineMode = GHC.Maybe.Nothing,
      plexSourceSlug = plexSourceSlug,
      plexSourceUserMatchingMode = GHC.Maybe.Nothing,
      plexSourceUserPathTemplate = GHC.Maybe.Nothing,
      plexSourceUserPropertyMappings = GHC.Maybe.Nothing,
      plexSourceVerboseName = plexSourceVerboseName,
      plexSourceVerboseNamePlural = plexSourceVerboseNamePlural
    }

{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema UserAssignedObjectPermission
module AuthentikAPI.Types.UserAssignedObjectPermission where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.UserObjectPermission
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.UserAssignedObjectPermission@ in the specification.
--
-- Users assigned object permission serializer
data UserAssignedObjectPermission = UserAssignedObjectPermission
  { -- | attributes
    userAssignedObjectPermissionAttributes :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | email
    --
    -- Constraints:
    --
    -- * Maximum length of 254
    userAssignedObjectPermissionEmail :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | is_active: Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
    userAssignedObjectPermissionIsActive :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | is_superuser
    userAssignedObjectPermissionIsSuperuser :: GHC.Types.Bool,
    -- | last_login
    userAssignedObjectPermissionLastLogin :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | name: User\'s display name.
    userAssignedObjectPermissionName :: Data.Text.Internal.Text,
    -- | permissions
    userAssignedObjectPermissionPermissions :: [UserObjectPermission],
    -- | pk
    userAssignedObjectPermissionPk :: GHC.Types.Int,
    -- | uid
    userAssignedObjectPermissionUid :: Data.Text.Internal.Text,
    -- | username: Required. 150 characters or fewer. Letters, digits and \@\/.\/+\/-\/_ only.
    --
    -- Constraints:
    --
    -- * Maximum length of 150
    -- * Must match pattern \'^[\\w.\@+-]+\$\'
    userAssignedObjectPermissionUsername :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON UserAssignedObjectPermission where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (userAssignedObjectPermissionAttributes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (userAssignedObjectPermissionEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_active" Data.Aeson.Types.ToJSON..=)) (userAssignedObjectPermissionIsActive obj) : ["is_superuser" Data.Aeson.Types.ToJSON..= userAssignedObjectPermissionIsSuperuser obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_login" Data.Aeson.Types.ToJSON..=)) (userAssignedObjectPermissionLastLogin obj) : ["name" Data.Aeson.Types.ToJSON..= userAssignedObjectPermissionName obj] : ["permissions" Data.Aeson.Types.ToJSON..= userAssignedObjectPermissionPermissions obj] : ["pk" Data.Aeson.Types.ToJSON..= userAssignedObjectPermissionPk obj] : ["uid" Data.Aeson.Types.ToJSON..= userAssignedObjectPermissionUid obj] : ["username" Data.Aeson.Types.ToJSON..= userAssignedObjectPermissionUsername obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (userAssignedObjectPermissionAttributes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (userAssignedObjectPermissionEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_active" Data.Aeson.Types.ToJSON..=)) (userAssignedObjectPermissionIsActive obj) : ["is_superuser" Data.Aeson.Types.ToJSON..= userAssignedObjectPermissionIsSuperuser obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_login" Data.Aeson.Types.ToJSON..=)) (userAssignedObjectPermissionLastLogin obj) : ["name" Data.Aeson.Types.ToJSON..= userAssignedObjectPermissionName obj] : ["permissions" Data.Aeson.Types.ToJSON..= userAssignedObjectPermissionPermissions obj] : ["pk" Data.Aeson.Types.ToJSON..= userAssignedObjectPermissionPk obj] : ["uid" Data.Aeson.Types.ToJSON..= userAssignedObjectPermissionUid obj] : ["username" Data.Aeson.Types.ToJSON..= userAssignedObjectPermissionUsername obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON UserAssignedObjectPermission where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "UserAssignedObjectPermission" (\obj -> (((((((((GHC.Base.pure UserAssignedObjectPermission GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "attributes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "is_active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "is_superuser")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "last_login")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "permissions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "uid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "username"))

-- | Create a new 'UserAssignedObjectPermission' with all required fields.
mkUserAssignedObjectPermission ::
  -- | 'userAssignedObjectPermissionIsSuperuser'
  GHC.Types.Bool ->
  -- | 'userAssignedObjectPermissionName'
  Data.Text.Internal.Text ->
  -- | 'userAssignedObjectPermissionPermissions'
  [UserObjectPermission] ->
  -- | 'userAssignedObjectPermissionPk'
  GHC.Types.Int ->
  -- | 'userAssignedObjectPermissionUid'
  Data.Text.Internal.Text ->
  -- | 'userAssignedObjectPermissionUsername'
  Data.Text.Internal.Text ->
  UserAssignedObjectPermission
mkUserAssignedObjectPermission userAssignedObjectPermissionIsSuperuser userAssignedObjectPermissionName userAssignedObjectPermissionPermissions userAssignedObjectPermissionPk userAssignedObjectPermissionUid userAssignedObjectPermissionUsername =
  UserAssignedObjectPermission
    { userAssignedObjectPermissionAttributes = GHC.Maybe.Nothing,
      userAssignedObjectPermissionEmail = GHC.Maybe.Nothing,
      userAssignedObjectPermissionIsActive = GHC.Maybe.Nothing,
      userAssignedObjectPermissionIsSuperuser = userAssignedObjectPermissionIsSuperuser,
      userAssignedObjectPermissionLastLogin = GHC.Maybe.Nothing,
      userAssignedObjectPermissionName = userAssignedObjectPermissionName,
      userAssignedObjectPermissionPermissions = userAssignedObjectPermissionPermissions,
      userAssignedObjectPermissionPk = userAssignedObjectPermissionPk,
      userAssignedObjectPermissionUid = userAssignedObjectPermissionUid,
      userAssignedObjectPermissionUsername = userAssignedObjectPermissionUsername
    }

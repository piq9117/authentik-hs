{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema CertificateKeyPair
module AuthentikAPI.Types.CertificateKeyPair where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.CertificateKeyPair@ in the specification.
--
-- CertificateKeyPair Serializer
data CertificateKeyPair = CertificateKeyPair
  { -- | cert_expiry: Get certificate expiry
    certificateKeyPairCertExpiry :: (AuthentikAPI.Common.Nullable Data.Text.Internal.Text),
    -- | cert_subject: Get certificate subject as full rfc4514
    certificateKeyPairCertSubject :: (AuthentikAPI.Common.Nullable Data.Text.Internal.Text),
    -- | certificate_download_url: Get URL to download certificate
    certificateKeyPairCertificateDownloadUrl :: Data.Text.Internal.Text,
    -- | fingerprint_sha1: Get certificate Hash (SHA1)
    certificateKeyPairFingerprintSha1 :: (AuthentikAPI.Common.Nullable Data.Text.Internal.Text),
    -- | fingerprint_sha256: Get certificate Hash (SHA256)
    certificateKeyPairFingerprintSha256 :: (AuthentikAPI.Common.Nullable Data.Text.Internal.Text),
    -- | managed: Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
    certificateKeyPairManaged :: (AuthentikAPI.Common.Nullable Data.Text.Internal.Text),
    -- | name
    certificateKeyPairName :: Data.Text.Internal.Text,
    -- | pk
    certificateKeyPairPk :: Data.Text.Internal.Text,
    -- | private_key_available: Show if this keypair has a private key configured or not
    certificateKeyPairPrivateKeyAvailable :: GHC.Types.Bool,
    -- | private_key_download_url: Get URL to download private key
    certificateKeyPairPrivateKeyDownloadUrl :: Data.Text.Internal.Text,
    -- | private_key_type: Get the private key\'s type, if set
    certificateKeyPairPrivateKeyType :: (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON CertificateKeyPair where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["cert_expiry" Data.Aeson.Types.ToJSON..= certificateKeyPairCertExpiry obj] : ["cert_subject" Data.Aeson.Types.ToJSON..= certificateKeyPairCertSubject obj] : ["certificate_download_url" Data.Aeson.Types.ToJSON..= certificateKeyPairCertificateDownloadUrl obj] : ["fingerprint_sha1" Data.Aeson.Types.ToJSON..= certificateKeyPairFingerprintSha1 obj] : ["fingerprint_sha256" Data.Aeson.Types.ToJSON..= certificateKeyPairFingerprintSha256 obj] : ["managed" Data.Aeson.Types.ToJSON..= certificateKeyPairManaged obj] : ["name" Data.Aeson.Types.ToJSON..= certificateKeyPairName obj] : ["pk" Data.Aeson.Types.ToJSON..= certificateKeyPairPk obj] : ["private_key_available" Data.Aeson.Types.ToJSON..= certificateKeyPairPrivateKeyAvailable obj] : ["private_key_download_url" Data.Aeson.Types.ToJSON..= certificateKeyPairPrivateKeyDownloadUrl obj] : ["private_key_type" Data.Aeson.Types.ToJSON..= certificateKeyPairPrivateKeyType obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["cert_expiry" Data.Aeson.Types.ToJSON..= certificateKeyPairCertExpiry obj] : ["cert_subject" Data.Aeson.Types.ToJSON..= certificateKeyPairCertSubject obj] : ["certificate_download_url" Data.Aeson.Types.ToJSON..= certificateKeyPairCertificateDownloadUrl obj] : ["fingerprint_sha1" Data.Aeson.Types.ToJSON..= certificateKeyPairFingerprintSha1 obj] : ["fingerprint_sha256" Data.Aeson.Types.ToJSON..= certificateKeyPairFingerprintSha256 obj] : ["managed" Data.Aeson.Types.ToJSON..= certificateKeyPairManaged obj] : ["name" Data.Aeson.Types.ToJSON..= certificateKeyPairName obj] : ["pk" Data.Aeson.Types.ToJSON..= certificateKeyPairPk obj] : ["private_key_available" Data.Aeson.Types.ToJSON..= certificateKeyPairPrivateKeyAvailable obj] : ["private_key_download_url" Data.Aeson.Types.ToJSON..= certificateKeyPairPrivateKeyDownloadUrl obj] : ["private_key_type" Data.Aeson.Types.ToJSON..= certificateKeyPairPrivateKeyType obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON CertificateKeyPair where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "CertificateKeyPair" (\obj -> ((((((((((GHC.Base.pure CertificateKeyPair GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cert_expiry")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cert_subject")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "certificate_download_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "fingerprint_sha1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "fingerprint_sha256")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "managed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "private_key_available")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "private_key_download_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "private_key_type"))

-- | Create a new 'CertificateKeyPair' with all required fields.
mkCertificateKeyPair ::
  -- | 'certificateKeyPairCertExpiry'
  AuthentikAPI.Common.Nullable Data.Text.Internal.Text ->
  -- | 'certificateKeyPairCertSubject'
  AuthentikAPI.Common.Nullable Data.Text.Internal.Text ->
  -- | 'certificateKeyPairCertificateDownloadUrl'
  Data.Text.Internal.Text ->
  -- | 'certificateKeyPairFingerprintSha1'
  AuthentikAPI.Common.Nullable Data.Text.Internal.Text ->
  -- | 'certificateKeyPairFingerprintSha256'
  AuthentikAPI.Common.Nullable Data.Text.Internal.Text ->
  -- | 'certificateKeyPairManaged'
  AuthentikAPI.Common.Nullable Data.Text.Internal.Text ->
  -- | 'certificateKeyPairName'
  Data.Text.Internal.Text ->
  -- | 'certificateKeyPairPk'
  Data.Text.Internal.Text ->
  -- | 'certificateKeyPairPrivateKeyAvailable'
  GHC.Types.Bool ->
  -- | 'certificateKeyPairPrivateKeyDownloadUrl'
  Data.Text.Internal.Text ->
  -- | 'certificateKeyPairPrivateKeyType'
  AuthentikAPI.Common.Nullable Data.Text.Internal.Text ->
  CertificateKeyPair
mkCertificateKeyPair certificateKeyPairCertExpiry certificateKeyPairCertSubject certificateKeyPairCertificateDownloadUrl certificateKeyPairFingerprintSha1 certificateKeyPairFingerprintSha256 certificateKeyPairManaged certificateKeyPairName certificateKeyPairPk certificateKeyPairPrivateKeyAvailable certificateKeyPairPrivateKeyDownloadUrl certificateKeyPairPrivateKeyType =
  CertificateKeyPair
    { certificateKeyPairCertExpiry = certificateKeyPairCertExpiry,
      certificateKeyPairCertSubject = certificateKeyPairCertSubject,
      certificateKeyPairCertificateDownloadUrl = certificateKeyPairCertificateDownloadUrl,
      certificateKeyPairFingerprintSha1 = certificateKeyPairFingerprintSha1,
      certificateKeyPairFingerprintSha256 = certificateKeyPairFingerprintSha256,
      certificateKeyPairManaged = certificateKeyPairManaged,
      certificateKeyPairName = certificateKeyPairName,
      certificateKeyPairPk = certificateKeyPairPk,
      certificateKeyPairPrivateKeyAvailable = certificateKeyPairPrivateKeyAvailable,
      certificateKeyPairPrivateKeyDownloadUrl = certificateKeyPairPrivateKeyDownloadUrl,
      certificateKeyPairPrivateKeyType = certificateKeyPairPrivateKeyType
    }

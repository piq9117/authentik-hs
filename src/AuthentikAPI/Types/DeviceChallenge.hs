{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema DeviceChallenge
module AuthentikAPI.Types.DeviceChallenge where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.DeviceChallenge@ in the specification.
--
-- Single device challenge
data DeviceChallenge = DeviceChallenge
  { -- | challenge
    deviceChallengeChallenge :: Data.Aeson.Types.Internal.Object,
    -- | device_class
    deviceChallengeDeviceClass :: Data.Text.Internal.Text,
    -- | device_uid
    deviceChallengeDeviceUid :: Data.Text.Internal.Text,
    -- | last_used
    deviceChallengeLastUsed :: (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DeviceChallenge where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["challenge" Data.Aeson.Types.ToJSON..= deviceChallengeChallenge obj] : ["device_class" Data.Aeson.Types.ToJSON..= deviceChallengeDeviceClass obj] : ["device_uid" Data.Aeson.Types.ToJSON..= deviceChallengeDeviceUid obj] : ["last_used" Data.Aeson.Types.ToJSON..= deviceChallengeLastUsed obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["challenge" Data.Aeson.Types.ToJSON..= deviceChallengeChallenge obj] : ["device_class" Data.Aeson.Types.ToJSON..= deviceChallengeDeviceClass obj] : ["device_uid" Data.Aeson.Types.ToJSON..= deviceChallengeDeviceUid obj] : ["last_used" Data.Aeson.Types.ToJSON..= deviceChallengeLastUsed obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON DeviceChallenge where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DeviceChallenge" (\obj -> (((GHC.Base.pure DeviceChallenge GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "challenge")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "device_class")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "device_uid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "last_used"))

-- | Create a new 'DeviceChallenge' with all required fields.
mkDeviceChallenge ::
  -- | 'deviceChallengeChallenge'
  Data.Aeson.Types.Internal.Object ->
  -- | 'deviceChallengeDeviceClass'
  Data.Text.Internal.Text ->
  -- | 'deviceChallengeDeviceUid'
  Data.Text.Internal.Text ->
  -- | 'deviceChallengeLastUsed'
  AuthentikAPI.Common.Nullable Data.Text.Internal.Text ->
  DeviceChallenge
mkDeviceChallenge deviceChallengeChallenge deviceChallengeDeviceClass deviceChallengeDeviceUid deviceChallengeLastUsed =
  DeviceChallenge
    { deviceChallengeChallenge = deviceChallengeChallenge,
      deviceChallengeDeviceClass = deviceChallengeDeviceClass,
      deviceChallengeDeviceUid = deviceChallengeDeviceUid,
      deviceChallengeLastUsed = deviceChallengeLastUsed
    }

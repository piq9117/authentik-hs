{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PatchedAuthenticatorSMSStageRequest
module AuthentikAPI.Types.PatchedAuthenticatorSMSStageRequest where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.AuthTypeEnum
import {-# SOURCE #-} AuthentikAPI.Types.FlowSetRequest
import {-# SOURCE #-} AuthentikAPI.Types.ProviderEnum
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.PatchedAuthenticatorSMSStageRequest@ in the specification.
--
-- AuthenticatorSMSStage Serializer
data PatchedAuthenticatorSMSStageRequest = PatchedAuthenticatorSMSStageRequest
  { -- | account_sid
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedAuthenticatorSMSStageRequestAccountSid :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | auth
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedAuthenticatorSMSStageRequestAuth :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | auth_password
    patchedAuthenticatorSMSStageRequestAuthPassword :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | auth_type
    patchedAuthenticatorSMSStageRequestAuthType :: (GHC.Maybe.Maybe AuthTypeEnum),
    -- | configure_flow: Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
    patchedAuthenticatorSMSStageRequestConfigureFlow :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | flow_set
    patchedAuthenticatorSMSStageRequestFlowSet :: (GHC.Maybe.Maybe [FlowSetRequest]),
    -- | friendly_name
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedAuthenticatorSMSStageRequestFriendlyName :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | from_number
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedAuthenticatorSMSStageRequestFromNumber :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | mapping: Optionally modify the payload being sent to custom providers.
    patchedAuthenticatorSMSStageRequestMapping :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | name
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedAuthenticatorSMSStageRequestName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | provider
    patchedAuthenticatorSMSStageRequestProvider :: (GHC.Maybe.Maybe ProviderEnum),
    -- | verify_only: When enabled, the Phone number is only used during enrollment to verify the users authenticity. Only a hash of the phone number is saved to ensure it is not reused in the future.
    patchedAuthenticatorSMSStageRequestVerifyOnly :: (GHC.Maybe.Maybe GHC.Types.Bool)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PatchedAuthenticatorSMSStageRequest where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_sid" Data.Aeson.Types.ToJSON..=)) (patchedAuthenticatorSMSStageRequestAccountSid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("auth" Data.Aeson.Types.ToJSON..=)) (patchedAuthenticatorSMSStageRequestAuth obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("auth_password" Data.Aeson.Types.ToJSON..=)) (patchedAuthenticatorSMSStageRequestAuthPassword obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("auth_type" Data.Aeson.Types.ToJSON..=)) (patchedAuthenticatorSMSStageRequestAuthType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("configure_flow" Data.Aeson.Types.ToJSON..=)) (patchedAuthenticatorSMSStageRequestConfigureFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_set" Data.Aeson.Types.ToJSON..=)) (patchedAuthenticatorSMSStageRequestFlowSet obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("friendly_name" Data.Aeson.Types.ToJSON..=)) (patchedAuthenticatorSMSStageRequestFriendlyName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("from_number" Data.Aeson.Types.ToJSON..=)) (patchedAuthenticatorSMSStageRequestFromNumber obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mapping" Data.Aeson.Types.ToJSON..=)) (patchedAuthenticatorSMSStageRequestMapping obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (patchedAuthenticatorSMSStageRequestName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("provider" Data.Aeson.Types.ToJSON..=)) (patchedAuthenticatorSMSStageRequestProvider obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verify_only" Data.Aeson.Types.ToJSON..=)) (patchedAuthenticatorSMSStageRequestVerifyOnly obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_sid" Data.Aeson.Types.ToJSON..=)) (patchedAuthenticatorSMSStageRequestAccountSid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("auth" Data.Aeson.Types.ToJSON..=)) (patchedAuthenticatorSMSStageRequestAuth obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("auth_password" Data.Aeson.Types.ToJSON..=)) (patchedAuthenticatorSMSStageRequestAuthPassword obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("auth_type" Data.Aeson.Types.ToJSON..=)) (patchedAuthenticatorSMSStageRequestAuthType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("configure_flow" Data.Aeson.Types.ToJSON..=)) (patchedAuthenticatorSMSStageRequestConfigureFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_set" Data.Aeson.Types.ToJSON..=)) (patchedAuthenticatorSMSStageRequestFlowSet obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("friendly_name" Data.Aeson.Types.ToJSON..=)) (patchedAuthenticatorSMSStageRequestFriendlyName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("from_number" Data.Aeson.Types.ToJSON..=)) (patchedAuthenticatorSMSStageRequestFromNumber obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mapping" Data.Aeson.Types.ToJSON..=)) (patchedAuthenticatorSMSStageRequestMapping obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (patchedAuthenticatorSMSStageRequestName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("provider" Data.Aeson.Types.ToJSON..=)) (patchedAuthenticatorSMSStageRequestProvider obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verify_only" Data.Aeson.Types.ToJSON..=)) (patchedAuthenticatorSMSStageRequestVerifyOnly obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PatchedAuthenticatorSMSStageRequest where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchedAuthenticatorSMSStageRequest" (\obj -> (((((((((((GHC.Base.pure PatchedAuthenticatorSMSStageRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account_sid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "auth")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "auth_password")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "auth_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "configure_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_set")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "friendly_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "from_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mapping")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "provider")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verify_only"))

-- | Create a new 'PatchedAuthenticatorSMSStageRequest' with all required fields.
mkPatchedAuthenticatorSMSStageRequest :: PatchedAuthenticatorSMSStageRequest
mkPatchedAuthenticatorSMSStageRequest =
  PatchedAuthenticatorSMSStageRequest
    { patchedAuthenticatorSMSStageRequestAccountSid = GHC.Maybe.Nothing,
      patchedAuthenticatorSMSStageRequestAuth = GHC.Maybe.Nothing,
      patchedAuthenticatorSMSStageRequestAuthPassword = GHC.Maybe.Nothing,
      patchedAuthenticatorSMSStageRequestAuthType = GHC.Maybe.Nothing,
      patchedAuthenticatorSMSStageRequestConfigureFlow = GHC.Maybe.Nothing,
      patchedAuthenticatorSMSStageRequestFlowSet = GHC.Maybe.Nothing,
      patchedAuthenticatorSMSStageRequestFriendlyName = GHC.Maybe.Nothing,
      patchedAuthenticatorSMSStageRequestFromNumber = GHC.Maybe.Nothing,
      patchedAuthenticatorSMSStageRequestMapping = GHC.Maybe.Nothing,
      patchedAuthenticatorSMSStageRequestName = GHC.Maybe.Nothing,
      patchedAuthenticatorSMSStageRequestProvider = GHC.Maybe.Nothing,
      patchedAuthenticatorSMSStageRequestVerifyOnly = GHC.Maybe.Nothing
    }

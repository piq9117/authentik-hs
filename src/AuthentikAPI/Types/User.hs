{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema User
module AuthentikAPI.Types.User where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.UserGroup
import {-# SOURCE #-} AuthentikAPI.Types.UserTypeEnum
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.User@ in the specification.
--
-- User Serializer
data User = User
  { -- | attributes
    userAttributes :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | avatar: User\'s avatar, either a http\/https URL or a data URI
    userAvatar :: Data.Text.Internal.Text,
    -- | date_joined
    userDateJoined :: Data.Text.Internal.Text,
    -- | email
    --
    -- Constraints:
    --
    -- * Maximum length of 254
    userEmail :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | groups
    userGroups :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | groups_obj
    userGroupsObj :: (AuthentikAPI.Common.Nullable [UserGroup]),
    -- | is_active: Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
    userIsActive :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | is_superuser
    userIsSuperuser :: GHC.Types.Bool,
    -- | last_login
    userLastLogin :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | name: User\'s display name.
    userName :: Data.Text.Internal.Text,
    -- | password_change_date
    userPasswordChangeDate :: Data.Text.Internal.Text,
    -- | path
    userPath :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | pk
    userPk :: GHC.Types.Int,
    -- | type
    userType :: (GHC.Maybe.Maybe UserTypeEnum),
    -- | uid
    userUid :: Data.Text.Internal.Text,
    -- | username
    --
    -- Constraints:
    --
    -- * Maximum length of 150
    userUsername :: Data.Text.Internal.Text,
    -- | uuid
    userUuid :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON User where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (userAttributes obj) : ["avatar" Data.Aeson.Types.ToJSON..= userAvatar obj] : ["date_joined" Data.Aeson.Types.ToJSON..= userDateJoined obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (userEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("groups" Data.Aeson.Types.ToJSON..=)) (userGroups obj) : ["groups_obj" Data.Aeson.Types.ToJSON..= userGroupsObj obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_active" Data.Aeson.Types.ToJSON..=)) (userIsActive obj) : ["is_superuser" Data.Aeson.Types.ToJSON..= userIsSuperuser obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_login" Data.Aeson.Types.ToJSON..=)) (userLastLogin obj) : ["name" Data.Aeson.Types.ToJSON..= userName obj] : ["password_change_date" Data.Aeson.Types.ToJSON..= userPasswordChangeDate obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("path" Data.Aeson.Types.ToJSON..=)) (userPath obj) : ["pk" Data.Aeson.Types.ToJSON..= userPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (userType obj) : ["uid" Data.Aeson.Types.ToJSON..= userUid obj] : ["username" Data.Aeson.Types.ToJSON..= userUsername obj] : ["uuid" Data.Aeson.Types.ToJSON..= userUuid obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (userAttributes obj) : ["avatar" Data.Aeson.Types.ToJSON..= userAvatar obj] : ["date_joined" Data.Aeson.Types.ToJSON..= userDateJoined obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (userEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("groups" Data.Aeson.Types.ToJSON..=)) (userGroups obj) : ["groups_obj" Data.Aeson.Types.ToJSON..= userGroupsObj obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_active" Data.Aeson.Types.ToJSON..=)) (userIsActive obj) : ["is_superuser" Data.Aeson.Types.ToJSON..= userIsSuperuser obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_login" Data.Aeson.Types.ToJSON..=)) (userLastLogin obj) : ["name" Data.Aeson.Types.ToJSON..= userName obj] : ["password_change_date" Data.Aeson.Types.ToJSON..= userPasswordChangeDate obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("path" Data.Aeson.Types.ToJSON..=)) (userPath obj) : ["pk" Data.Aeson.Types.ToJSON..= userPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (userType obj) : ["uid" Data.Aeson.Types.ToJSON..= userUid obj] : ["username" Data.Aeson.Types.ToJSON..= userUsername obj] : ["uuid" Data.Aeson.Types.ToJSON..= userUuid obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON User where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "User" (\obj -> ((((((((((((((((GHC.Base.pure User GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "attributes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "avatar")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "date_joined")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "groups")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "groups_obj")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "is_active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "is_superuser")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "last_login")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "password_change_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "path")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "uid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "username")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "uuid"))

-- | Create a new 'User' with all required fields.
mkUser ::
  -- | 'userAvatar'
  Data.Text.Internal.Text ->
  -- | 'userDateJoined'
  Data.Text.Internal.Text ->
  -- | 'userGroupsObj'
  AuthentikAPI.Common.Nullable [UserGroup] ->
  -- | 'userIsSuperuser'
  GHC.Types.Bool ->
  -- | 'userName'
  Data.Text.Internal.Text ->
  -- | 'userPasswordChangeDate'
  Data.Text.Internal.Text ->
  -- | 'userPk'
  GHC.Types.Int ->
  -- | 'userUid'
  Data.Text.Internal.Text ->
  -- | 'userUsername'
  Data.Text.Internal.Text ->
  -- | 'userUuid'
  Data.Text.Internal.Text ->
  User
mkUser userAvatar userDateJoined userGroupsObj userIsSuperuser userName userPasswordChangeDate userPk userUid userUsername userUuid =
  User
    { userAttributes = GHC.Maybe.Nothing,
      userAvatar = userAvatar,
      userDateJoined = userDateJoined,
      userEmail = GHC.Maybe.Nothing,
      userGroups = GHC.Maybe.Nothing,
      userGroupsObj = userGroupsObj,
      userIsActive = GHC.Maybe.Nothing,
      userIsSuperuser = userIsSuperuser,
      userLastLogin = GHC.Maybe.Nothing,
      userName = userName,
      userPasswordChangeDate = userPasswordChangeDate,
      userPath = GHC.Maybe.Nothing,
      userPk = userPk,
      userType = GHC.Maybe.Nothing,
      userUid = userUid,
      userUsername = userUsername,
      userUuid = userUuid
    }

{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema UserConsent
module AuthentikAPI.Types.UserConsent where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.Application
import {-# SOURCE #-} AuthentikAPI.Types.User
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.UserConsent@ in the specification.
--
-- UserConsent Serializer
data UserConsent = UserConsent
  { -- | application: Application Serializer
    userConsentApplication :: Application,
    -- | expires
    userConsentExpires :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | expiring
    userConsentExpiring :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | permissions
    userConsentPermissions :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | pk
    userConsentPk :: GHC.Types.Int,
    -- | user: User Serializer
    userConsentUser :: User
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON UserConsent where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["application" Data.Aeson.Types.ToJSON..= userConsentApplication obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires" Data.Aeson.Types.ToJSON..=)) (userConsentExpires obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expiring" Data.Aeson.Types.ToJSON..=)) (userConsentExpiring obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("permissions" Data.Aeson.Types.ToJSON..=)) (userConsentPermissions obj) : ["pk" Data.Aeson.Types.ToJSON..= userConsentPk obj] : ["user" Data.Aeson.Types.ToJSON..= userConsentUser obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["application" Data.Aeson.Types.ToJSON..= userConsentApplication obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires" Data.Aeson.Types.ToJSON..=)) (userConsentExpires obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expiring" Data.Aeson.Types.ToJSON..=)) (userConsentExpiring obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("permissions" Data.Aeson.Types.ToJSON..=)) (userConsentPermissions obj) : ["pk" Data.Aeson.Types.ToJSON..= userConsentPk obj] : ["user" Data.Aeson.Types.ToJSON..= userConsentUser obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON UserConsent where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "UserConsent" (\obj -> (((((GHC.Base.pure UserConsent GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "application")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expires")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expiring")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "permissions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "user"))

-- | Create a new 'UserConsent' with all required fields.
mkUserConsent ::
  -- | 'userConsentApplication'
  Application ->
  -- | 'userConsentPk'
  GHC.Types.Int ->
  -- | 'userConsentUser'
  User ->
  UserConsent
mkUserConsent userConsentApplication userConsentPk userConsentUser =
  UserConsent
    { userConsentApplication = userConsentApplication,
      userConsentExpires = GHC.Maybe.Nothing,
      userConsentExpiring = GHC.Maybe.Nothing,
      userConsentPermissions = GHC.Maybe.Nothing,
      userConsentPk = userConsentPk,
      userConsentUser = userConsentUser
    }

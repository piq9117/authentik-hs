{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema SystemInfo
module AuthentikAPI.Types.SystemInfo where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.SystemInfo@ in the specification.
--
-- Get system information.
data SystemInfo = SystemInfo
  { -- | brand: Currently active brand
    systemInfoBrand :: Data.Text.Internal.Text,
    -- | embedded_outpost_disabled: Whether the embedded outpost is disabled
    systemInfoEmbeddedOutpostDisabled :: GHC.Types.Bool,
    -- | embedded_outpost_host: Get the FQDN configured on the embedded outpost
    systemInfoEmbeddedOutpostHost :: Data.Text.Internal.Text,
    -- | http_headers: Get HTTP Request headers
    systemInfoHttpHeaders :: Data.Aeson.Types.Internal.Object,
    -- | http_host: Get HTTP host
    systemInfoHttpHost :: Data.Text.Internal.Text,
    -- | http_is_secure: Get HTTP Secure flag
    systemInfoHttpIsSecure :: GHC.Types.Bool,
    -- | runtime: Get versions
    systemInfoRuntime :: SystemInfoRuntime',
    -- | server_time: Current server time
    systemInfoServerTime :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SystemInfo where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["brand" Data.Aeson.Types.ToJSON..= systemInfoBrand obj] : ["embedded_outpost_disabled" Data.Aeson.Types.ToJSON..= systemInfoEmbeddedOutpostDisabled obj] : ["embedded_outpost_host" Data.Aeson.Types.ToJSON..= systemInfoEmbeddedOutpostHost obj] : ["http_headers" Data.Aeson.Types.ToJSON..= systemInfoHttpHeaders obj] : ["http_host" Data.Aeson.Types.ToJSON..= systemInfoHttpHost obj] : ["http_is_secure" Data.Aeson.Types.ToJSON..= systemInfoHttpIsSecure obj] : ["runtime" Data.Aeson.Types.ToJSON..= systemInfoRuntime obj] : ["server_time" Data.Aeson.Types.ToJSON..= systemInfoServerTime obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["brand" Data.Aeson.Types.ToJSON..= systemInfoBrand obj] : ["embedded_outpost_disabled" Data.Aeson.Types.ToJSON..= systemInfoEmbeddedOutpostDisabled obj] : ["embedded_outpost_host" Data.Aeson.Types.ToJSON..= systemInfoEmbeddedOutpostHost obj] : ["http_headers" Data.Aeson.Types.ToJSON..= systemInfoHttpHeaders obj] : ["http_host" Data.Aeson.Types.ToJSON..= systemInfoHttpHost obj] : ["http_is_secure" Data.Aeson.Types.ToJSON..= systemInfoHttpIsSecure obj] : ["runtime" Data.Aeson.Types.ToJSON..= systemInfoRuntime obj] : ["server_time" Data.Aeson.Types.ToJSON..= systemInfoServerTime obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SystemInfo where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SystemInfo" (\obj -> (((((((GHC.Base.pure SystemInfo GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "brand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "embedded_outpost_disabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "embedded_outpost_host")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "http_headers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "http_host")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "http_is_secure")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "runtime")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "server_time"))

-- | Create a new 'SystemInfo' with all required fields.
mkSystemInfo ::
  -- | 'systemInfoBrand'
  Data.Text.Internal.Text ->
  -- | 'systemInfoEmbeddedOutpostDisabled'
  GHC.Types.Bool ->
  -- | 'systemInfoEmbeddedOutpostHost'
  Data.Text.Internal.Text ->
  -- | 'systemInfoHttpHeaders'
  Data.Aeson.Types.Internal.Object ->
  -- | 'systemInfoHttpHost'
  Data.Text.Internal.Text ->
  -- | 'systemInfoHttpIsSecure'
  GHC.Types.Bool ->
  -- | 'systemInfoRuntime'
  SystemInfoRuntime' ->
  -- | 'systemInfoServerTime'
  Data.Text.Internal.Text ->
  SystemInfo
mkSystemInfo systemInfoBrand systemInfoEmbeddedOutpostDisabled systemInfoEmbeddedOutpostHost systemInfoHttpHeaders systemInfoHttpHost systemInfoHttpIsSecure systemInfoRuntime systemInfoServerTime =
  SystemInfo
    { systemInfoBrand = systemInfoBrand,
      systemInfoEmbeddedOutpostDisabled = systemInfoEmbeddedOutpostDisabled,
      systemInfoEmbeddedOutpostHost = systemInfoEmbeddedOutpostHost,
      systemInfoHttpHeaders = systemInfoHttpHeaders,
      systemInfoHttpHost = systemInfoHttpHost,
      systemInfoHttpIsSecure = systemInfoHttpIsSecure,
      systemInfoRuntime = systemInfoRuntime,
      systemInfoServerTime = systemInfoServerTime
    }

-- | Defines the object schema located at @components.schemas.SystemInfo.properties.runtime@ in the specification.
--
-- Get versions
data SystemInfoRuntime' = SystemInfoRuntime'
  { -- | architecture
    systemInfoRuntime'Architecture :: Data.Text.Internal.Text,
    -- | authentik_version
    systemInfoRuntime'AuthentikVersion :: Data.Text.Internal.Text,
    -- | environment
    systemInfoRuntime'Environment :: Data.Text.Internal.Text,
    -- | openssl_fips_enabled
    systemInfoRuntime'OpensslFipsEnabled :: (AuthentikAPI.Common.Nullable GHC.Types.Bool),
    -- | openssl_version
    systemInfoRuntime'OpensslVersion :: Data.Text.Internal.Text,
    -- | platform
    systemInfoRuntime'Platform :: Data.Text.Internal.Text,
    -- | python_version
    systemInfoRuntime'PythonVersion :: Data.Text.Internal.Text,
    -- | uname
    systemInfoRuntime'Uname :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SystemInfoRuntime' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["architecture" Data.Aeson.Types.ToJSON..= systemInfoRuntime'Architecture obj] : ["authentik_version" Data.Aeson.Types.ToJSON..= systemInfoRuntime'AuthentikVersion obj] : ["environment" Data.Aeson.Types.ToJSON..= systemInfoRuntime'Environment obj] : ["openssl_fips_enabled" Data.Aeson.Types.ToJSON..= systemInfoRuntime'OpensslFipsEnabled obj] : ["openssl_version" Data.Aeson.Types.ToJSON..= systemInfoRuntime'OpensslVersion obj] : ["platform" Data.Aeson.Types.ToJSON..= systemInfoRuntime'Platform obj] : ["python_version" Data.Aeson.Types.ToJSON..= systemInfoRuntime'PythonVersion obj] : ["uname" Data.Aeson.Types.ToJSON..= systemInfoRuntime'Uname obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["architecture" Data.Aeson.Types.ToJSON..= systemInfoRuntime'Architecture obj] : ["authentik_version" Data.Aeson.Types.ToJSON..= systemInfoRuntime'AuthentikVersion obj] : ["environment" Data.Aeson.Types.ToJSON..= systemInfoRuntime'Environment obj] : ["openssl_fips_enabled" Data.Aeson.Types.ToJSON..= systemInfoRuntime'OpensslFipsEnabled obj] : ["openssl_version" Data.Aeson.Types.ToJSON..= systemInfoRuntime'OpensslVersion obj] : ["platform" Data.Aeson.Types.ToJSON..= systemInfoRuntime'Platform obj] : ["python_version" Data.Aeson.Types.ToJSON..= systemInfoRuntime'PythonVersion obj] : ["uname" Data.Aeson.Types.ToJSON..= systemInfoRuntime'Uname obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SystemInfoRuntime' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SystemInfoRuntime'" (\obj -> (((((((GHC.Base.pure SystemInfoRuntime' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "architecture")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "authentik_version")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "environment")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "openssl_fips_enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "openssl_version")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "platform")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "python_version")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "uname"))

-- | Create a new 'SystemInfoRuntime'' with all required fields.
mkSystemInfoRuntime' ::
  -- | 'systemInfoRuntime'Architecture'
  Data.Text.Internal.Text ->
  -- | 'systemInfoRuntime'AuthentikVersion'
  Data.Text.Internal.Text ->
  -- | 'systemInfoRuntime'Environment'
  Data.Text.Internal.Text ->
  -- | 'systemInfoRuntime'OpensslFipsEnabled'
  AuthentikAPI.Common.Nullable GHC.Types.Bool ->
  -- | 'systemInfoRuntime'OpensslVersion'
  Data.Text.Internal.Text ->
  -- | 'systemInfoRuntime'Platform'
  Data.Text.Internal.Text ->
  -- | 'systemInfoRuntime'PythonVersion'
  Data.Text.Internal.Text ->
  -- | 'systemInfoRuntime'Uname'
  Data.Text.Internal.Text ->
  SystemInfoRuntime'
mkSystemInfoRuntime' systemInfoRuntime'Architecture systemInfoRuntime'AuthentikVersion systemInfoRuntime'Environment systemInfoRuntime'OpensslFipsEnabled systemInfoRuntime'OpensslVersion systemInfoRuntime'Platform systemInfoRuntime'PythonVersion systemInfoRuntime'Uname =
  SystemInfoRuntime'
    { systemInfoRuntime'Architecture = systemInfoRuntime'Architecture,
      systemInfoRuntime'AuthentikVersion = systemInfoRuntime'AuthentikVersion,
      systemInfoRuntime'Environment = systemInfoRuntime'Environment,
      systemInfoRuntime'OpensslFipsEnabled = systemInfoRuntime'OpensslFipsEnabled,
      systemInfoRuntime'OpensslVersion = systemInfoRuntime'OpensslVersion,
      systemInfoRuntime'Platform = systemInfoRuntime'Platform,
      systemInfoRuntime'PythonVersion = systemInfoRuntime'PythonVersion,
      systemInfoRuntime'Uname = systemInfoRuntime'Uname
    }

{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PlexSourcePropertyMapping
module AuthentikAPI.Types.PlexSourcePropertyMapping where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.PlexSourcePropertyMapping@ in the specification.
--
-- PlexSourcePropertyMapping Serializer
data PlexSourcePropertyMapping = PlexSourcePropertyMapping
  { -- | component: Get object\'s component so that we know how to edit the object
    plexSourcePropertyMappingComponent :: Data.Text.Internal.Text,
    -- | expression
    plexSourcePropertyMappingExpression :: Data.Text.Internal.Text,
    -- | managed: Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
    plexSourcePropertyMappingManaged :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | meta_model_name: Return internal model name
    plexSourcePropertyMappingMetaModelName :: Data.Text.Internal.Text,
    -- | name
    plexSourcePropertyMappingName :: Data.Text.Internal.Text,
    -- | pk
    plexSourcePropertyMappingPk :: Data.Text.Internal.Text,
    -- | verbose_name: Return object\'s verbose_name
    plexSourcePropertyMappingVerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    plexSourcePropertyMappingVerboseNamePlural :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PlexSourcePropertyMapping where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["component" Data.Aeson.Types.ToJSON..= plexSourcePropertyMappingComponent obj] : ["expression" Data.Aeson.Types.ToJSON..= plexSourcePropertyMappingExpression obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("managed" Data.Aeson.Types.ToJSON..=)) (plexSourcePropertyMappingManaged obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= plexSourcePropertyMappingMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= plexSourcePropertyMappingName obj] : ["pk" Data.Aeson.Types.ToJSON..= plexSourcePropertyMappingPk obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= plexSourcePropertyMappingVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= plexSourcePropertyMappingVerboseNamePlural obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["component" Data.Aeson.Types.ToJSON..= plexSourcePropertyMappingComponent obj] : ["expression" Data.Aeson.Types.ToJSON..= plexSourcePropertyMappingExpression obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("managed" Data.Aeson.Types.ToJSON..=)) (plexSourcePropertyMappingManaged obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= plexSourcePropertyMappingMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= plexSourcePropertyMappingName obj] : ["pk" Data.Aeson.Types.ToJSON..= plexSourcePropertyMappingPk obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= plexSourcePropertyMappingVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= plexSourcePropertyMappingVerboseNamePlural obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PlexSourcePropertyMapping where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PlexSourcePropertyMapping" (\obj -> (((((((GHC.Base.pure PlexSourcePropertyMapping GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "expression")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "managed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural"))

-- | Create a new 'PlexSourcePropertyMapping' with all required fields.
mkPlexSourcePropertyMapping ::
  -- | 'plexSourcePropertyMappingComponent'
  Data.Text.Internal.Text ->
  -- | 'plexSourcePropertyMappingExpression'
  Data.Text.Internal.Text ->
  -- | 'plexSourcePropertyMappingMetaModelName'
  Data.Text.Internal.Text ->
  -- | 'plexSourcePropertyMappingName'
  Data.Text.Internal.Text ->
  -- | 'plexSourcePropertyMappingPk'
  Data.Text.Internal.Text ->
  -- | 'plexSourcePropertyMappingVerboseName'
  Data.Text.Internal.Text ->
  -- | 'plexSourcePropertyMappingVerboseNamePlural'
  Data.Text.Internal.Text ->
  PlexSourcePropertyMapping
mkPlexSourcePropertyMapping plexSourcePropertyMappingComponent plexSourcePropertyMappingExpression plexSourcePropertyMappingMetaModelName plexSourcePropertyMappingName plexSourcePropertyMappingPk plexSourcePropertyMappingVerboseName plexSourcePropertyMappingVerboseNamePlural =
  PlexSourcePropertyMapping
    { plexSourcePropertyMappingComponent = plexSourcePropertyMappingComponent,
      plexSourcePropertyMappingExpression = plexSourcePropertyMappingExpression,
      plexSourcePropertyMappingManaged = GHC.Maybe.Nothing,
      plexSourcePropertyMappingMetaModelName = plexSourcePropertyMappingMetaModelName,
      plexSourcePropertyMappingName = plexSourcePropertyMappingName,
      plexSourcePropertyMappingPk = plexSourcePropertyMappingPk,
      plexSourcePropertyMappingVerboseName = plexSourcePropertyMappingVerboseName,
      plexSourcePropertyMappingVerboseNamePlural = plexSourcePropertyMappingVerboseNamePlural
    }

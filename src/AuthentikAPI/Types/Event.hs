{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Event
module AuthentikAPI.Types.Event where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.EventActions
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.Event@ in the specification.
--
-- Event Serializer
data Event = Event
  { -- | action
    eventAction :: EventActions,
    -- | app
    eventApp :: Data.Text.Internal.Text,
    -- | brand
    eventBrand :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | client_ip
    eventClientIp :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | context
    eventContext :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | created
    eventCreated :: Data.Text.Internal.Text,
    -- | expires
    eventExpires :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | pk
    eventPk :: Data.Text.Internal.Text,
    -- | user
    eventUser :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Event where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["action" Data.Aeson.Types.ToJSON..= eventAction obj] : ["app" Data.Aeson.Types.ToJSON..= eventApp obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("brand" Data.Aeson.Types.ToJSON..=)) (eventBrand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("client_ip" Data.Aeson.Types.ToJSON..=)) (eventClientIp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("context" Data.Aeson.Types.ToJSON..=)) (eventContext obj) : ["created" Data.Aeson.Types.ToJSON..= eventCreated obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires" Data.Aeson.Types.ToJSON..=)) (eventExpires obj) : ["pk" Data.Aeson.Types.ToJSON..= eventPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user" Data.Aeson.Types.ToJSON..=)) (eventUser obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["action" Data.Aeson.Types.ToJSON..= eventAction obj] : ["app" Data.Aeson.Types.ToJSON..= eventApp obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("brand" Data.Aeson.Types.ToJSON..=)) (eventBrand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("client_ip" Data.Aeson.Types.ToJSON..=)) (eventClientIp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("context" Data.Aeson.Types.ToJSON..=)) (eventContext obj) : ["created" Data.Aeson.Types.ToJSON..= eventCreated obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires" Data.Aeson.Types.ToJSON..=)) (eventExpires obj) : ["pk" Data.Aeson.Types.ToJSON..= eventPk obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user" Data.Aeson.Types.ToJSON..=)) (eventUser obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Event where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Event" (\obj -> ((((((((GHC.Base.pure Event GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "action")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "app")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "brand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "client_ip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "context")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expires")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "user"))

-- | Create a new 'Event' with all required fields.
mkEvent ::
  -- | 'eventAction'
  EventActions ->
  -- | 'eventApp'
  Data.Text.Internal.Text ->
  -- | 'eventCreated'
  Data.Text.Internal.Text ->
  -- | 'eventPk'
  Data.Text.Internal.Text ->
  Event
mkEvent eventAction eventApp eventCreated eventPk =
  Event
    { eventAction = eventAction,
      eventApp = eventApp,
      eventBrand = GHC.Maybe.Nothing,
      eventClientIp = GHC.Maybe.Nothing,
      eventContext = GHC.Maybe.Nothing,
      eventCreated = eventCreated,
      eventExpires = GHC.Maybe.Nothing,
      eventPk = eventPk,
      eventUser = GHC.Maybe.Nothing
    }

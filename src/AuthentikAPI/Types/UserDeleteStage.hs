{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema UserDeleteStage
module AuthentikAPI.Types.UserDeleteStage where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.FlowSet
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.UserDeleteStage@ in the specification.
--
-- UserDeleteStage Serializer
data UserDeleteStage = UserDeleteStage
  { -- | component: Get object type so that we know how to edit the object
    userDeleteStageComponent :: Data.Text.Internal.Text,
    -- | flow_set
    userDeleteStageFlowSet :: (GHC.Maybe.Maybe [FlowSet]),
    -- | meta_model_name: Return internal model name
    userDeleteStageMetaModelName :: Data.Text.Internal.Text,
    -- | name
    userDeleteStageName :: Data.Text.Internal.Text,
    -- | pk
    userDeleteStagePk :: Data.Text.Internal.Text,
    -- | verbose_name: Return object\'s verbose_name
    userDeleteStageVerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    userDeleteStageVerboseNamePlural :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON UserDeleteStage where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["component" Data.Aeson.Types.ToJSON..= userDeleteStageComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_set" Data.Aeson.Types.ToJSON..=)) (userDeleteStageFlowSet obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= userDeleteStageMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= userDeleteStageName obj] : ["pk" Data.Aeson.Types.ToJSON..= userDeleteStagePk obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= userDeleteStageVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= userDeleteStageVerboseNamePlural obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["component" Data.Aeson.Types.ToJSON..= userDeleteStageComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_set" Data.Aeson.Types.ToJSON..=)) (userDeleteStageFlowSet obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= userDeleteStageMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= userDeleteStageName obj] : ["pk" Data.Aeson.Types.ToJSON..= userDeleteStagePk obj] : ["verbose_name" Data.Aeson.Types.ToJSON..= userDeleteStageVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= userDeleteStageVerboseNamePlural obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON UserDeleteStage where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "UserDeleteStage" (\obj -> ((((((GHC.Base.pure UserDeleteStage GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_set")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural"))

-- | Create a new 'UserDeleteStage' with all required fields.
mkUserDeleteStage ::
  -- | 'userDeleteStageComponent'
  Data.Text.Internal.Text ->
  -- | 'userDeleteStageMetaModelName'
  Data.Text.Internal.Text ->
  -- | 'userDeleteStageName'
  Data.Text.Internal.Text ->
  -- | 'userDeleteStagePk'
  Data.Text.Internal.Text ->
  -- | 'userDeleteStageVerboseName'
  Data.Text.Internal.Text ->
  -- | 'userDeleteStageVerboseNamePlural'
  Data.Text.Internal.Text ->
  UserDeleteStage
mkUserDeleteStage userDeleteStageComponent userDeleteStageMetaModelName userDeleteStageName userDeleteStagePk userDeleteStageVerboseName userDeleteStageVerboseNamePlural =
  UserDeleteStage
    { userDeleteStageComponent = userDeleteStageComponent,
      userDeleteStageFlowSet = GHC.Maybe.Nothing,
      userDeleteStageMetaModelName = userDeleteStageMetaModelName,
      userDeleteStageName = userDeleteStageName,
      userDeleteStagePk = userDeleteStagePk,
      userDeleteStageVerboseName = userDeleteStageVerboseName,
      userDeleteStageVerboseNamePlural = userDeleteStageVerboseNamePlural
    }

{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema ExpiringBaseGrantModel
module AuthentikAPI.Types.ExpiringBaseGrantModel where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.OAuth2Provider
import {-# SOURCE #-} AuthentikAPI.Types.User
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.ExpiringBaseGrantModel@ in the specification.
--
-- Serializer for BaseGrantModel and ExpiringBaseGrant
data ExpiringBaseGrantModel = ExpiringBaseGrantModel
  { -- | expires
    expiringBaseGrantModelExpires :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | is_expired: Check if token is expired yet.
    expiringBaseGrantModelIsExpired :: GHC.Types.Bool,
    -- | pk
    expiringBaseGrantModelPk :: GHC.Types.Int,
    -- | provider: OAuth2Provider Serializer
    expiringBaseGrantModelProvider :: OAuth2Provider,
    -- | scope
    expiringBaseGrantModelScope :: [Data.Text.Internal.Text],
    -- | user: User Serializer
    expiringBaseGrantModelUser :: User
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON ExpiringBaseGrantModel where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires" Data.Aeson.Types.ToJSON..=)) (expiringBaseGrantModelExpires obj) : ["is_expired" Data.Aeson.Types.ToJSON..= expiringBaseGrantModelIsExpired obj] : ["pk" Data.Aeson.Types.ToJSON..= expiringBaseGrantModelPk obj] : ["provider" Data.Aeson.Types.ToJSON..= expiringBaseGrantModelProvider obj] : ["scope" Data.Aeson.Types.ToJSON..= expiringBaseGrantModelScope obj] : ["user" Data.Aeson.Types.ToJSON..= expiringBaseGrantModelUser obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires" Data.Aeson.Types.ToJSON..=)) (expiringBaseGrantModelExpires obj) : ["is_expired" Data.Aeson.Types.ToJSON..= expiringBaseGrantModelIsExpired obj] : ["pk" Data.Aeson.Types.ToJSON..= expiringBaseGrantModelPk obj] : ["provider" Data.Aeson.Types.ToJSON..= expiringBaseGrantModelProvider obj] : ["scope" Data.Aeson.Types.ToJSON..= expiringBaseGrantModelScope obj] : ["user" Data.Aeson.Types.ToJSON..= expiringBaseGrantModelUser obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON ExpiringBaseGrantModel where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "ExpiringBaseGrantModel" (\obj -> (((((GHC.Base.pure ExpiringBaseGrantModel GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expires")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "is_expired")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "provider")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "scope")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "user"))

-- | Create a new 'ExpiringBaseGrantModel' with all required fields.
mkExpiringBaseGrantModel ::
  -- | 'expiringBaseGrantModelIsExpired'
  GHC.Types.Bool ->
  -- | 'expiringBaseGrantModelPk'
  GHC.Types.Int ->
  -- | 'expiringBaseGrantModelProvider'
  OAuth2Provider ->
  -- | 'expiringBaseGrantModelScope'
  [Data.Text.Internal.Text] ->
  -- | 'expiringBaseGrantModelUser'
  User ->
  ExpiringBaseGrantModel
mkExpiringBaseGrantModel expiringBaseGrantModelIsExpired expiringBaseGrantModelPk expiringBaseGrantModelProvider expiringBaseGrantModelScope expiringBaseGrantModelUser =
  ExpiringBaseGrantModel
    { expiringBaseGrantModelExpires = GHC.Maybe.Nothing,
      expiringBaseGrantModelIsExpired = expiringBaseGrantModelIsExpired,
      expiringBaseGrantModelPk = expiringBaseGrantModelPk,
      expiringBaseGrantModelProvider = expiringBaseGrantModelProvider,
      expiringBaseGrantModelScope = expiringBaseGrantModelScope,
      expiringBaseGrantModelUser = expiringBaseGrantModelUser
    }

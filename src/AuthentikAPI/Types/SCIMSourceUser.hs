{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema SCIMSourceUser
module AuthentikAPI.Types.SCIMSourceUser where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.GroupMember
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.SCIMSourceUser@ in the specification.
--
-- SCIMSourceUser Serializer
data SCIMSourceUser = SCIMSourceUser
  { -- | attributes
    sCIMSourceUserAttributes :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | id
    sCIMSourceUserId :: Data.Text.Internal.Text,
    -- | source
    sCIMSourceUserSource :: Data.Text.Internal.Text,
    -- | user
    sCIMSourceUserUser :: GHC.Types.Int,
    -- | user_obj
    sCIMSourceUserUserObj :: SCIMSourceUserUserObj'
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SCIMSourceUser where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (sCIMSourceUserAttributes obj) : ["id" Data.Aeson.Types.ToJSON..= sCIMSourceUserId obj] : ["source" Data.Aeson.Types.ToJSON..= sCIMSourceUserSource obj] : ["user" Data.Aeson.Types.ToJSON..= sCIMSourceUserUser obj] : ["user_obj" Data.Aeson.Types.ToJSON..= sCIMSourceUserUserObj obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (sCIMSourceUserAttributes obj) : ["id" Data.Aeson.Types.ToJSON..= sCIMSourceUserId obj] : ["source" Data.Aeson.Types.ToJSON..= sCIMSourceUserSource obj] : ["user" Data.Aeson.Types.ToJSON..= sCIMSourceUserUser obj] : ["user_obj" Data.Aeson.Types.ToJSON..= sCIMSourceUserUserObj obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SCIMSourceUser where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SCIMSourceUser" (\obj -> ((((GHC.Base.pure SCIMSourceUser GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "attributes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "source")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "user")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "user_obj"))

-- | Create a new 'SCIMSourceUser' with all required fields.
mkSCIMSourceUser ::
  -- | 'sCIMSourceUserId'
  Data.Text.Internal.Text ->
  -- | 'sCIMSourceUserSource'
  Data.Text.Internal.Text ->
  -- | 'sCIMSourceUserUser'
  GHC.Types.Int ->
  -- | 'sCIMSourceUserUserObj'
  SCIMSourceUserUserObj' ->
  SCIMSourceUser
mkSCIMSourceUser sCIMSourceUserId sCIMSourceUserSource sCIMSourceUserUser sCIMSourceUserUserObj =
  SCIMSourceUser
    { sCIMSourceUserAttributes = GHC.Maybe.Nothing,
      sCIMSourceUserId = sCIMSourceUserId,
      sCIMSourceUserSource = sCIMSourceUserSource,
      sCIMSourceUserUser = sCIMSourceUserUser,
      sCIMSourceUserUserObj = sCIMSourceUserUserObj
    }

-- | Defines the object schema located at @components.schemas.SCIMSourceUser.properties.user_obj.allOf@ in the specification.
data SCIMSourceUserUserObj' = SCIMSourceUserUserObj'
  { -- | attributes
    sCIMSourceUserUserObj'Attributes :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | email
    --
    -- Constraints:
    --
    -- * Maximum length of 254
    sCIMSourceUserUserObj'Email :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | is_active: Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
    sCIMSourceUserUserObj'IsActive :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | last_login
    sCIMSourceUserUserObj'LastLogin :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | name: User\'s display name.
    sCIMSourceUserUserObj'Name :: Data.Text.Internal.Text,
    -- | pk
    sCIMSourceUserUserObj'Pk :: GHC.Types.Int,
    -- | uid
    sCIMSourceUserUserObj'Uid :: Data.Text.Internal.Text,
    -- | username: Required. 150 characters or fewer. Letters, digits and \@\/.\/+\/-\/_ only.
    --
    -- Constraints:
    --
    -- * Maximum length of 150
    -- * Must match pattern \'^[\\w.\@+-]+\$\'
    sCIMSourceUserUserObj'Username :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SCIMSourceUserUserObj' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (sCIMSourceUserUserObj'Attributes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (sCIMSourceUserUserObj'Email obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_active" Data.Aeson.Types.ToJSON..=)) (sCIMSourceUserUserObj'IsActive obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_login" Data.Aeson.Types.ToJSON..=)) (sCIMSourceUserUserObj'LastLogin obj) : ["name" Data.Aeson.Types.ToJSON..= sCIMSourceUserUserObj'Name obj] : ["pk" Data.Aeson.Types.ToJSON..= sCIMSourceUserUserObj'Pk obj] : ["uid" Data.Aeson.Types.ToJSON..= sCIMSourceUserUserObj'Uid obj] : ["username" Data.Aeson.Types.ToJSON..= sCIMSourceUserUserObj'Username obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (sCIMSourceUserUserObj'Attributes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (sCIMSourceUserUserObj'Email obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_active" Data.Aeson.Types.ToJSON..=)) (sCIMSourceUserUserObj'IsActive obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_login" Data.Aeson.Types.ToJSON..=)) (sCIMSourceUserUserObj'LastLogin obj) : ["name" Data.Aeson.Types.ToJSON..= sCIMSourceUserUserObj'Name obj] : ["pk" Data.Aeson.Types.ToJSON..= sCIMSourceUserUserObj'Pk obj] : ["uid" Data.Aeson.Types.ToJSON..= sCIMSourceUserUserObj'Uid obj] : ["username" Data.Aeson.Types.ToJSON..= sCIMSourceUserUserObj'Username obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SCIMSourceUserUserObj' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SCIMSourceUserUserObj'" (\obj -> (((((((GHC.Base.pure SCIMSourceUserUserObj' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "attributes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "is_active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "last_login")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "uid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "username"))

-- | Create a new 'SCIMSourceUserUserObj'' with all required fields.
mkSCIMSourceUserUserObj' ::
  -- | 'sCIMSourceUserUserObj'Name'
  Data.Text.Internal.Text ->
  -- | 'sCIMSourceUserUserObj'Pk'
  GHC.Types.Int ->
  -- | 'sCIMSourceUserUserObj'Uid'
  Data.Text.Internal.Text ->
  -- | 'sCIMSourceUserUserObj'Username'
  Data.Text.Internal.Text ->
  SCIMSourceUserUserObj'
mkSCIMSourceUserUserObj' sCIMSourceUserUserObj'Name sCIMSourceUserUserObj'Pk sCIMSourceUserUserObj'Uid sCIMSourceUserUserObj'Username =
  SCIMSourceUserUserObj'
    { sCIMSourceUserUserObj'Attributes = GHC.Maybe.Nothing,
      sCIMSourceUserUserObj'Email = GHC.Maybe.Nothing,
      sCIMSourceUserUserObj'IsActive = GHC.Maybe.Nothing,
      sCIMSourceUserUserObj'LastLogin = GHC.Maybe.Nothing,
      sCIMSourceUserUserObj'Name = sCIMSourceUserUserObj'Name,
      sCIMSourceUserUserObj'Pk = sCIMSourceUserUserObj'Pk,
      sCIMSourceUserUserObj'Uid = sCIMSourceUserUserObj'Uid,
      sCIMSourceUserUserObj'Username = sCIMSourceUserUserObj'Username
    }

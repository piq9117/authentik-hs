{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema CaptchaStage
module AuthentikAPI.Types.CaptchaStage where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.FlowSet
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.CaptchaStage@ in the specification.
--
-- CaptchaStage Serializer
data CaptchaStage = CaptchaStage
  { -- | api_url
    captchaStageApiUrl :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | component: Get object type so that we know how to edit the object
    captchaStageComponent :: Data.Text.Internal.Text,
    -- | error_on_invalid_score: When enabled and the received captcha score is outside of the given threshold, the stage will show an error message. When not enabled, the flow will continue, but the data from the captcha will be available in the context for policy decisions
    captchaStageErrorOnInvalidScore :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | flow_set
    captchaStageFlowSet :: (GHC.Maybe.Maybe [FlowSet]),
    -- | interactive
    captchaStageInteractive :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | js_url
    captchaStageJsUrl :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | meta_model_name: Return internal model name
    captchaStageMetaModelName :: Data.Text.Internal.Text,
    -- | name
    captchaStageName :: Data.Text.Internal.Text,
    -- | pk
    captchaStagePk :: Data.Text.Internal.Text,
    -- | public_key: Public key, acquired your captcha Provider.
    captchaStagePublicKey :: Data.Text.Internal.Text,
    -- | score_max_threshold
    captchaStageScoreMaxThreshold :: (GHC.Maybe.Maybe GHC.Types.Double),
    -- | score_min_threshold
    captchaStageScoreMinThreshold :: (GHC.Maybe.Maybe GHC.Types.Double),
    -- | verbose_name: Return object\'s verbose_name
    captchaStageVerboseName :: Data.Text.Internal.Text,
    -- | verbose_name_plural: Return object\'s plural verbose_name
    captchaStageVerboseNamePlural :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON CaptchaStage where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("api_url" Data.Aeson.Types.ToJSON..=)) (captchaStageApiUrl obj) : ["component" Data.Aeson.Types.ToJSON..= captchaStageComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("error_on_invalid_score" Data.Aeson.Types.ToJSON..=)) (captchaStageErrorOnInvalidScore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_set" Data.Aeson.Types.ToJSON..=)) (captchaStageFlowSet obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("interactive" Data.Aeson.Types.ToJSON..=)) (captchaStageInteractive obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("js_url" Data.Aeson.Types.ToJSON..=)) (captchaStageJsUrl obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= captchaStageMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= captchaStageName obj] : ["pk" Data.Aeson.Types.ToJSON..= captchaStagePk obj] : ["public_key" Data.Aeson.Types.ToJSON..= captchaStagePublicKey obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("score_max_threshold" Data.Aeson.Types.ToJSON..=)) (captchaStageScoreMaxThreshold obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("score_min_threshold" Data.Aeson.Types.ToJSON..=)) (captchaStageScoreMinThreshold obj) : ["verbose_name" Data.Aeson.Types.ToJSON..= captchaStageVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= captchaStageVerboseNamePlural obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("api_url" Data.Aeson.Types.ToJSON..=)) (captchaStageApiUrl obj) : ["component" Data.Aeson.Types.ToJSON..= captchaStageComponent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("error_on_invalid_score" Data.Aeson.Types.ToJSON..=)) (captchaStageErrorOnInvalidScore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_set" Data.Aeson.Types.ToJSON..=)) (captchaStageFlowSet obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("interactive" Data.Aeson.Types.ToJSON..=)) (captchaStageInteractive obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("js_url" Data.Aeson.Types.ToJSON..=)) (captchaStageJsUrl obj) : ["meta_model_name" Data.Aeson.Types.ToJSON..= captchaStageMetaModelName obj] : ["name" Data.Aeson.Types.ToJSON..= captchaStageName obj] : ["pk" Data.Aeson.Types.ToJSON..= captchaStagePk obj] : ["public_key" Data.Aeson.Types.ToJSON..= captchaStagePublicKey obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("score_max_threshold" Data.Aeson.Types.ToJSON..=)) (captchaStageScoreMaxThreshold obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("score_min_threshold" Data.Aeson.Types.ToJSON..=)) (captchaStageScoreMinThreshold obj) : ["verbose_name" Data.Aeson.Types.ToJSON..= captchaStageVerboseName obj] : ["verbose_name_plural" Data.Aeson.Types.ToJSON..= captchaStageVerboseNamePlural obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON CaptchaStage where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "CaptchaStage" (\obj -> (((((((((((((GHC.Base.pure CaptchaStage GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "api_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "error_on_invalid_score")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_set")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "interactive")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "js_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "meta_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "public_key")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "score_max_threshold")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "score_min_threshold")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verbose_name_plural"))

-- | Create a new 'CaptchaStage' with all required fields.
mkCaptchaStage ::
  -- | 'captchaStageComponent'
  Data.Text.Internal.Text ->
  -- | 'captchaStageMetaModelName'
  Data.Text.Internal.Text ->
  -- | 'captchaStageName'
  Data.Text.Internal.Text ->
  -- | 'captchaStagePk'
  Data.Text.Internal.Text ->
  -- | 'captchaStagePublicKey'
  Data.Text.Internal.Text ->
  -- | 'captchaStageVerboseName'
  Data.Text.Internal.Text ->
  -- | 'captchaStageVerboseNamePlural'
  Data.Text.Internal.Text ->
  CaptchaStage
mkCaptchaStage captchaStageComponent captchaStageMetaModelName captchaStageName captchaStagePk captchaStagePublicKey captchaStageVerboseName captchaStageVerboseNamePlural =
  CaptchaStage
    { captchaStageApiUrl = GHC.Maybe.Nothing,
      captchaStageComponent = captchaStageComponent,
      captchaStageErrorOnInvalidScore = GHC.Maybe.Nothing,
      captchaStageFlowSet = GHC.Maybe.Nothing,
      captchaStageInteractive = GHC.Maybe.Nothing,
      captchaStageJsUrl = GHC.Maybe.Nothing,
      captchaStageMetaModelName = captchaStageMetaModelName,
      captchaStageName = captchaStageName,
      captchaStagePk = captchaStagePk,
      captchaStagePublicKey = captchaStagePublicKey,
      captchaStageScoreMaxThreshold = GHC.Maybe.Nothing,
      captchaStageScoreMinThreshold = GHC.Maybe.Nothing,
      captchaStageVerboseName = captchaStageVerboseName,
      captchaStageVerboseNamePlural = captchaStageVerboseNamePlural
    }

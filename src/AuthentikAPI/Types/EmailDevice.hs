{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema EmailDevice
module AuthentikAPI.Types.EmailDevice where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.GroupMember
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.EmailDevice@ in the specification.
--
-- Serializer for email authenticator devices
data EmailDevice = EmailDevice
  { -- | email
    emailDeviceEmail :: Data.Text.Internal.Text,
    -- | name: The human-readable name of this device.
    --
    -- Constraints:
    --
    -- * Maximum length of 64
    emailDeviceName :: Data.Text.Internal.Text,
    -- | pk
    emailDevicePk :: GHC.Types.Int,
    -- | user
    emailDeviceUser :: EmailDeviceUser'
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON EmailDevice where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["email" Data.Aeson.Types.ToJSON..= emailDeviceEmail obj] : ["name" Data.Aeson.Types.ToJSON..= emailDeviceName obj] : ["pk" Data.Aeson.Types.ToJSON..= emailDevicePk obj] : ["user" Data.Aeson.Types.ToJSON..= emailDeviceUser obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["email" Data.Aeson.Types.ToJSON..= emailDeviceEmail obj] : ["name" Data.Aeson.Types.ToJSON..= emailDeviceName obj] : ["pk" Data.Aeson.Types.ToJSON..= emailDevicePk obj] : ["user" Data.Aeson.Types.ToJSON..= emailDeviceUser obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON EmailDevice where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "EmailDevice" (\obj -> (((GHC.Base.pure EmailDevice GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "user"))

-- | Create a new 'EmailDevice' with all required fields.
mkEmailDevice ::
  -- | 'emailDeviceEmail'
  Data.Text.Internal.Text ->
  -- | 'emailDeviceName'
  Data.Text.Internal.Text ->
  -- | 'emailDevicePk'
  GHC.Types.Int ->
  -- | 'emailDeviceUser'
  EmailDeviceUser' ->
  EmailDevice
mkEmailDevice emailDeviceEmail emailDeviceName emailDevicePk emailDeviceUser =
  EmailDevice
    { emailDeviceEmail = emailDeviceEmail,
      emailDeviceName = emailDeviceName,
      emailDevicePk = emailDevicePk,
      emailDeviceUser = emailDeviceUser
    }

-- | Defines the object schema located at @components.schemas.EmailDevice.properties.user.allOf@ in the specification.
data EmailDeviceUser' = EmailDeviceUser'
  { -- | attributes
    emailDeviceUser'Attributes :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | email
    --
    -- Constraints:
    --
    -- * Maximum length of 254
    emailDeviceUser'Email :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | is_active: Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
    emailDeviceUser'IsActive :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | last_login
    emailDeviceUser'LastLogin :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | name: User\'s display name.
    emailDeviceUser'Name :: Data.Text.Internal.Text,
    -- | pk
    emailDeviceUser'Pk :: GHC.Types.Int,
    -- | uid
    emailDeviceUser'Uid :: Data.Text.Internal.Text,
    -- | username: Required. 150 characters or fewer. Letters, digits and \@\/.\/+\/-\/_ only.
    --
    -- Constraints:
    --
    -- * Maximum length of 150
    -- * Must match pattern \'^[\\w.\@+-]+\$\'
    emailDeviceUser'Username :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON EmailDeviceUser' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (emailDeviceUser'Attributes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (emailDeviceUser'Email obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_active" Data.Aeson.Types.ToJSON..=)) (emailDeviceUser'IsActive obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_login" Data.Aeson.Types.ToJSON..=)) (emailDeviceUser'LastLogin obj) : ["name" Data.Aeson.Types.ToJSON..= emailDeviceUser'Name obj] : ["pk" Data.Aeson.Types.ToJSON..= emailDeviceUser'Pk obj] : ["uid" Data.Aeson.Types.ToJSON..= emailDeviceUser'Uid obj] : ["username" Data.Aeson.Types.ToJSON..= emailDeviceUser'Username obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (emailDeviceUser'Attributes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (emailDeviceUser'Email obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_active" Data.Aeson.Types.ToJSON..=)) (emailDeviceUser'IsActive obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_login" Data.Aeson.Types.ToJSON..=)) (emailDeviceUser'LastLogin obj) : ["name" Data.Aeson.Types.ToJSON..= emailDeviceUser'Name obj] : ["pk" Data.Aeson.Types.ToJSON..= emailDeviceUser'Pk obj] : ["uid" Data.Aeson.Types.ToJSON..= emailDeviceUser'Uid obj] : ["username" Data.Aeson.Types.ToJSON..= emailDeviceUser'Username obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON EmailDeviceUser' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "EmailDeviceUser'" (\obj -> (((((((GHC.Base.pure EmailDeviceUser' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "attributes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "is_active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "last_login")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "uid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "username"))

-- | Create a new 'EmailDeviceUser'' with all required fields.
mkEmailDeviceUser' ::
  -- | 'emailDeviceUser'Name'
  Data.Text.Internal.Text ->
  -- | 'emailDeviceUser'Pk'
  GHC.Types.Int ->
  -- | 'emailDeviceUser'Uid'
  Data.Text.Internal.Text ->
  -- | 'emailDeviceUser'Username'
  Data.Text.Internal.Text ->
  EmailDeviceUser'
mkEmailDeviceUser' emailDeviceUser'Name emailDeviceUser'Pk emailDeviceUser'Uid emailDeviceUser'Username =
  EmailDeviceUser'
    { emailDeviceUser'Attributes = GHC.Maybe.Nothing,
      emailDeviceUser'Email = GHC.Maybe.Nothing,
      emailDeviceUser'IsActive = GHC.Maybe.Nothing,
      emailDeviceUser'LastLogin = GHC.Maybe.Nothing,
      emailDeviceUser'Name = emailDeviceUser'Name,
      emailDeviceUser'Pk = emailDeviceUser'Pk,
      emailDeviceUser'Uid = emailDeviceUser'Uid,
      emailDeviceUser'Username = emailDeviceUser'Username
    }

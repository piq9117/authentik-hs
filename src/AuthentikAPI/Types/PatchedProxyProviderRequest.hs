{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PatchedProxyProviderRequest
module AuthentikAPI.Types.PatchedProxyProviderRequest where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.PatchedProxyProviderRequest@ in the specification.
--
-- ProxyProvider Serializer
data PatchedProxyProviderRequest = PatchedProxyProviderRequest
  { -- | access_token_validity: Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedProxyProviderRequestAccessTokenValidity :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | authentication_flow: Flow used for authentication when the associated application is accessed by an un-authenticated user.
    patchedProxyProviderRequestAuthenticationFlow :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | authorization_flow: Flow used when authorizing this provider.
    patchedProxyProviderRequestAuthorizationFlow :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | basic_auth_enabled: Set a custom HTTP-Basic Authentication header based on values from authentik.
    patchedProxyProviderRequestBasicAuthEnabled :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | basic_auth_password_attribute: User\/Group Attribute used for the password part of the HTTP-Basic Header.
    patchedProxyProviderRequestBasicAuthPasswordAttribute :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | basic_auth_user_attribute: User\/Group Attribute used for the user part of the HTTP-Basic Header. If not set, the user\'s Email address is used.
    patchedProxyProviderRequestBasicAuthUserAttribute :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | certificate
    patchedProxyProviderRequestCertificate :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | cookie_domain
    patchedProxyProviderRequestCookieDomain :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | external_host
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedProxyProviderRequestExternalHost :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | intercept_header_auth: When enabled, this provider will intercept the authorization header and authenticate requests based on its value.
    patchedProxyProviderRequestInterceptHeaderAuth :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | internal_host
    patchedProxyProviderRequestInternalHost :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | internal_host_ssl_validation: Validate SSL Certificates of upstream servers
    patchedProxyProviderRequestInternalHostSslValidation :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | invalidation_flow: Flow used ending the session from a provider.
    patchedProxyProviderRequestInvalidationFlow :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | jwt_federation_providers
    patchedProxyProviderRequestJwtFederationProviders :: (GHC.Maybe.Maybe [GHC.Types.Int]),
    -- | jwt_federation_sources
    patchedProxyProviderRequestJwtFederationSources :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | mode: Enable support for forwardAuth in traefik and nginx auth_request. Exclusive with internal_host.
    patchedProxyProviderRequestMode :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | name
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedProxyProviderRequestName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | property_mappings
    patchedProxyProviderRequestPropertyMappings :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | refresh_token_validity: Tokens not valid on or after current time + this value (Format: hours=1;minutes=2;seconds=3).
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedProxyProviderRequestRefreshTokenValidity :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | skip_path_regex: Regular expressions for which authentication is not required. Each new line is interpreted as a new Regular Expression.
    patchedProxyProviderRequestSkipPathRegex :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PatchedProxyProviderRequest where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("access_token_validity" Data.Aeson.Types.ToJSON..=)) (patchedProxyProviderRequestAccessTokenValidity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication_flow" Data.Aeson.Types.ToJSON..=)) (patchedProxyProviderRequestAuthenticationFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authorization_flow" Data.Aeson.Types.ToJSON..=)) (patchedProxyProviderRequestAuthorizationFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("basic_auth_enabled" Data.Aeson.Types.ToJSON..=)) (patchedProxyProviderRequestBasicAuthEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("basic_auth_password_attribute" Data.Aeson.Types.ToJSON..=)) (patchedProxyProviderRequestBasicAuthPasswordAttribute obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("basic_auth_user_attribute" Data.Aeson.Types.ToJSON..=)) (patchedProxyProviderRequestBasicAuthUserAttribute obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("certificate" Data.Aeson.Types.ToJSON..=)) (patchedProxyProviderRequestCertificate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cookie_domain" Data.Aeson.Types.ToJSON..=)) (patchedProxyProviderRequestCookieDomain obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("external_host" Data.Aeson.Types.ToJSON..=)) (patchedProxyProviderRequestExternalHost obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("intercept_header_auth" Data.Aeson.Types.ToJSON..=)) (patchedProxyProviderRequestInterceptHeaderAuth obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("internal_host" Data.Aeson.Types.ToJSON..=)) (patchedProxyProviderRequestInternalHost obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("internal_host_ssl_validation" Data.Aeson.Types.ToJSON..=)) (patchedProxyProviderRequestInternalHostSslValidation obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("invalidation_flow" Data.Aeson.Types.ToJSON..=)) (patchedProxyProviderRequestInvalidationFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("jwt_federation_providers" Data.Aeson.Types.ToJSON..=)) (patchedProxyProviderRequestJwtFederationProviders obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("jwt_federation_sources" Data.Aeson.Types.ToJSON..=)) (patchedProxyProviderRequestJwtFederationSources obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mode" Data.Aeson.Types.ToJSON..=)) (patchedProxyProviderRequestMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (patchedProxyProviderRequestName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings" Data.Aeson.Types.ToJSON..=)) (patchedProxyProviderRequestPropertyMappings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("refresh_token_validity" Data.Aeson.Types.ToJSON..=)) (patchedProxyProviderRequestRefreshTokenValidity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("skip_path_regex" Data.Aeson.Types.ToJSON..=)) (patchedProxyProviderRequestSkipPathRegex obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("access_token_validity" Data.Aeson.Types.ToJSON..=)) (patchedProxyProviderRequestAccessTokenValidity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication_flow" Data.Aeson.Types.ToJSON..=)) (patchedProxyProviderRequestAuthenticationFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authorization_flow" Data.Aeson.Types.ToJSON..=)) (patchedProxyProviderRequestAuthorizationFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("basic_auth_enabled" Data.Aeson.Types.ToJSON..=)) (patchedProxyProviderRequestBasicAuthEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("basic_auth_password_attribute" Data.Aeson.Types.ToJSON..=)) (patchedProxyProviderRequestBasicAuthPasswordAttribute obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("basic_auth_user_attribute" Data.Aeson.Types.ToJSON..=)) (patchedProxyProviderRequestBasicAuthUserAttribute obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("certificate" Data.Aeson.Types.ToJSON..=)) (patchedProxyProviderRequestCertificate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cookie_domain" Data.Aeson.Types.ToJSON..=)) (patchedProxyProviderRequestCookieDomain obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("external_host" Data.Aeson.Types.ToJSON..=)) (patchedProxyProviderRequestExternalHost obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("intercept_header_auth" Data.Aeson.Types.ToJSON..=)) (patchedProxyProviderRequestInterceptHeaderAuth obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("internal_host" Data.Aeson.Types.ToJSON..=)) (patchedProxyProviderRequestInternalHost obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("internal_host_ssl_validation" Data.Aeson.Types.ToJSON..=)) (patchedProxyProviderRequestInternalHostSslValidation obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("invalidation_flow" Data.Aeson.Types.ToJSON..=)) (patchedProxyProviderRequestInvalidationFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("jwt_federation_providers" Data.Aeson.Types.ToJSON..=)) (patchedProxyProviderRequestJwtFederationProviders obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("jwt_federation_sources" Data.Aeson.Types.ToJSON..=)) (patchedProxyProviderRequestJwtFederationSources obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mode" Data.Aeson.Types.ToJSON..=)) (patchedProxyProviderRequestMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (patchedProxyProviderRequestName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings" Data.Aeson.Types.ToJSON..=)) (patchedProxyProviderRequestPropertyMappings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("refresh_token_validity" Data.Aeson.Types.ToJSON..=)) (patchedProxyProviderRequestRefreshTokenValidity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("skip_path_regex" Data.Aeson.Types.ToJSON..=)) (patchedProxyProviderRequestSkipPathRegex obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PatchedProxyProviderRequest where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchedProxyProviderRequest" (\obj -> (((((((((((((((((((GHC.Base.pure PatchedProxyProviderRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "access_token_validity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "authentication_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "authorization_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "basic_auth_enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "basic_auth_password_attribute")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "basic_auth_user_attribute")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "certificate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cookie_domain")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "external_host")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "intercept_header_auth")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "internal_host")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "internal_host_ssl_validation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "invalidation_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "jwt_federation_providers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "jwt_federation_sources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "property_mappings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "refresh_token_validity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "skip_path_regex"))

-- | Create a new 'PatchedProxyProviderRequest' with all required fields.
mkPatchedProxyProviderRequest :: PatchedProxyProviderRequest
mkPatchedProxyProviderRequest =
  PatchedProxyProviderRequest
    { patchedProxyProviderRequestAccessTokenValidity = GHC.Maybe.Nothing,
      patchedProxyProviderRequestAuthenticationFlow = GHC.Maybe.Nothing,
      patchedProxyProviderRequestAuthorizationFlow = GHC.Maybe.Nothing,
      patchedProxyProviderRequestBasicAuthEnabled = GHC.Maybe.Nothing,
      patchedProxyProviderRequestBasicAuthPasswordAttribute = GHC.Maybe.Nothing,
      patchedProxyProviderRequestBasicAuthUserAttribute = GHC.Maybe.Nothing,
      patchedProxyProviderRequestCertificate = GHC.Maybe.Nothing,
      patchedProxyProviderRequestCookieDomain = GHC.Maybe.Nothing,
      patchedProxyProviderRequestExternalHost = GHC.Maybe.Nothing,
      patchedProxyProviderRequestInterceptHeaderAuth = GHC.Maybe.Nothing,
      patchedProxyProviderRequestInternalHost = GHC.Maybe.Nothing,
      patchedProxyProviderRequestInternalHostSslValidation = GHC.Maybe.Nothing,
      patchedProxyProviderRequestInvalidationFlow = GHC.Maybe.Nothing,
      patchedProxyProviderRequestJwtFederationProviders = GHC.Maybe.Nothing,
      patchedProxyProviderRequestJwtFederationSources = GHC.Maybe.Nothing,
      patchedProxyProviderRequestMode = GHC.Maybe.Nothing,
      patchedProxyProviderRequestName = GHC.Maybe.Nothing,
      patchedProxyProviderRequestPropertyMappings = GHC.Maybe.Nothing,
      patchedProxyProviderRequestRefreshTokenValidity = GHC.Maybe.Nothing,
      patchedProxyProviderRequestSkipPathRegex = GHC.Maybe.Nothing
    }

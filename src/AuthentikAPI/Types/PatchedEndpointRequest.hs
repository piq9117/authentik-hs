{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PatchedEndpointRequest
module AuthentikAPI.Types.PatchedEndpointRequest where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.AuthModeEnum
import {-# SOURCE #-} AuthentikAPI.Types.ProtocolEnum
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.PatchedEndpointRequest@ in the specification.
--
-- Endpoint Serializer
data PatchedEndpointRequest = PatchedEndpointRequest
  { -- | auth_mode
    patchedEndpointRequestAuthMode :: (GHC.Maybe.Maybe AuthModeEnum),
    -- | host
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedEndpointRequestHost :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | maximum_connections
    --
    -- Constraints:
    --
    -- * Maxium  of 2.1474836e9
    -- * Minimum  of -2.1474836e9
    patchedEndpointRequestMaximumConnections :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | name
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedEndpointRequestName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | property_mappings
    patchedEndpointRequestPropertyMappings :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | protocol
    patchedEndpointRequestProtocol :: (GHC.Maybe.Maybe ProtocolEnum),
    -- | provider
    patchedEndpointRequestProvider :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | settings
    patchedEndpointRequestSettings :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PatchedEndpointRequest where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("auth_mode" Data.Aeson.Types.ToJSON..=)) (patchedEndpointRequestAuthMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("host" Data.Aeson.Types.ToJSON..=)) (patchedEndpointRequestHost obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("maximum_connections" Data.Aeson.Types.ToJSON..=)) (patchedEndpointRequestMaximumConnections obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (patchedEndpointRequestName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings" Data.Aeson.Types.ToJSON..=)) (patchedEndpointRequestPropertyMappings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("protocol" Data.Aeson.Types.ToJSON..=)) (patchedEndpointRequestProtocol obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("provider" Data.Aeson.Types.ToJSON..=)) (patchedEndpointRequestProvider obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("settings" Data.Aeson.Types.ToJSON..=)) (patchedEndpointRequestSettings obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("auth_mode" Data.Aeson.Types.ToJSON..=)) (patchedEndpointRequestAuthMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("host" Data.Aeson.Types.ToJSON..=)) (patchedEndpointRequestHost obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("maximum_connections" Data.Aeson.Types.ToJSON..=)) (patchedEndpointRequestMaximumConnections obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (patchedEndpointRequestName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings" Data.Aeson.Types.ToJSON..=)) (patchedEndpointRequestPropertyMappings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("protocol" Data.Aeson.Types.ToJSON..=)) (patchedEndpointRequestProtocol obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("provider" Data.Aeson.Types.ToJSON..=)) (patchedEndpointRequestProvider obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("settings" Data.Aeson.Types.ToJSON..=)) (patchedEndpointRequestSettings obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PatchedEndpointRequest where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchedEndpointRequest" (\obj -> (((((((GHC.Base.pure PatchedEndpointRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "auth_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "host")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "maximum_connections")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "property_mappings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "protocol")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "provider")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "settings"))

-- | Create a new 'PatchedEndpointRequest' with all required fields.
mkPatchedEndpointRequest :: PatchedEndpointRequest
mkPatchedEndpointRequest =
  PatchedEndpointRequest
    { patchedEndpointRequestAuthMode = GHC.Maybe.Nothing,
      patchedEndpointRequestHost = GHC.Maybe.Nothing,
      patchedEndpointRequestMaximumConnections = GHC.Maybe.Nothing,
      patchedEndpointRequestName = GHC.Maybe.Nothing,
      patchedEndpointRequestPropertyMappings = GHC.Maybe.Nothing,
      patchedEndpointRequestProtocol = GHC.Maybe.Nothing,
      patchedEndpointRequestProvider = GHC.Maybe.Nothing,
      patchedEndpointRequestSettings = GHC.Maybe.Nothing
    }

{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema SessionEndChallenge
module AuthentikAPI.Types.SessionEndChallenge where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.ContextualFlowInfo
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.SessionEndChallenge@ in the specification.
--
-- Challenge for ending a session
data SessionEndChallenge = SessionEndChallenge
  { -- | application_launch_url
    sessionEndChallengeApplicationLaunchUrl :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | application_name
    sessionEndChallengeApplicationName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | brand_name
    sessionEndChallengeBrandName :: Data.Text.Internal.Text,
    -- | component
    sessionEndChallengeComponent :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | flow_info: Contextual flow information for a challenge
    sessionEndChallengeFlowInfo :: (GHC.Maybe.Maybe ContextualFlowInfo),
    -- | invalidation_flow_url
    sessionEndChallengeInvalidationFlowUrl :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | pending_user
    sessionEndChallengePendingUser :: Data.Text.Internal.Text,
    -- | pending_user_avatar
    sessionEndChallengePendingUserAvatar :: Data.Text.Internal.Text,
    -- | response_errors
    sessionEndChallengeResponseErrors :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SessionEndChallenge where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("application_launch_url" Data.Aeson.Types.ToJSON..=)) (sessionEndChallengeApplicationLaunchUrl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("application_name" Data.Aeson.Types.ToJSON..=)) (sessionEndChallengeApplicationName obj) : ["brand_name" Data.Aeson.Types.ToJSON..= sessionEndChallengeBrandName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("component" Data.Aeson.Types.ToJSON..=)) (sessionEndChallengeComponent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_info" Data.Aeson.Types.ToJSON..=)) (sessionEndChallengeFlowInfo obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("invalidation_flow_url" Data.Aeson.Types.ToJSON..=)) (sessionEndChallengeInvalidationFlowUrl obj) : ["pending_user" Data.Aeson.Types.ToJSON..= sessionEndChallengePendingUser obj] : ["pending_user_avatar" Data.Aeson.Types.ToJSON..= sessionEndChallengePendingUserAvatar obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("response_errors" Data.Aeson.Types.ToJSON..=)) (sessionEndChallengeResponseErrors obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("application_launch_url" Data.Aeson.Types.ToJSON..=)) (sessionEndChallengeApplicationLaunchUrl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("application_name" Data.Aeson.Types.ToJSON..=)) (sessionEndChallengeApplicationName obj) : ["brand_name" Data.Aeson.Types.ToJSON..= sessionEndChallengeBrandName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("component" Data.Aeson.Types.ToJSON..=)) (sessionEndChallengeComponent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_info" Data.Aeson.Types.ToJSON..=)) (sessionEndChallengeFlowInfo obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("invalidation_flow_url" Data.Aeson.Types.ToJSON..=)) (sessionEndChallengeInvalidationFlowUrl obj) : ["pending_user" Data.Aeson.Types.ToJSON..= sessionEndChallengePendingUser obj] : ["pending_user_avatar" Data.Aeson.Types.ToJSON..= sessionEndChallengePendingUserAvatar obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("response_errors" Data.Aeson.Types.ToJSON..=)) (sessionEndChallengeResponseErrors obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SessionEndChallenge where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SessionEndChallenge" (\obj -> ((((((((GHC.Base.pure SessionEndChallenge GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "application_launch_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "application_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "brand_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_info")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "invalidation_flow_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pending_user")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pending_user_avatar")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "response_errors"))

-- | Create a new 'SessionEndChallenge' with all required fields.
mkSessionEndChallenge ::
  -- | 'sessionEndChallengeBrandName'
  Data.Text.Internal.Text ->
  -- | 'sessionEndChallengePendingUser'
  Data.Text.Internal.Text ->
  -- | 'sessionEndChallengePendingUserAvatar'
  Data.Text.Internal.Text ->
  SessionEndChallenge
mkSessionEndChallenge sessionEndChallengeBrandName sessionEndChallengePendingUser sessionEndChallengePendingUserAvatar =
  SessionEndChallenge
    { sessionEndChallengeApplicationLaunchUrl = GHC.Maybe.Nothing,
      sessionEndChallengeApplicationName = GHC.Maybe.Nothing,
      sessionEndChallengeBrandName = sessionEndChallengeBrandName,
      sessionEndChallengeComponent = GHC.Maybe.Nothing,
      sessionEndChallengeFlowInfo = GHC.Maybe.Nothing,
      sessionEndChallengeInvalidationFlowUrl = GHC.Maybe.Nothing,
      sessionEndChallengePendingUser = sessionEndChallengePendingUser,
      sessionEndChallengePendingUserAvatar = sessionEndChallengePendingUserAvatar,
      sessionEndChallengeResponseErrors = GHC.Maybe.Nothing
    }

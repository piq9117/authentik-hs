{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema UserLoginChallenge
module AuthentikAPI.Types.UserLoginChallenge where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.ContextualFlowInfo
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.UserLoginChallenge@ in the specification.
--
-- Empty challenge
data UserLoginChallenge = UserLoginChallenge
  { -- | component
    userLoginChallengeComponent :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | flow_info: Contextual flow information for a challenge
    userLoginChallengeFlowInfo :: (GHC.Maybe.Maybe ContextualFlowInfo),
    -- | pending_user
    userLoginChallengePendingUser :: Data.Text.Internal.Text,
    -- | pending_user_avatar
    userLoginChallengePendingUserAvatar :: Data.Text.Internal.Text,
    -- | response_errors
    userLoginChallengeResponseErrors :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON UserLoginChallenge where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("component" Data.Aeson.Types.ToJSON..=)) (userLoginChallengeComponent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_info" Data.Aeson.Types.ToJSON..=)) (userLoginChallengeFlowInfo obj) : ["pending_user" Data.Aeson.Types.ToJSON..= userLoginChallengePendingUser obj] : ["pending_user_avatar" Data.Aeson.Types.ToJSON..= userLoginChallengePendingUserAvatar obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("response_errors" Data.Aeson.Types.ToJSON..=)) (userLoginChallengeResponseErrors obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("component" Data.Aeson.Types.ToJSON..=)) (userLoginChallengeComponent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_info" Data.Aeson.Types.ToJSON..=)) (userLoginChallengeFlowInfo obj) : ["pending_user" Data.Aeson.Types.ToJSON..= userLoginChallengePendingUser obj] : ["pending_user_avatar" Data.Aeson.Types.ToJSON..= userLoginChallengePendingUserAvatar obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("response_errors" Data.Aeson.Types.ToJSON..=)) (userLoginChallengeResponseErrors obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON UserLoginChallenge where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "UserLoginChallenge" (\obj -> ((((GHC.Base.pure UserLoginChallenge GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_info")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pending_user")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pending_user_avatar")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "response_errors"))

-- | Create a new 'UserLoginChallenge' with all required fields.
mkUserLoginChallenge ::
  -- | 'userLoginChallengePendingUser'
  Data.Text.Internal.Text ->
  -- | 'userLoginChallengePendingUserAvatar'
  Data.Text.Internal.Text ->
  UserLoginChallenge
mkUserLoginChallenge userLoginChallengePendingUser userLoginChallengePendingUserAvatar =
  UserLoginChallenge
    { userLoginChallengeComponent = GHC.Maybe.Nothing,
      userLoginChallengeFlowInfo = GHC.Maybe.Nothing,
      userLoginChallengePendingUser = userLoginChallengePendingUser,
      userLoginChallengePendingUserAvatar = userLoginChallengePendingUserAvatar,
      userLoginChallengeResponseErrors = GHC.Maybe.Nothing
    }

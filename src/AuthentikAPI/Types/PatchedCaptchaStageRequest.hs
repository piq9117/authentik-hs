{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PatchedCaptchaStageRequest
module AuthentikAPI.Types.PatchedCaptchaStageRequest where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.FlowSetRequest
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.PatchedCaptchaStageRequest@ in the specification.
--
-- CaptchaStage Serializer
data PatchedCaptchaStageRequest = PatchedCaptchaStageRequest
  { -- | api_url
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedCaptchaStageRequestApiUrl :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | error_on_invalid_score: When enabled and the received captcha score is outside of the given threshold, the stage will show an error message. When not enabled, the flow will continue, but the data from the captcha will be available in the context for policy decisions
    patchedCaptchaStageRequestErrorOnInvalidScore :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | flow_set
    patchedCaptchaStageRequestFlowSet :: (GHC.Maybe.Maybe [FlowSetRequest]),
    -- | interactive
    patchedCaptchaStageRequestInteractive :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | js_url
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedCaptchaStageRequestJsUrl :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | name
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedCaptchaStageRequestName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | private_key: Private key, acquired your captcha Provider.
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedCaptchaStageRequestPrivateKey :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | public_key: Public key, acquired your captcha Provider.
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedCaptchaStageRequestPublicKey :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | score_max_threshold
    patchedCaptchaStageRequestScoreMaxThreshold :: (GHC.Maybe.Maybe GHC.Types.Double),
    -- | score_min_threshold
    patchedCaptchaStageRequestScoreMinThreshold :: (GHC.Maybe.Maybe GHC.Types.Double)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PatchedCaptchaStageRequest where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("api_url" Data.Aeson.Types.ToJSON..=)) (patchedCaptchaStageRequestApiUrl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("error_on_invalid_score" Data.Aeson.Types.ToJSON..=)) (patchedCaptchaStageRequestErrorOnInvalidScore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_set" Data.Aeson.Types.ToJSON..=)) (patchedCaptchaStageRequestFlowSet obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("interactive" Data.Aeson.Types.ToJSON..=)) (patchedCaptchaStageRequestInteractive obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("js_url" Data.Aeson.Types.ToJSON..=)) (patchedCaptchaStageRequestJsUrl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (patchedCaptchaStageRequestName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("private_key" Data.Aeson.Types.ToJSON..=)) (patchedCaptchaStageRequestPrivateKey obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("public_key" Data.Aeson.Types.ToJSON..=)) (patchedCaptchaStageRequestPublicKey obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("score_max_threshold" Data.Aeson.Types.ToJSON..=)) (patchedCaptchaStageRequestScoreMaxThreshold obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("score_min_threshold" Data.Aeson.Types.ToJSON..=)) (patchedCaptchaStageRequestScoreMinThreshold obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("api_url" Data.Aeson.Types.ToJSON..=)) (patchedCaptchaStageRequestApiUrl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("error_on_invalid_score" Data.Aeson.Types.ToJSON..=)) (patchedCaptchaStageRequestErrorOnInvalidScore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_set" Data.Aeson.Types.ToJSON..=)) (patchedCaptchaStageRequestFlowSet obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("interactive" Data.Aeson.Types.ToJSON..=)) (patchedCaptchaStageRequestInteractive obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("js_url" Data.Aeson.Types.ToJSON..=)) (patchedCaptchaStageRequestJsUrl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (patchedCaptchaStageRequestName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("private_key" Data.Aeson.Types.ToJSON..=)) (patchedCaptchaStageRequestPrivateKey obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("public_key" Data.Aeson.Types.ToJSON..=)) (patchedCaptchaStageRequestPublicKey obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("score_max_threshold" Data.Aeson.Types.ToJSON..=)) (patchedCaptchaStageRequestScoreMaxThreshold obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("score_min_threshold" Data.Aeson.Types.ToJSON..=)) (patchedCaptchaStageRequestScoreMinThreshold obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PatchedCaptchaStageRequest where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchedCaptchaStageRequest" (\obj -> (((((((((GHC.Base.pure PatchedCaptchaStageRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "api_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "error_on_invalid_score")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_set")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "interactive")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "js_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "private_key")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "public_key")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "score_max_threshold")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "score_min_threshold"))

-- | Create a new 'PatchedCaptchaStageRequest' with all required fields.
mkPatchedCaptchaStageRequest :: PatchedCaptchaStageRequest
mkPatchedCaptchaStageRequest =
  PatchedCaptchaStageRequest
    { patchedCaptchaStageRequestApiUrl = GHC.Maybe.Nothing,
      patchedCaptchaStageRequestErrorOnInvalidScore = GHC.Maybe.Nothing,
      patchedCaptchaStageRequestFlowSet = GHC.Maybe.Nothing,
      patchedCaptchaStageRequestInteractive = GHC.Maybe.Nothing,
      patchedCaptchaStageRequestJsUrl = GHC.Maybe.Nothing,
      patchedCaptchaStageRequestName = GHC.Maybe.Nothing,
      patchedCaptchaStageRequestPrivateKey = GHC.Maybe.Nothing,
      patchedCaptchaStageRequestPublicKey = GHC.Maybe.Nothing,
      patchedCaptchaStageRequestScoreMaxThreshold = GHC.Maybe.Nothing,
      patchedCaptchaStageRequestScoreMinThreshold = GHC.Maybe.Nothing
    }

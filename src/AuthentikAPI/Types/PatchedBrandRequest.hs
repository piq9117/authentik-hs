{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PatchedBrandRequest
module AuthentikAPI.Types.PatchedBrandRequest where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.PatchedBrandRequest@ in the specification.
--
-- Brand Serializer
data PatchedBrandRequest = PatchedBrandRequest
  { -- | attributes
    patchedBrandRequestAttributes :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | branding_custom_css
    patchedBrandRequestBrandingCustomCss :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | branding_default_flow_background
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedBrandRequestBrandingDefaultFlowBackground :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | branding_favicon
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedBrandRequestBrandingFavicon :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | branding_logo
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedBrandRequestBrandingLogo :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | branding_title
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedBrandRequestBrandingTitle :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | default
    patchedBrandRequestDefault :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | default_application: When set, external users will be redirected to this application after authenticating.
    patchedBrandRequestDefaultApplication :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | domain: Domain that activates this brand. Can be a superset, i.e. \`a.b\` for \`aa.b\` and \`ba.b\`
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedBrandRequestDomain :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | flow_authentication
    patchedBrandRequestFlowAuthentication :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | flow_device_code
    patchedBrandRequestFlowDeviceCode :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | flow_invalidation
    patchedBrandRequestFlowInvalidation :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | flow_recovery
    patchedBrandRequestFlowRecovery :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | flow_unenrollment
    patchedBrandRequestFlowUnenrollment :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | flow_user_settings
    patchedBrandRequestFlowUserSettings :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | web_certificate: Web Certificate used by the authentik Core webserver.
    patchedBrandRequestWebCertificate :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PatchedBrandRequest where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (patchedBrandRequestAttributes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("branding_custom_css" Data.Aeson.Types.ToJSON..=)) (patchedBrandRequestBrandingCustomCss obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("branding_default_flow_background" Data.Aeson.Types.ToJSON..=)) (patchedBrandRequestBrandingDefaultFlowBackground obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("branding_favicon" Data.Aeson.Types.ToJSON..=)) (patchedBrandRequestBrandingFavicon obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("branding_logo" Data.Aeson.Types.ToJSON..=)) (patchedBrandRequestBrandingLogo obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("branding_title" Data.Aeson.Types.ToJSON..=)) (patchedBrandRequestBrandingTitle obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("default" Data.Aeson.Types.ToJSON..=)) (patchedBrandRequestDefault obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("default_application" Data.Aeson.Types.ToJSON..=)) (patchedBrandRequestDefaultApplication obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("domain" Data.Aeson.Types.ToJSON..=)) (patchedBrandRequestDomain obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_authentication" Data.Aeson.Types.ToJSON..=)) (patchedBrandRequestFlowAuthentication obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_device_code" Data.Aeson.Types.ToJSON..=)) (patchedBrandRequestFlowDeviceCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_invalidation" Data.Aeson.Types.ToJSON..=)) (patchedBrandRequestFlowInvalidation obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_recovery" Data.Aeson.Types.ToJSON..=)) (patchedBrandRequestFlowRecovery obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_unenrollment" Data.Aeson.Types.ToJSON..=)) (patchedBrandRequestFlowUnenrollment obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_user_settings" Data.Aeson.Types.ToJSON..=)) (patchedBrandRequestFlowUserSettings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("web_certificate" Data.Aeson.Types.ToJSON..=)) (patchedBrandRequestWebCertificate obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (patchedBrandRequestAttributes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("branding_custom_css" Data.Aeson.Types.ToJSON..=)) (patchedBrandRequestBrandingCustomCss obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("branding_default_flow_background" Data.Aeson.Types.ToJSON..=)) (patchedBrandRequestBrandingDefaultFlowBackground obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("branding_favicon" Data.Aeson.Types.ToJSON..=)) (patchedBrandRequestBrandingFavicon obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("branding_logo" Data.Aeson.Types.ToJSON..=)) (patchedBrandRequestBrandingLogo obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("branding_title" Data.Aeson.Types.ToJSON..=)) (patchedBrandRequestBrandingTitle obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("default" Data.Aeson.Types.ToJSON..=)) (patchedBrandRequestDefault obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("default_application" Data.Aeson.Types.ToJSON..=)) (patchedBrandRequestDefaultApplication obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("domain" Data.Aeson.Types.ToJSON..=)) (patchedBrandRequestDomain obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_authentication" Data.Aeson.Types.ToJSON..=)) (patchedBrandRequestFlowAuthentication obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_device_code" Data.Aeson.Types.ToJSON..=)) (patchedBrandRequestFlowDeviceCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_invalidation" Data.Aeson.Types.ToJSON..=)) (patchedBrandRequestFlowInvalidation obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_recovery" Data.Aeson.Types.ToJSON..=)) (patchedBrandRequestFlowRecovery obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_unenrollment" Data.Aeson.Types.ToJSON..=)) (patchedBrandRequestFlowUnenrollment obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_user_settings" Data.Aeson.Types.ToJSON..=)) (patchedBrandRequestFlowUserSettings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("web_certificate" Data.Aeson.Types.ToJSON..=)) (patchedBrandRequestWebCertificate obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PatchedBrandRequest where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchedBrandRequest" (\obj -> (((((((((((((((GHC.Base.pure PatchedBrandRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "attributes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "branding_custom_css")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "branding_default_flow_background")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "branding_favicon")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "branding_logo")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "branding_title")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "default")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "default_application")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "domain")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_authentication")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_device_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_invalidation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_recovery")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_unenrollment")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_user_settings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "web_certificate"))

-- | Create a new 'PatchedBrandRequest' with all required fields.
mkPatchedBrandRequest :: PatchedBrandRequest
mkPatchedBrandRequest =
  PatchedBrandRequest
    { patchedBrandRequestAttributes = GHC.Maybe.Nothing,
      patchedBrandRequestBrandingCustomCss = GHC.Maybe.Nothing,
      patchedBrandRequestBrandingDefaultFlowBackground = GHC.Maybe.Nothing,
      patchedBrandRequestBrandingFavicon = GHC.Maybe.Nothing,
      patchedBrandRequestBrandingLogo = GHC.Maybe.Nothing,
      patchedBrandRequestBrandingTitle = GHC.Maybe.Nothing,
      patchedBrandRequestDefault = GHC.Maybe.Nothing,
      patchedBrandRequestDefaultApplication = GHC.Maybe.Nothing,
      patchedBrandRequestDomain = GHC.Maybe.Nothing,
      patchedBrandRequestFlowAuthentication = GHC.Maybe.Nothing,
      patchedBrandRequestFlowDeviceCode = GHC.Maybe.Nothing,
      patchedBrandRequestFlowInvalidation = GHC.Maybe.Nothing,
      patchedBrandRequestFlowRecovery = GHC.Maybe.Nothing,
      patchedBrandRequestFlowUnenrollment = GHC.Maybe.Nothing,
      patchedBrandRequestFlowUserSettings = GHC.Maybe.Nothing,
      patchedBrandRequestWebCertificate = GHC.Maybe.Nothing
    }

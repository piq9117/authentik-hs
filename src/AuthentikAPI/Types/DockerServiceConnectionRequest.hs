{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema DockerServiceConnectionRequest
module AuthentikAPI.Types.DockerServiceConnectionRequest where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.DockerServiceConnectionRequest@ in the specification.
--
-- DockerServiceConnection Serializer
data DockerServiceConnectionRequest = DockerServiceConnectionRequest
  { -- | local: If enabled, use the local connection. Required Docker socket\/Kubernetes Integration
    dockerServiceConnectionRequestLocal :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | name
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    dockerServiceConnectionRequestName :: Data.Text.Internal.Text,
    -- | tls_authentication: Certificate\/Key used for authentication. Can be left empty for no authentication.
    dockerServiceConnectionRequestTlsAuthentication :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | tls_verification: CA which the endpoint\'s Certificate is verified against. Can be left empty for no validation.
    dockerServiceConnectionRequestTlsVerification :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | url: Can be in the format of \'unix:\/\/\<path>\' when connecting to a local docker daemon, or \'https:\/\/\<hostname>:2376\' when connecting to a remote system.
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    dockerServiceConnectionRequestUrl :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DockerServiceConnectionRequest where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("local" Data.Aeson.Types.ToJSON..=)) (dockerServiceConnectionRequestLocal obj) : ["name" Data.Aeson.Types.ToJSON..= dockerServiceConnectionRequestName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tls_authentication" Data.Aeson.Types.ToJSON..=)) (dockerServiceConnectionRequestTlsAuthentication obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tls_verification" Data.Aeson.Types.ToJSON..=)) (dockerServiceConnectionRequestTlsVerification obj) : ["url" Data.Aeson.Types.ToJSON..= dockerServiceConnectionRequestUrl obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("local" Data.Aeson.Types.ToJSON..=)) (dockerServiceConnectionRequestLocal obj) : ["name" Data.Aeson.Types.ToJSON..= dockerServiceConnectionRequestName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tls_authentication" Data.Aeson.Types.ToJSON..=)) (dockerServiceConnectionRequestTlsAuthentication obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tls_verification" Data.Aeson.Types.ToJSON..=)) (dockerServiceConnectionRequestTlsVerification obj) : ["url" Data.Aeson.Types.ToJSON..= dockerServiceConnectionRequestUrl obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON DockerServiceConnectionRequest where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DockerServiceConnectionRequest" (\obj -> ((((GHC.Base.pure DockerServiceConnectionRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "local")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tls_authentication")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tls_verification")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Create a new 'DockerServiceConnectionRequest' with all required fields.
mkDockerServiceConnectionRequest ::
  -- | 'dockerServiceConnectionRequestName'
  Data.Text.Internal.Text ->
  -- | 'dockerServiceConnectionRequestUrl'
  Data.Text.Internal.Text ->
  DockerServiceConnectionRequest
mkDockerServiceConnectionRequest dockerServiceConnectionRequestName dockerServiceConnectionRequestUrl =
  DockerServiceConnectionRequest
    { dockerServiceConnectionRequestLocal = GHC.Maybe.Nothing,
      dockerServiceConnectionRequestName = dockerServiceConnectionRequestName,
      dockerServiceConnectionRequestTlsAuthentication = GHC.Maybe.Nothing,
      dockerServiceConnectionRequestTlsVerification = GHC.Maybe.Nothing,
      dockerServiceConnectionRequestUrl = dockerServiceConnectionRequestUrl
    }

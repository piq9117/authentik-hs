{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema TokenModel
module AuthentikAPI.Types.TokenModel where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.OAuth2Provider
import {-# SOURCE #-} AuthentikAPI.Types.User
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.TokenModel@ in the specification.
--
-- Serializer for BaseGrantModel and RefreshToken
data TokenModel = TokenModel
  { -- | expires
    tokenModelExpires :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | id_token: Get the token\'s id_token as JSON String
    tokenModelIdToken :: Data.Text.Internal.Text,
    -- | is_expired: Check if token is expired yet.
    tokenModelIsExpired :: GHC.Types.Bool,
    -- | pk
    tokenModelPk :: GHC.Types.Int,
    -- | provider: OAuth2Provider Serializer
    tokenModelProvider :: OAuth2Provider,
    -- | revoked
    tokenModelRevoked :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | scope
    tokenModelScope :: [Data.Text.Internal.Text],
    -- | user: User Serializer
    tokenModelUser :: User
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON TokenModel where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires" Data.Aeson.Types.ToJSON..=)) (tokenModelExpires obj) : ["id_token" Data.Aeson.Types.ToJSON..= tokenModelIdToken obj] : ["is_expired" Data.Aeson.Types.ToJSON..= tokenModelIsExpired obj] : ["pk" Data.Aeson.Types.ToJSON..= tokenModelPk obj] : ["provider" Data.Aeson.Types.ToJSON..= tokenModelProvider obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("revoked" Data.Aeson.Types.ToJSON..=)) (tokenModelRevoked obj) : ["scope" Data.Aeson.Types.ToJSON..= tokenModelScope obj] : ["user" Data.Aeson.Types.ToJSON..= tokenModelUser obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires" Data.Aeson.Types.ToJSON..=)) (tokenModelExpires obj) : ["id_token" Data.Aeson.Types.ToJSON..= tokenModelIdToken obj] : ["is_expired" Data.Aeson.Types.ToJSON..= tokenModelIsExpired obj] : ["pk" Data.Aeson.Types.ToJSON..= tokenModelPk obj] : ["provider" Data.Aeson.Types.ToJSON..= tokenModelProvider obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("revoked" Data.Aeson.Types.ToJSON..=)) (tokenModelRevoked obj) : ["scope" Data.Aeson.Types.ToJSON..= tokenModelScope obj] : ["user" Data.Aeson.Types.ToJSON..= tokenModelUser obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON TokenModel where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "TokenModel" (\obj -> (((((((GHC.Base.pure TokenModel GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expires")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id_token")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "is_expired")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "provider")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "revoked")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "scope")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "user"))

-- | Create a new 'TokenModel' with all required fields.
mkTokenModel ::
  -- | 'tokenModelIdToken'
  Data.Text.Internal.Text ->
  -- | 'tokenModelIsExpired'
  GHC.Types.Bool ->
  -- | 'tokenModelPk'
  GHC.Types.Int ->
  -- | 'tokenModelProvider'
  OAuth2Provider ->
  -- | 'tokenModelScope'
  [Data.Text.Internal.Text] ->
  -- | 'tokenModelUser'
  User ->
  TokenModel
mkTokenModel tokenModelIdToken tokenModelIsExpired tokenModelPk tokenModelProvider tokenModelScope tokenModelUser =
  TokenModel
    { tokenModelExpires = GHC.Maybe.Nothing,
      tokenModelIdToken = tokenModelIdToken,
      tokenModelIsExpired = tokenModelIsExpired,
      tokenModelPk = tokenModelPk,
      tokenModelProvider = tokenModelProvider,
      tokenModelRevoked = GHC.Maybe.Nothing,
      tokenModelScope = tokenModelScope,
      tokenModelUser = tokenModelUser
    }

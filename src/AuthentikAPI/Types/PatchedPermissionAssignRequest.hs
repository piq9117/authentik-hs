{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PatchedPermissionAssignRequest
module AuthentikAPI.Types.PatchedPermissionAssignRequest where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.ModelEnum
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.PatchedPermissionAssignRequest@ in the specification.
--
-- Request to assign a new permission
data PatchedPermissionAssignRequest = PatchedPermissionAssignRequest
  { -- | model
    patchedPermissionAssignRequestModel :: (GHC.Maybe.Maybe ModelEnum),
    -- | object_pk
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    patchedPermissionAssignRequestObjectPk :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | permissions
    patchedPermissionAssignRequestPermissions :: (GHC.Maybe.Maybe [Data.Text.Internal.Text])
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PatchedPermissionAssignRequest where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("model" Data.Aeson.Types.ToJSON..=)) (patchedPermissionAssignRequestModel obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object_pk" Data.Aeson.Types.ToJSON..=)) (patchedPermissionAssignRequestObjectPk obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("permissions" Data.Aeson.Types.ToJSON..=)) (patchedPermissionAssignRequestPermissions obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("model" Data.Aeson.Types.ToJSON..=)) (patchedPermissionAssignRequestModel obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object_pk" Data.Aeson.Types.ToJSON..=)) (patchedPermissionAssignRequestObjectPk obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("permissions" Data.Aeson.Types.ToJSON..=)) (patchedPermissionAssignRequestPermissions obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PatchedPermissionAssignRequest where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PatchedPermissionAssignRequest" (\obj -> ((GHC.Base.pure PatchedPermissionAssignRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "model")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "object_pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "permissions"))

-- | Create a new 'PatchedPermissionAssignRequest' with all required fields.
mkPatchedPermissionAssignRequest :: PatchedPermissionAssignRequest
mkPatchedPermissionAssignRequest =
  PatchedPermissionAssignRequest
    { patchedPermissionAssignRequestModel = GHC.Maybe.Nothing,
      patchedPermissionAssignRequestObjectPk = GHC.Maybe.Nothing,
      patchedPermissionAssignRequestPermissions = GHC.Maybe.Nothing
    }

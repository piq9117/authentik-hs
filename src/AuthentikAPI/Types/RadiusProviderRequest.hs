{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema RadiusProviderRequest
module AuthentikAPI.Types.RadiusProviderRequest where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.RadiusProviderRequest@ in the specification.
--
-- RadiusProvider Serializer
data RadiusProviderRequest = RadiusProviderRequest
  { -- | authentication_flow: Flow used for authentication when the associated application is accessed by an un-authenticated user.
    radiusProviderRequestAuthenticationFlow :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | authorization_flow: Flow used when authorizing this provider.
    radiusProviderRequestAuthorizationFlow :: Data.Text.Internal.Text,
    -- | client_networks: List of CIDRs (comma-separated) that clients can connect from. A more specific CIDR will match before a looser one. Clients connecting from a non-specified CIDR will be dropped.
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    radiusProviderRequestClientNetworks :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | invalidation_flow: Flow used ending the session from a provider.
    radiusProviderRequestInvalidationFlow :: Data.Text.Internal.Text,
    -- | mfa_support: When enabled, code-based multi-factor authentication can be used by appending a semicolon and the TOTP code to the password. This should only be enabled if all users that will bind to this provider have a TOTP device configured, as otherwise a password may incorrectly be rejected if it contains a semicolon.
    radiusProviderRequestMfaSupport :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | name
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    radiusProviderRequestName :: Data.Text.Internal.Text,
    -- | property_mappings
    radiusProviderRequestPropertyMappings :: (GHC.Maybe.Maybe [Data.Text.Internal.Text]),
    -- | shared_secret: Shared secret between clients and server to hash packets.
    --
    -- Constraints:
    --
    -- * Minimum length of 1
    radiusProviderRequestSharedSecret :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON RadiusProviderRequest where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication_flow" Data.Aeson.Types.ToJSON..=)) (radiusProviderRequestAuthenticationFlow obj) : ["authorization_flow" Data.Aeson.Types.ToJSON..= radiusProviderRequestAuthorizationFlow obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("client_networks" Data.Aeson.Types.ToJSON..=)) (radiusProviderRequestClientNetworks obj) : ["invalidation_flow" Data.Aeson.Types.ToJSON..= radiusProviderRequestInvalidationFlow obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mfa_support" Data.Aeson.Types.ToJSON..=)) (radiusProviderRequestMfaSupport obj) : ["name" Data.Aeson.Types.ToJSON..= radiusProviderRequestName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings" Data.Aeson.Types.ToJSON..=)) (radiusProviderRequestPropertyMappings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("shared_secret" Data.Aeson.Types.ToJSON..=)) (radiusProviderRequestSharedSecret obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication_flow" Data.Aeson.Types.ToJSON..=)) (radiusProviderRequestAuthenticationFlow obj) : ["authorization_flow" Data.Aeson.Types.ToJSON..= radiusProviderRequestAuthorizationFlow obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("client_networks" Data.Aeson.Types.ToJSON..=)) (radiusProviderRequestClientNetworks obj) : ["invalidation_flow" Data.Aeson.Types.ToJSON..= radiusProviderRequestInvalidationFlow obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mfa_support" Data.Aeson.Types.ToJSON..=)) (radiusProviderRequestMfaSupport obj) : ["name" Data.Aeson.Types.ToJSON..= radiusProviderRequestName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("property_mappings" Data.Aeson.Types.ToJSON..=)) (radiusProviderRequestPropertyMappings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("shared_secret" Data.Aeson.Types.ToJSON..=)) (radiusProviderRequestSharedSecret obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON RadiusProviderRequest where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "RadiusProviderRequest" (\obj -> (((((((GHC.Base.pure RadiusProviderRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "authentication_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "authorization_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "client_networks")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "invalidation_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mfa_support")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "property_mappings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "shared_secret"))

-- | Create a new 'RadiusProviderRequest' with all required fields.
mkRadiusProviderRequest ::
  -- | 'radiusProviderRequestAuthorizationFlow'
  Data.Text.Internal.Text ->
  -- | 'radiusProviderRequestInvalidationFlow'
  Data.Text.Internal.Text ->
  -- | 'radiusProviderRequestName'
  Data.Text.Internal.Text ->
  RadiusProviderRequest
mkRadiusProviderRequest radiusProviderRequestAuthorizationFlow radiusProviderRequestInvalidationFlow radiusProviderRequestName =
  RadiusProviderRequest
    { radiusProviderRequestAuthenticationFlow = GHC.Maybe.Nothing,
      radiusProviderRequestAuthorizationFlow = radiusProviderRequestAuthorizationFlow,
      radiusProviderRequestClientNetworks = GHC.Maybe.Nothing,
      radiusProviderRequestInvalidationFlow = radiusProviderRequestInvalidationFlow,
      radiusProviderRequestMfaSupport = GHC.Maybe.Nothing,
      radiusProviderRequestName = radiusProviderRequestName,
      radiusProviderRequestPropertyMappings = GHC.Maybe.Nothing,
      radiusProviderRequestSharedSecret = GHC.Maybe.Nothing
    }

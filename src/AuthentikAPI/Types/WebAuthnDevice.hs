{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema WebAuthnDevice
module AuthentikAPI.Types.WebAuthnDevice where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.GroupMember
import {-# SOURCE #-} AuthentikAPI.Types.WebAuthnDeviceType
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.WebAuthnDevice@ in the specification.
--
-- Serializer for WebAuthn authenticator devices
data WebAuthnDevice = WebAuthnDevice
  { -- | aaguid
    webAuthnDeviceAaguid :: Data.Text.Internal.Text,
    -- | created_on
    webAuthnDeviceCreatedOn :: Data.Text.Internal.Text,
    -- | device_type
    webAuthnDeviceDeviceType :: (AuthentikAPI.Common.Nullable WebAuthnDeviceDeviceType'NonNullable),
    -- | name
    --
    -- Constraints:
    --
    -- * Maximum length of 200
    webAuthnDeviceName :: Data.Text.Internal.Text,
    -- | pk
    webAuthnDevicePk :: GHC.Types.Int,
    -- | user
    webAuthnDeviceUser :: WebAuthnDeviceUser'
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON WebAuthnDevice where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["aaguid" Data.Aeson.Types.ToJSON..= webAuthnDeviceAaguid obj] : ["created_on" Data.Aeson.Types.ToJSON..= webAuthnDeviceCreatedOn obj] : ["device_type" Data.Aeson.Types.ToJSON..= webAuthnDeviceDeviceType obj] : ["name" Data.Aeson.Types.ToJSON..= webAuthnDeviceName obj] : ["pk" Data.Aeson.Types.ToJSON..= webAuthnDevicePk obj] : ["user" Data.Aeson.Types.ToJSON..= webAuthnDeviceUser obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["aaguid" Data.Aeson.Types.ToJSON..= webAuthnDeviceAaguid obj] : ["created_on" Data.Aeson.Types.ToJSON..= webAuthnDeviceCreatedOn obj] : ["device_type" Data.Aeson.Types.ToJSON..= webAuthnDeviceDeviceType obj] : ["name" Data.Aeson.Types.ToJSON..= webAuthnDeviceName obj] : ["pk" Data.Aeson.Types.ToJSON..= webAuthnDevicePk obj] : ["user" Data.Aeson.Types.ToJSON..= webAuthnDeviceUser obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON WebAuthnDevice where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "WebAuthnDevice" (\obj -> (((((GHC.Base.pure WebAuthnDevice GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "aaguid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created_on")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "device_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "user"))

-- | Create a new 'WebAuthnDevice' with all required fields.
mkWebAuthnDevice ::
  -- | 'webAuthnDeviceAaguid'
  Data.Text.Internal.Text ->
  -- | 'webAuthnDeviceCreatedOn'
  Data.Text.Internal.Text ->
  -- | 'webAuthnDeviceDeviceType'
  AuthentikAPI.Common.Nullable WebAuthnDeviceDeviceType'NonNullable ->
  -- | 'webAuthnDeviceName'
  Data.Text.Internal.Text ->
  -- | 'webAuthnDevicePk'
  GHC.Types.Int ->
  -- | 'webAuthnDeviceUser'
  WebAuthnDeviceUser' ->
  WebAuthnDevice
mkWebAuthnDevice webAuthnDeviceAaguid webAuthnDeviceCreatedOn webAuthnDeviceDeviceType webAuthnDeviceName webAuthnDevicePk webAuthnDeviceUser =
  WebAuthnDevice
    { webAuthnDeviceAaguid = webAuthnDeviceAaguid,
      webAuthnDeviceCreatedOn = webAuthnDeviceCreatedOn,
      webAuthnDeviceDeviceType = webAuthnDeviceDeviceType,
      webAuthnDeviceName = webAuthnDeviceName,
      webAuthnDevicePk = webAuthnDevicePk,
      webAuthnDeviceUser = webAuthnDeviceUser
    }

-- | Defines the object schema located at @components.schemas.WebAuthnDevice.properties.device_type.allOf@ in the specification.
data WebAuthnDeviceDeviceType'NonNullable = WebAuthnDeviceDeviceType'NonNullable
  { -- | aaguid
    webAuthnDeviceDeviceType'NonNullableAaguid :: Data.Text.Internal.Text,
    -- | description
    webAuthnDeviceDeviceType'NonNullableDescription :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON WebAuthnDeviceDeviceType'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["aaguid" Data.Aeson.Types.ToJSON..= webAuthnDeviceDeviceType'NonNullableAaguid obj] : ["description" Data.Aeson.Types.ToJSON..= webAuthnDeviceDeviceType'NonNullableDescription obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["aaguid" Data.Aeson.Types.ToJSON..= webAuthnDeviceDeviceType'NonNullableAaguid obj] : ["description" Data.Aeson.Types.ToJSON..= webAuthnDeviceDeviceType'NonNullableDescription obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON WebAuthnDeviceDeviceType'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "WebAuthnDeviceDeviceType'NonNullable" (\obj -> (GHC.Base.pure WebAuthnDeviceDeviceType'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "aaguid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "description"))

-- | Create a new 'WebAuthnDeviceDeviceType'NonNullable' with all required fields.
mkWebAuthnDeviceDeviceType'NonNullable ::
  -- | 'webAuthnDeviceDeviceType'NonNullableAaguid'
  Data.Text.Internal.Text ->
  -- | 'webAuthnDeviceDeviceType'NonNullableDescription'
  Data.Text.Internal.Text ->
  WebAuthnDeviceDeviceType'NonNullable
mkWebAuthnDeviceDeviceType'NonNullable webAuthnDeviceDeviceType'NonNullableAaguid webAuthnDeviceDeviceType'NonNullableDescription =
  WebAuthnDeviceDeviceType'NonNullable
    { webAuthnDeviceDeviceType'NonNullableAaguid = webAuthnDeviceDeviceType'NonNullableAaguid,
      webAuthnDeviceDeviceType'NonNullableDescription = webAuthnDeviceDeviceType'NonNullableDescription
    }

-- | Defines the object schema located at @components.schemas.WebAuthnDevice.properties.user.allOf@ in the specification.
data WebAuthnDeviceUser' = WebAuthnDeviceUser'
  { -- | attributes
    webAuthnDeviceUser'Attributes :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | email
    --
    -- Constraints:
    --
    -- * Maximum length of 254
    webAuthnDeviceUser'Email :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | is_active: Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
    webAuthnDeviceUser'IsActive :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | last_login
    webAuthnDeviceUser'LastLogin :: (GHC.Maybe.Maybe (AuthentikAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | name: User\'s display name.
    webAuthnDeviceUser'Name :: Data.Text.Internal.Text,
    -- | pk
    webAuthnDeviceUser'Pk :: GHC.Types.Int,
    -- | uid
    webAuthnDeviceUser'Uid :: Data.Text.Internal.Text,
    -- | username: Required. 150 characters or fewer. Letters, digits and \@\/.\/+\/-\/_ only.
    --
    -- Constraints:
    --
    -- * Maximum length of 150
    -- * Must match pattern \'^[\\w.\@+-]+\$\'
    webAuthnDeviceUser'Username :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON WebAuthnDeviceUser' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (webAuthnDeviceUser'Attributes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (webAuthnDeviceUser'Email obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_active" Data.Aeson.Types.ToJSON..=)) (webAuthnDeviceUser'IsActive obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_login" Data.Aeson.Types.ToJSON..=)) (webAuthnDeviceUser'LastLogin obj) : ["name" Data.Aeson.Types.ToJSON..= webAuthnDeviceUser'Name obj] : ["pk" Data.Aeson.Types.ToJSON..= webAuthnDeviceUser'Pk obj] : ["uid" Data.Aeson.Types.ToJSON..= webAuthnDeviceUser'Uid obj] : ["username" Data.Aeson.Types.ToJSON..= webAuthnDeviceUser'Username obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (webAuthnDeviceUser'Attributes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (webAuthnDeviceUser'Email obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_active" Data.Aeson.Types.ToJSON..=)) (webAuthnDeviceUser'IsActive obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_login" Data.Aeson.Types.ToJSON..=)) (webAuthnDeviceUser'LastLogin obj) : ["name" Data.Aeson.Types.ToJSON..= webAuthnDeviceUser'Name obj] : ["pk" Data.Aeson.Types.ToJSON..= webAuthnDeviceUser'Pk obj] : ["uid" Data.Aeson.Types.ToJSON..= webAuthnDeviceUser'Uid obj] : ["username" Data.Aeson.Types.ToJSON..= webAuthnDeviceUser'Username obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON WebAuthnDeviceUser' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "WebAuthnDeviceUser'" (\obj -> (((((((GHC.Base.pure WebAuthnDeviceUser' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "attributes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "is_active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "last_login")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "uid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "username"))

-- | Create a new 'WebAuthnDeviceUser'' with all required fields.
mkWebAuthnDeviceUser' ::
  -- | 'webAuthnDeviceUser'Name'
  Data.Text.Internal.Text ->
  -- | 'webAuthnDeviceUser'Pk'
  GHC.Types.Int ->
  -- | 'webAuthnDeviceUser'Uid'
  Data.Text.Internal.Text ->
  -- | 'webAuthnDeviceUser'Username'
  Data.Text.Internal.Text ->
  WebAuthnDeviceUser'
mkWebAuthnDeviceUser' webAuthnDeviceUser'Name webAuthnDeviceUser'Pk webAuthnDeviceUser'Uid webAuthnDeviceUser'Username =
  WebAuthnDeviceUser'
    { webAuthnDeviceUser'Attributes = GHC.Maybe.Nothing,
      webAuthnDeviceUser'Email = GHC.Maybe.Nothing,
      webAuthnDeviceUser'IsActive = GHC.Maybe.Nothing,
      webAuthnDeviceUser'LastLogin = GHC.Maybe.Nothing,
      webAuthnDeviceUser'Name = webAuthnDeviceUser'Name,
      webAuthnDeviceUser'Pk = webAuthnDeviceUser'Pk,
      webAuthnDeviceUser'Uid = webAuthnDeviceUser'Uid,
      webAuthnDeviceUser'Username = webAuthnDeviceUser'Username
    }

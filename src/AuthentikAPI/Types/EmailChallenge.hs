{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema EmailChallenge
module AuthentikAPI.Types.EmailChallenge where

import qualified AuthentikAPI.Common
import AuthentikAPI.TypeAlias
import {-# SOURCE #-} AuthentikAPI.Types.ContextualFlowInfo
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.EmailChallenge@ in the specification.
--
-- Email challenge
data EmailChallenge = EmailChallenge
  { -- | component
    emailChallengeComponent :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | flow_info: Contextual flow information for a challenge
    emailChallengeFlowInfo :: (GHC.Maybe.Maybe ContextualFlowInfo),
    -- | response_errors
    emailChallengeResponseErrors :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON EmailChallenge where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("component" Data.Aeson.Types.ToJSON..=)) (emailChallengeComponent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_info" Data.Aeson.Types.ToJSON..=)) (emailChallengeFlowInfo obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("response_errors" Data.Aeson.Types.ToJSON..=)) (emailChallengeResponseErrors obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("component" Data.Aeson.Types.ToJSON..=)) (emailChallengeComponent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_info" Data.Aeson.Types.ToJSON..=)) (emailChallengeFlowInfo obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("response_errors" Data.Aeson.Types.ToJSON..=)) (emailChallengeResponseErrors obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON EmailChallenge where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "EmailChallenge" (\obj -> ((GHC.Base.pure EmailChallenge GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "component")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_info")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "response_errors"))

-- | Create a new 'EmailChallenge' with all required fields.
mkEmailChallenge :: EmailChallenge
mkEmailChallenge =
  EmailChallenge
    { emailChallengeComponent = GHC.Maybe.Nothing,
      emailChallengeFlowInfo = GHC.Maybe.Nothing,
      emailChallengeResponseErrors = GHC.Maybe.Nothing
    }

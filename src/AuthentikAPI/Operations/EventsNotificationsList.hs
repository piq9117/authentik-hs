{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation eventsNotificationsList
module AuthentikAPI.Operations.EventsNotificationsList where

import qualified AuthentikAPI.Common
import AuthentikAPI.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /events/notifications/
--
-- Notification Viewset
eventsNotificationsList ::
  forall m.
  (AuthentikAPI.Common.MonadHTTP m) =>
  -- | Contains all available parameters of this operation (query and path parameters)
  EventsNotificationsListParameters ->
  -- | Monadic computation which returns the result of the operation
  AuthentikAPI.Common.ClientT m (Network.HTTP.Client.Types.Response EventsNotificationsListResponse)
eventsNotificationsList parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either EventsNotificationsListResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                               | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   EventsNotificationsListResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            PaginatedNotificationList
                                                      )
                               | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   EventsNotificationsListResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            ValidationError
                                                      )
                               | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) ->
                                   EventsNotificationsListResponse403
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GenericError
                                                      )
                               | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( AuthentikAPI.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "GET")
        "/events/notifications/"
        [ AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "body") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> eventsNotificationsListParametersQueryBody parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "created") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> eventsNotificationsListParametersQueryCreated parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "event") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> eventsNotificationsListParametersQueryEvent parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "ordering") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> eventsNotificationsListParametersQueryOrdering parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> eventsNotificationsListParametersQueryPage parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "page_size") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> eventsNotificationsListParametersQueryPageSize parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "search") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> eventsNotificationsListParametersQuerySearch parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "seen") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> eventsNotificationsListParametersQuerySeen parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "severity") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> eventsNotificationsListParametersQuerySeverity parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "user") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> eventsNotificationsListParametersQueryUser parameters) (Data.Text.Internal.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/events\/notifications\/.GET.parameters@ in the specification.
data EventsNotificationsListParameters = EventsNotificationsListParameters
  { -- | queryBody: Represents the parameter named \'body\'
    eventsNotificationsListParametersQueryBody :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryCreated: Represents the parameter named \'created\'
    eventsNotificationsListParametersQueryCreated :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryEvent: Represents the parameter named \'event\'
    eventsNotificationsListParametersQueryEvent :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryOrdering: Represents the parameter named \'ordering\'
    --
    -- Which field to use when ordering the results.
    eventsNotificationsListParametersQueryOrdering :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryPage: Represents the parameter named \'page\'
    --
    -- A page number within the paginated result set.
    eventsNotificationsListParametersQueryPage :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | queryPage_size: Represents the parameter named \'page_size\'
    --
    -- Number of results to return per page.
    eventsNotificationsListParametersQueryPageSize :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | querySearch: Represents the parameter named \'search\'
    --
    -- A search term.
    eventsNotificationsListParametersQuerySearch :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | querySeen: Represents the parameter named \'seen\'
    eventsNotificationsListParametersQuerySeen :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | querySeverity: Represents the parameter named \'severity\'
    eventsNotificationsListParametersQuerySeverity :: (GHC.Maybe.Maybe EventsNotificationsListParametersQuerySeverity'),
    -- | queryUser: Represents the parameter named \'user\'
    eventsNotificationsListParametersQueryUser :: (GHC.Maybe.Maybe GHC.Types.Int)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON EventsNotificationsListParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryBody" Data.Aeson.Types.ToJSON..=)) (eventsNotificationsListParametersQueryBody obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryCreated" Data.Aeson.Types.ToJSON..=)) (eventsNotificationsListParametersQueryCreated obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEvent" Data.Aeson.Types.ToJSON..=)) (eventsNotificationsListParametersQueryEvent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryOrdering" Data.Aeson.Types.ToJSON..=)) (eventsNotificationsListParametersQueryOrdering obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage" Data.Aeson.Types.ToJSON..=)) (eventsNotificationsListParametersQueryPage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage_size" Data.Aeson.Types.ToJSON..=)) (eventsNotificationsListParametersQueryPageSize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySearch" Data.Aeson.Types.ToJSON..=)) (eventsNotificationsListParametersQuerySearch obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySeen" Data.Aeson.Types.ToJSON..=)) (eventsNotificationsListParametersQuerySeen obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySeverity" Data.Aeson.Types.ToJSON..=)) (eventsNotificationsListParametersQuerySeverity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryUser" Data.Aeson.Types.ToJSON..=)) (eventsNotificationsListParametersQueryUser obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryBody" Data.Aeson.Types.ToJSON..=)) (eventsNotificationsListParametersQueryBody obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryCreated" Data.Aeson.Types.ToJSON..=)) (eventsNotificationsListParametersQueryCreated obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEvent" Data.Aeson.Types.ToJSON..=)) (eventsNotificationsListParametersQueryEvent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryOrdering" Data.Aeson.Types.ToJSON..=)) (eventsNotificationsListParametersQueryOrdering obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage" Data.Aeson.Types.ToJSON..=)) (eventsNotificationsListParametersQueryPage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage_size" Data.Aeson.Types.ToJSON..=)) (eventsNotificationsListParametersQueryPageSize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySearch" Data.Aeson.Types.ToJSON..=)) (eventsNotificationsListParametersQuerySearch obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySeen" Data.Aeson.Types.ToJSON..=)) (eventsNotificationsListParametersQuerySeen obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySeverity" Data.Aeson.Types.ToJSON..=)) (eventsNotificationsListParametersQuerySeverity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryUser" Data.Aeson.Types.ToJSON..=)) (eventsNotificationsListParametersQueryUser obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON EventsNotificationsListParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "EventsNotificationsListParameters" (\obj -> (((((((((GHC.Base.pure EventsNotificationsListParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryBody")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryCreated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEvent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryOrdering")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPage_size")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "querySearch")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "querySeen")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "querySeverity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryUser"))

-- | Create a new 'EventsNotificationsListParameters' with all required fields.
mkEventsNotificationsListParameters :: EventsNotificationsListParameters
mkEventsNotificationsListParameters =
  EventsNotificationsListParameters
    { eventsNotificationsListParametersQueryBody = GHC.Maybe.Nothing,
      eventsNotificationsListParametersQueryCreated = GHC.Maybe.Nothing,
      eventsNotificationsListParametersQueryEvent = GHC.Maybe.Nothing,
      eventsNotificationsListParametersQueryOrdering = GHC.Maybe.Nothing,
      eventsNotificationsListParametersQueryPage = GHC.Maybe.Nothing,
      eventsNotificationsListParametersQueryPageSize = GHC.Maybe.Nothing,
      eventsNotificationsListParametersQuerySearch = GHC.Maybe.Nothing,
      eventsNotificationsListParametersQuerySeen = GHC.Maybe.Nothing,
      eventsNotificationsListParametersQuerySeverity = GHC.Maybe.Nothing,
      eventsNotificationsListParametersQueryUser = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @paths.\/events\/notifications\/.GET.parameters.properties.querySeverity@ in the specification.
--
-- Represents the parameter named \'severity\'
data EventsNotificationsListParametersQuerySeverity'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    EventsNotificationsListParametersQuerySeverity'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    EventsNotificationsListParametersQuerySeverity'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"alert"@
    EventsNotificationsListParametersQuerySeverity'EnumAlert
  | -- | Represents the JSON value @"notice"@
    EventsNotificationsListParametersQuerySeverity'EnumNotice
  | -- | Represents the JSON value @"warning"@
    EventsNotificationsListParametersQuerySeverity'EnumWarning
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON EventsNotificationsListParametersQuerySeverity' where
  toJSON (EventsNotificationsListParametersQuerySeverity'Other val) = val
  toJSON (EventsNotificationsListParametersQuerySeverity'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (EventsNotificationsListParametersQuerySeverity'EnumAlert) = "alert"
  toJSON (EventsNotificationsListParametersQuerySeverity'EnumNotice) = "notice"
  toJSON (EventsNotificationsListParametersQuerySeverity'EnumWarning) = "warning"

instance Data.Aeson.Types.FromJSON.FromJSON EventsNotificationsListParametersQuerySeverity' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "alert" -> EventsNotificationsListParametersQuerySeverity'EnumAlert
          | val GHC.Classes.== "notice" -> EventsNotificationsListParametersQuerySeverity'EnumNotice
          | val GHC.Classes.== "warning" -> EventsNotificationsListParametersQuerySeverity'EnumWarning
          | GHC.Base.otherwise -> EventsNotificationsListParametersQuerySeverity'Other val
      )

-- | Represents a response of the operation 'eventsNotificationsList'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'EventsNotificationsListResponseError' is used.
data EventsNotificationsListResponse
  = -- | Means either no matching case available or a parse error
    EventsNotificationsListResponseError GHC.Base.String
  | EventsNotificationsListResponse200 PaginatedNotificationList
  | EventsNotificationsListResponse400 ValidationError
  | EventsNotificationsListResponse403 GenericError
  deriving (GHC.Show.Show, GHC.Classes.Eq)

{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation outpostsRadiusAccessCheck
module AuthentikAPI.Operations.OutpostsRadiusAccessCheck where

import qualified AuthentikAPI.Common
import AuthentikAPI.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /outposts/radius/{id}/check_access/
--
-- Check access to a single application by slug
outpostsRadiusAccessCheck ::
  forall m.
  (AuthentikAPI.Common.MonadHTTP m) =>
  -- | Contains all available parameters of this operation (query and path parameters)
  OutpostsRadiusAccessCheckParameters ->
  -- | Monadic computation which returns the result of the operation
  AuthentikAPI.Common.ClientT m (Network.HTTP.Client.Types.Response OutpostsRadiusAccessCheckResponse)
outpostsRadiusAccessCheck parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either OutpostsRadiusAccessCheckResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                               | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   OutpostsRadiusAccessCheckResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            RadiusCheckAccess
                                                      )
                               | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   OutpostsRadiusAccessCheckResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            ValidationError
                                                      )
                               | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) ->
                                   OutpostsRadiusAccessCheckResponse403
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GenericError
                                                      )
                               | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    (AuthentikAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "GET") ("/outposts/radius/" GHC.Base.<> (AuthentikAPI.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (AuthentikAPI.Common.textToByte GHC.Base.$ AuthentikAPI.Common.stringifyModel (outpostsRadiusAccessCheckParametersPathId parameters))) GHC.Base.<> "/check_access/")) [AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "app_slug") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> outpostsRadiusAccessCheckParametersQueryAppSlug parameters) (Data.Text.Internal.pack "form") GHC.Types.False])

-- | Defines the object schema located at @paths.\/outposts\/radius\/{id}\/check_access\/.GET.parameters@ in the specification.
data OutpostsRadiusAccessCheckParameters = OutpostsRadiusAccessCheckParameters
  { -- | pathId: Represents the parameter named \'id\'
    --
    -- A unique integer value identifying this Radius Provider.
    outpostsRadiusAccessCheckParametersPathId :: GHC.Types.Int,
    -- | queryApp_slug: Represents the parameter named \'app_slug\'
    outpostsRadiusAccessCheckParametersQueryAppSlug :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON OutpostsRadiusAccessCheckParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["pathId" Data.Aeson.Types.ToJSON..= outpostsRadiusAccessCheckParametersPathId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryApp_slug" Data.Aeson.Types.ToJSON..=)) (outpostsRadiusAccessCheckParametersQueryAppSlug obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["pathId" Data.Aeson.Types.ToJSON..= outpostsRadiusAccessCheckParametersPathId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryApp_slug" Data.Aeson.Types.ToJSON..=)) (outpostsRadiusAccessCheckParametersQueryAppSlug obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON OutpostsRadiusAccessCheckParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "OutpostsRadiusAccessCheckParameters" (\obj -> (GHC.Base.pure OutpostsRadiusAccessCheckParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryApp_slug"))

-- | Create a new 'OutpostsRadiusAccessCheckParameters' with all required fields.
mkOutpostsRadiusAccessCheckParameters ::
  -- | 'outpostsRadiusAccessCheckParametersPathId'
  GHC.Types.Int ->
  OutpostsRadiusAccessCheckParameters
mkOutpostsRadiusAccessCheckParameters outpostsRadiusAccessCheckParametersPathId =
  OutpostsRadiusAccessCheckParameters
    { outpostsRadiusAccessCheckParametersPathId = outpostsRadiusAccessCheckParametersPathId,
      outpostsRadiusAccessCheckParametersQueryAppSlug = GHC.Maybe.Nothing
    }

-- | Represents a response of the operation 'outpostsRadiusAccessCheck'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'OutpostsRadiusAccessCheckResponseError' is used.
data OutpostsRadiusAccessCheckResponse
  = -- | Means either no matching case available or a parse error
    OutpostsRadiusAccessCheckResponseError GHC.Base.String
  | OutpostsRadiusAccessCheckResponse200 RadiusCheckAccess
  | OutpostsRadiusAccessCheckResponse400 ValidationError
  | OutpostsRadiusAccessCheckResponse403 GenericError
  deriving (GHC.Show.Show, GHC.Classes.Eq)

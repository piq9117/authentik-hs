{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation sourcesPlexList
module AuthentikAPI.Operations.SourcesPlexList where

import qualified AuthentikAPI.Common
import AuthentikAPI.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sources/plex/
--
-- Plex source Viewset
sourcesPlexList ::
  forall m.
  (AuthentikAPI.Common.MonadHTTP m) =>
  -- | Contains all available parameters of this operation (query and path parameters)
  SourcesPlexListParameters ->
  -- | Monadic computation which returns the result of the operation
  AuthentikAPI.Common.ClientT m (Network.HTTP.Client.Types.Response SourcesPlexListResponse)
sourcesPlexList parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either SourcesPlexListResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                               | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   SourcesPlexListResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            PaginatedPlexSourceList
                                                      )
                               | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   SourcesPlexListResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            ValidationError
                                                      )
                               | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) ->
                                   SourcesPlexListResponse403
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GenericError
                                                      )
                               | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( AuthentikAPI.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "GET")
        "/sources/plex/"
        [ AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "allow_friends") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> sourcesPlexListParametersQueryAllowFriends parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "authentication_flow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> sourcesPlexListParametersQueryAuthenticationFlow parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "client_id") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> sourcesPlexListParametersQueryClientId parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "enabled") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> sourcesPlexListParametersQueryEnabled parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "enrollment_flow") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> sourcesPlexListParametersQueryEnrollmentFlow parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "group_matching_mode") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> sourcesPlexListParametersQueryGroupMatchingMode parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "name") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> sourcesPlexListParametersQueryName parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "ordering") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> sourcesPlexListParametersQueryOrdering parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> sourcesPlexListParametersQueryPage parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "page_size") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> sourcesPlexListParametersQueryPageSize parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "pbm_uuid") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> sourcesPlexListParametersQueryPbmUuid parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "policy_engine_mode") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> sourcesPlexListParametersQueryPolicyEngineMode parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "search") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> sourcesPlexListParametersQuerySearch parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "slug") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> sourcesPlexListParametersQuerySlug parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "user_matching_mode") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> sourcesPlexListParametersQueryUserMatchingMode parameters) (Data.Text.Internal.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sources\/plex\/.GET.parameters@ in the specification.
data SourcesPlexListParameters = SourcesPlexListParameters
  { -- | queryAllow_friends: Represents the parameter named \'allow_friends\'
    sourcesPlexListParametersQueryAllowFriends :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | queryAuthentication_flow: Represents the parameter named \'authentication_flow\'
    sourcesPlexListParametersQueryAuthenticationFlow :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryClient_id: Represents the parameter named \'client_id\'
    sourcesPlexListParametersQueryClientId :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryEnabled: Represents the parameter named \'enabled\'
    sourcesPlexListParametersQueryEnabled :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | queryEnrollment_flow: Represents the parameter named \'enrollment_flow\'
    sourcesPlexListParametersQueryEnrollmentFlow :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryGroup_matching_mode: Represents the parameter named \'group_matching_mode\'
    --
    -- How the source determines if an existing group should be used or a new group created.
    sourcesPlexListParametersQueryGroupMatchingMode :: (GHC.Maybe.Maybe SourcesPlexListParametersQueryGroupMatchingMode'),
    -- | queryName: Represents the parameter named \'name\'
    sourcesPlexListParametersQueryName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryOrdering: Represents the parameter named \'ordering\'
    --
    -- Which field to use when ordering the results.
    sourcesPlexListParametersQueryOrdering :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryPage: Represents the parameter named \'page\'
    --
    -- A page number within the paginated result set.
    sourcesPlexListParametersQueryPage :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | queryPage_size: Represents the parameter named \'page_size\'
    --
    -- Number of results to return per page.
    sourcesPlexListParametersQueryPageSize :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | queryPbm_uuid: Represents the parameter named \'pbm_uuid\'
    sourcesPlexListParametersQueryPbmUuid :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryPolicy_engine_mode: Represents the parameter named \'policy_engine_mode\'
    sourcesPlexListParametersQueryPolicyEngineMode :: (GHC.Maybe.Maybe SourcesPlexListParametersQueryPolicyEngineMode'),
    -- | querySearch: Represents the parameter named \'search\'
    --
    -- A search term.
    sourcesPlexListParametersQuerySearch :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | querySlug: Represents the parameter named \'slug\'
    sourcesPlexListParametersQuerySlug :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryUser_matching_mode: Represents the parameter named \'user_matching_mode\'
    --
    -- How the source determines if an existing user should be authenticated or a new user enrolled.
    sourcesPlexListParametersQueryUserMatchingMode :: (GHC.Maybe.Maybe SourcesPlexListParametersQueryUserMatchingMode')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SourcesPlexListParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryAllow_friends" Data.Aeson.Types.ToJSON..=)) (sourcesPlexListParametersQueryAllowFriends obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryAuthentication_flow" Data.Aeson.Types.ToJSON..=)) (sourcesPlexListParametersQueryAuthenticationFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryClient_id" Data.Aeson.Types.ToJSON..=)) (sourcesPlexListParametersQueryClientId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnabled" Data.Aeson.Types.ToJSON..=)) (sourcesPlexListParametersQueryEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnrollment_flow" Data.Aeson.Types.ToJSON..=)) (sourcesPlexListParametersQueryEnrollmentFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryGroup_matching_mode" Data.Aeson.Types.ToJSON..=)) (sourcesPlexListParametersQueryGroupMatchingMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryName" Data.Aeson.Types.ToJSON..=)) (sourcesPlexListParametersQueryName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryOrdering" Data.Aeson.Types.ToJSON..=)) (sourcesPlexListParametersQueryOrdering obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage" Data.Aeson.Types.ToJSON..=)) (sourcesPlexListParametersQueryPage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage_size" Data.Aeson.Types.ToJSON..=)) (sourcesPlexListParametersQueryPageSize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPbm_uuid" Data.Aeson.Types.ToJSON..=)) (sourcesPlexListParametersQueryPbmUuid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPolicy_engine_mode" Data.Aeson.Types.ToJSON..=)) (sourcesPlexListParametersQueryPolicyEngineMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySearch" Data.Aeson.Types.ToJSON..=)) (sourcesPlexListParametersQuerySearch obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySlug" Data.Aeson.Types.ToJSON..=)) (sourcesPlexListParametersQuerySlug obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryUser_matching_mode" Data.Aeson.Types.ToJSON..=)) (sourcesPlexListParametersQueryUserMatchingMode obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryAllow_friends" Data.Aeson.Types.ToJSON..=)) (sourcesPlexListParametersQueryAllowFriends obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryAuthentication_flow" Data.Aeson.Types.ToJSON..=)) (sourcesPlexListParametersQueryAuthenticationFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryClient_id" Data.Aeson.Types.ToJSON..=)) (sourcesPlexListParametersQueryClientId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnabled" Data.Aeson.Types.ToJSON..=)) (sourcesPlexListParametersQueryEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnrollment_flow" Data.Aeson.Types.ToJSON..=)) (sourcesPlexListParametersQueryEnrollmentFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryGroup_matching_mode" Data.Aeson.Types.ToJSON..=)) (sourcesPlexListParametersQueryGroupMatchingMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryName" Data.Aeson.Types.ToJSON..=)) (sourcesPlexListParametersQueryName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryOrdering" Data.Aeson.Types.ToJSON..=)) (sourcesPlexListParametersQueryOrdering obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage" Data.Aeson.Types.ToJSON..=)) (sourcesPlexListParametersQueryPage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage_size" Data.Aeson.Types.ToJSON..=)) (sourcesPlexListParametersQueryPageSize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPbm_uuid" Data.Aeson.Types.ToJSON..=)) (sourcesPlexListParametersQueryPbmUuid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPolicy_engine_mode" Data.Aeson.Types.ToJSON..=)) (sourcesPlexListParametersQueryPolicyEngineMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySearch" Data.Aeson.Types.ToJSON..=)) (sourcesPlexListParametersQuerySearch obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySlug" Data.Aeson.Types.ToJSON..=)) (sourcesPlexListParametersQuerySlug obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryUser_matching_mode" Data.Aeson.Types.ToJSON..=)) (sourcesPlexListParametersQueryUserMatchingMode obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SourcesPlexListParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SourcesPlexListParameters" (\obj -> ((((((((((((((GHC.Base.pure SourcesPlexListParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryAllow_friends")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryAuthentication_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryClient_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEnabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEnrollment_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryGroup_matching_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryName")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryOrdering")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPage_size")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPbm_uuid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPolicy_engine_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "querySearch")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "querySlug")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryUser_matching_mode"))

-- | Create a new 'SourcesPlexListParameters' with all required fields.
mkSourcesPlexListParameters :: SourcesPlexListParameters
mkSourcesPlexListParameters =
  SourcesPlexListParameters
    { sourcesPlexListParametersQueryAllowFriends = GHC.Maybe.Nothing,
      sourcesPlexListParametersQueryAuthenticationFlow = GHC.Maybe.Nothing,
      sourcesPlexListParametersQueryClientId = GHC.Maybe.Nothing,
      sourcesPlexListParametersQueryEnabled = GHC.Maybe.Nothing,
      sourcesPlexListParametersQueryEnrollmentFlow = GHC.Maybe.Nothing,
      sourcesPlexListParametersQueryGroupMatchingMode = GHC.Maybe.Nothing,
      sourcesPlexListParametersQueryName = GHC.Maybe.Nothing,
      sourcesPlexListParametersQueryOrdering = GHC.Maybe.Nothing,
      sourcesPlexListParametersQueryPage = GHC.Maybe.Nothing,
      sourcesPlexListParametersQueryPageSize = GHC.Maybe.Nothing,
      sourcesPlexListParametersQueryPbmUuid = GHC.Maybe.Nothing,
      sourcesPlexListParametersQueryPolicyEngineMode = GHC.Maybe.Nothing,
      sourcesPlexListParametersQuerySearch = GHC.Maybe.Nothing,
      sourcesPlexListParametersQuerySlug = GHC.Maybe.Nothing,
      sourcesPlexListParametersQueryUserMatchingMode = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @paths.\/sources\/plex\/.GET.parameters.properties.queryGroup_matching_mode@ in the specification.
--
-- Represents the parameter named \'group_matching_mode\'
--
-- How the source determines if an existing group should be used or a new group created.
data SourcesPlexListParametersQueryGroupMatchingMode'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    SourcesPlexListParametersQueryGroupMatchingMode'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    SourcesPlexListParametersQueryGroupMatchingMode'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"identifier"@
    SourcesPlexListParametersQueryGroupMatchingMode'EnumIdentifier
  | -- | Represents the JSON value @"name_deny"@
    SourcesPlexListParametersQueryGroupMatchingMode'EnumNameDeny
  | -- | Represents the JSON value @"name_link"@
    SourcesPlexListParametersQueryGroupMatchingMode'EnumNameLink
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SourcesPlexListParametersQueryGroupMatchingMode' where
  toJSON (SourcesPlexListParametersQueryGroupMatchingMode'Other val) = val
  toJSON (SourcesPlexListParametersQueryGroupMatchingMode'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (SourcesPlexListParametersQueryGroupMatchingMode'EnumIdentifier) = "identifier"
  toJSON (SourcesPlexListParametersQueryGroupMatchingMode'EnumNameDeny) = "name_deny"
  toJSON (SourcesPlexListParametersQueryGroupMatchingMode'EnumNameLink) = "name_link"

instance Data.Aeson.Types.FromJSON.FromJSON SourcesPlexListParametersQueryGroupMatchingMode' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "identifier" -> SourcesPlexListParametersQueryGroupMatchingMode'EnumIdentifier
          | val GHC.Classes.== "name_deny" -> SourcesPlexListParametersQueryGroupMatchingMode'EnumNameDeny
          | val GHC.Classes.== "name_link" -> SourcesPlexListParametersQueryGroupMatchingMode'EnumNameLink
          | GHC.Base.otherwise -> SourcesPlexListParametersQueryGroupMatchingMode'Other val
      )

-- | Defines the enum schema located at @paths.\/sources\/plex\/.GET.parameters.properties.queryPolicy_engine_mode@ in the specification.
--
-- Represents the parameter named \'policy_engine_mode\'
data SourcesPlexListParametersQueryPolicyEngineMode'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    SourcesPlexListParametersQueryPolicyEngineMode'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    SourcesPlexListParametersQueryPolicyEngineMode'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"all"@
    SourcesPlexListParametersQueryPolicyEngineMode'EnumAll
  | -- | Represents the JSON value @"any"@
    SourcesPlexListParametersQueryPolicyEngineMode'EnumAny
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SourcesPlexListParametersQueryPolicyEngineMode' where
  toJSON (SourcesPlexListParametersQueryPolicyEngineMode'Other val) = val
  toJSON (SourcesPlexListParametersQueryPolicyEngineMode'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (SourcesPlexListParametersQueryPolicyEngineMode'EnumAll) = "all"
  toJSON (SourcesPlexListParametersQueryPolicyEngineMode'EnumAny) = "any"

instance Data.Aeson.Types.FromJSON.FromJSON SourcesPlexListParametersQueryPolicyEngineMode' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "all" -> SourcesPlexListParametersQueryPolicyEngineMode'EnumAll
          | val GHC.Classes.== "any" -> SourcesPlexListParametersQueryPolicyEngineMode'EnumAny
          | GHC.Base.otherwise -> SourcesPlexListParametersQueryPolicyEngineMode'Other val
      )

-- | Defines the enum schema located at @paths.\/sources\/plex\/.GET.parameters.properties.queryUser_matching_mode@ in the specification.
--
-- Represents the parameter named \'user_matching_mode\'
--
-- How the source determines if an existing user should be authenticated or a new user enrolled.
data SourcesPlexListParametersQueryUserMatchingMode'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    SourcesPlexListParametersQueryUserMatchingMode'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    SourcesPlexListParametersQueryUserMatchingMode'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"email_deny"@
    SourcesPlexListParametersQueryUserMatchingMode'EnumEmailDeny
  | -- | Represents the JSON value @"email_link"@
    SourcesPlexListParametersQueryUserMatchingMode'EnumEmailLink
  | -- | Represents the JSON value @"identifier"@
    SourcesPlexListParametersQueryUserMatchingMode'EnumIdentifier
  | -- | Represents the JSON value @"username_deny"@
    SourcesPlexListParametersQueryUserMatchingMode'EnumUsernameDeny
  | -- | Represents the JSON value @"username_link"@
    SourcesPlexListParametersQueryUserMatchingMode'EnumUsernameLink
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SourcesPlexListParametersQueryUserMatchingMode' where
  toJSON (SourcesPlexListParametersQueryUserMatchingMode'Other val) = val
  toJSON (SourcesPlexListParametersQueryUserMatchingMode'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (SourcesPlexListParametersQueryUserMatchingMode'EnumEmailDeny) = "email_deny"
  toJSON (SourcesPlexListParametersQueryUserMatchingMode'EnumEmailLink) = "email_link"
  toJSON (SourcesPlexListParametersQueryUserMatchingMode'EnumIdentifier) = "identifier"
  toJSON (SourcesPlexListParametersQueryUserMatchingMode'EnumUsernameDeny) = "username_deny"
  toJSON (SourcesPlexListParametersQueryUserMatchingMode'EnumUsernameLink) = "username_link"

instance Data.Aeson.Types.FromJSON.FromJSON SourcesPlexListParametersQueryUserMatchingMode' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "email_deny" -> SourcesPlexListParametersQueryUserMatchingMode'EnumEmailDeny
          | val GHC.Classes.== "email_link" -> SourcesPlexListParametersQueryUserMatchingMode'EnumEmailLink
          | val GHC.Classes.== "identifier" -> SourcesPlexListParametersQueryUserMatchingMode'EnumIdentifier
          | val GHC.Classes.== "username_deny" -> SourcesPlexListParametersQueryUserMatchingMode'EnumUsernameDeny
          | val GHC.Classes.== "username_link" -> SourcesPlexListParametersQueryUserMatchingMode'EnumUsernameLink
          | GHC.Base.otherwise -> SourcesPlexListParametersQueryUserMatchingMode'Other val
      )

-- | Represents a response of the operation 'sourcesPlexList'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'SourcesPlexListResponseError' is used.
data SourcesPlexListResponse
  = -- | Means either no matching case available or a parse error
    SourcesPlexListResponseError GHC.Base.String
  | SourcesPlexListResponse200 PaginatedPlexSourceList
  | SourcesPlexListResponse400 ValidationError
  | SourcesPlexListResponse403 GenericError
  deriving (GHC.Show.Show, GHC.Classes.Eq)

{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation eventsEventsVolumeList
module AuthentikAPI.Operations.EventsEventsVolumeList where

import qualified AuthentikAPI.Common
import AuthentikAPI.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /events/events/volume/
--
-- Get event volume for specified filters and timeframe
eventsEventsVolumeList ::
  forall m.
  (AuthentikAPI.Common.MonadHTTP m) =>
  -- | Contains all available parameters of this operation (query and path parameters)
  EventsEventsVolumeListParameters ->
  -- | Monadic computation which returns the result of the operation
  AuthentikAPI.Common.ClientT m (Network.HTTP.Client.Types.Response EventsEventsVolumeListResponse)
eventsEventsVolumeList parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either EventsEventsVolumeListResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                               | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   EventsEventsVolumeListResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            [Coordinate]
                                                      )
                               | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   EventsEventsVolumeListResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            ValidationError
                                                      )
                               | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) ->
                                   EventsEventsVolumeListResponse403
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GenericError
                                                      )
                               | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( AuthentikAPI.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "GET")
        "/events/events/volume/"
        [ AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "action") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> eventsEventsVolumeListParametersQueryAction parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "brand_name") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> eventsEventsVolumeListParametersQueryBrandName parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "client_ip") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> eventsEventsVolumeListParametersQueryClientIp parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "context_authorized_app") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> eventsEventsVolumeListParametersQueryContextAuthorizedApp parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "context_model_app") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> eventsEventsVolumeListParametersQueryContextModelApp parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "context_model_name") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> eventsEventsVolumeListParametersQueryContextModelName parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "context_model_pk") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> eventsEventsVolumeListParametersQueryContextModelPk parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "ordering") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> eventsEventsVolumeListParametersQueryOrdering parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "search") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> eventsEventsVolumeListParametersQuerySearch parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "username") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> eventsEventsVolumeListParametersQueryUsername parameters) (Data.Text.Internal.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/events\/events\/volume\/.GET.parameters@ in the specification.
data EventsEventsVolumeListParameters = EventsEventsVolumeListParameters
  { -- | queryAction: Represents the parameter named \'action\'
    eventsEventsVolumeListParametersQueryAction :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryBrand_name: Represents the parameter named \'brand_name\'
    --
    -- Brand name
    eventsEventsVolumeListParametersQueryBrandName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryClient_ip: Represents the parameter named \'client_ip\'
    eventsEventsVolumeListParametersQueryClientIp :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryContext_authorized_app: Represents the parameter named \'context_authorized_app\'
    --
    -- Context Authorized application
    eventsEventsVolumeListParametersQueryContextAuthorizedApp :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryContext_model_app: Represents the parameter named \'context_model_app\'
    --
    -- Context Model App
    eventsEventsVolumeListParametersQueryContextModelApp :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryContext_model_name: Represents the parameter named \'context_model_name\'
    --
    -- Context Model Name
    eventsEventsVolumeListParametersQueryContextModelName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryContext_model_pk: Represents the parameter named \'context_model_pk\'
    --
    -- Context Model Primary Key
    eventsEventsVolumeListParametersQueryContextModelPk :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryOrdering: Represents the parameter named \'ordering\'
    --
    -- Which field to use when ordering the results.
    eventsEventsVolumeListParametersQueryOrdering :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | querySearch: Represents the parameter named \'search\'
    --
    -- A search term.
    eventsEventsVolumeListParametersQuerySearch :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryUsername: Represents the parameter named \'username\'
    --
    -- Username
    eventsEventsVolumeListParametersQueryUsername :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON EventsEventsVolumeListParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryAction" Data.Aeson.Types.ToJSON..=)) (eventsEventsVolumeListParametersQueryAction obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryBrand_name" Data.Aeson.Types.ToJSON..=)) (eventsEventsVolumeListParametersQueryBrandName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryClient_ip" Data.Aeson.Types.ToJSON..=)) (eventsEventsVolumeListParametersQueryClientIp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryContext_authorized_app" Data.Aeson.Types.ToJSON..=)) (eventsEventsVolumeListParametersQueryContextAuthorizedApp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryContext_model_app" Data.Aeson.Types.ToJSON..=)) (eventsEventsVolumeListParametersQueryContextModelApp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryContext_model_name" Data.Aeson.Types.ToJSON..=)) (eventsEventsVolumeListParametersQueryContextModelName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryContext_model_pk" Data.Aeson.Types.ToJSON..=)) (eventsEventsVolumeListParametersQueryContextModelPk obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryOrdering" Data.Aeson.Types.ToJSON..=)) (eventsEventsVolumeListParametersQueryOrdering obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySearch" Data.Aeson.Types.ToJSON..=)) (eventsEventsVolumeListParametersQuerySearch obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryUsername" Data.Aeson.Types.ToJSON..=)) (eventsEventsVolumeListParametersQueryUsername obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryAction" Data.Aeson.Types.ToJSON..=)) (eventsEventsVolumeListParametersQueryAction obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryBrand_name" Data.Aeson.Types.ToJSON..=)) (eventsEventsVolumeListParametersQueryBrandName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryClient_ip" Data.Aeson.Types.ToJSON..=)) (eventsEventsVolumeListParametersQueryClientIp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryContext_authorized_app" Data.Aeson.Types.ToJSON..=)) (eventsEventsVolumeListParametersQueryContextAuthorizedApp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryContext_model_app" Data.Aeson.Types.ToJSON..=)) (eventsEventsVolumeListParametersQueryContextModelApp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryContext_model_name" Data.Aeson.Types.ToJSON..=)) (eventsEventsVolumeListParametersQueryContextModelName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryContext_model_pk" Data.Aeson.Types.ToJSON..=)) (eventsEventsVolumeListParametersQueryContextModelPk obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryOrdering" Data.Aeson.Types.ToJSON..=)) (eventsEventsVolumeListParametersQueryOrdering obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySearch" Data.Aeson.Types.ToJSON..=)) (eventsEventsVolumeListParametersQuerySearch obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryUsername" Data.Aeson.Types.ToJSON..=)) (eventsEventsVolumeListParametersQueryUsername obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON EventsEventsVolumeListParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "EventsEventsVolumeListParameters" (\obj -> (((((((((GHC.Base.pure EventsEventsVolumeListParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryAction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryBrand_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryClient_ip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryContext_authorized_app")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryContext_model_app")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryContext_model_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryContext_model_pk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryOrdering")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "querySearch")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryUsername"))

-- | Create a new 'EventsEventsVolumeListParameters' with all required fields.
mkEventsEventsVolumeListParameters :: EventsEventsVolumeListParameters
mkEventsEventsVolumeListParameters =
  EventsEventsVolumeListParameters
    { eventsEventsVolumeListParametersQueryAction = GHC.Maybe.Nothing,
      eventsEventsVolumeListParametersQueryBrandName = GHC.Maybe.Nothing,
      eventsEventsVolumeListParametersQueryClientIp = GHC.Maybe.Nothing,
      eventsEventsVolumeListParametersQueryContextAuthorizedApp = GHC.Maybe.Nothing,
      eventsEventsVolumeListParametersQueryContextModelApp = GHC.Maybe.Nothing,
      eventsEventsVolumeListParametersQueryContextModelName = GHC.Maybe.Nothing,
      eventsEventsVolumeListParametersQueryContextModelPk = GHC.Maybe.Nothing,
      eventsEventsVolumeListParametersQueryOrdering = GHC.Maybe.Nothing,
      eventsEventsVolumeListParametersQuerySearch = GHC.Maybe.Nothing,
      eventsEventsVolumeListParametersQueryUsername = GHC.Maybe.Nothing
    }

-- | Represents a response of the operation 'eventsEventsVolumeList'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'EventsEventsVolumeListResponseError' is used.
data EventsEventsVolumeListResponse
  = -- | Means either no matching case available or a parse error
    EventsEventsVolumeListResponseError GHC.Base.String
  | EventsEventsVolumeListResponse200 [Coordinate]
  | EventsEventsVolumeListResponse400 ValidationError
  | EventsEventsVolumeListResponse403 GenericError
  deriving (GHC.Show.Show, GHC.Classes.Eq)

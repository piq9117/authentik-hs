{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation sourcesUserConnectionsAllList
module AuthentikAPI.Operations.SourcesUserConnectionsAllList where

import qualified AuthentikAPI.Common
import AuthentikAPI.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sources/user_connections/all/
--
-- User-source connection Viewset
sourcesUserConnectionsAllList ::
  forall m.
  (AuthentikAPI.Common.MonadHTTP m) =>
  -- | Contains all available parameters of this operation (query and path parameters)
  SourcesUserConnectionsAllListParameters ->
  -- | Monadic computation which returns the result of the operation
  AuthentikAPI.Common.ClientT m (Network.HTTP.Client.Types.Response SourcesUserConnectionsAllListResponse)
sourcesUserConnectionsAllList parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either SourcesUserConnectionsAllListResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                               | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   SourcesUserConnectionsAllListResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            PaginatedUserSourceConnectionList
                                                      )
                               | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   SourcesUserConnectionsAllListResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            ValidationError
                                                      )
                               | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) ->
                                   SourcesUserConnectionsAllListResponse403
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GenericError
                                                      )
                               | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( AuthentikAPI.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "GET")
        "/sources/user_connections/all/"
        [ AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "ordering") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> sourcesUserConnectionsAllListParametersQueryOrdering parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> sourcesUserConnectionsAllListParametersQueryPage parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "page_size") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> sourcesUserConnectionsAllListParametersQueryPageSize parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "search") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> sourcesUserConnectionsAllListParametersQuerySearch parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "source__slug") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> sourcesUserConnectionsAllListParametersQuerySource_Slug parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "user") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> sourcesUserConnectionsAllListParametersQueryUser parameters) (Data.Text.Internal.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sources\/user_connections\/all\/.GET.parameters@ in the specification.
data SourcesUserConnectionsAllListParameters = SourcesUserConnectionsAllListParameters
  { -- | queryOrdering: Represents the parameter named \'ordering\'
    --
    -- Which field to use when ordering the results.
    sourcesUserConnectionsAllListParametersQueryOrdering :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryPage: Represents the parameter named \'page\'
    --
    -- A page number within the paginated result set.
    sourcesUserConnectionsAllListParametersQueryPage :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | queryPage_size: Represents the parameter named \'page_size\'
    --
    -- Number of results to return per page.
    sourcesUserConnectionsAllListParametersQueryPageSize :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | querySearch: Represents the parameter named \'search\'
    --
    -- A search term.
    sourcesUserConnectionsAllListParametersQuerySearch :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | querySource__slug: Represents the parameter named \'source__slug\'
    sourcesUserConnectionsAllListParametersQuerySource_Slug :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryUser: Represents the parameter named \'user\'
    sourcesUserConnectionsAllListParametersQueryUser :: (GHC.Maybe.Maybe GHC.Types.Int)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SourcesUserConnectionsAllListParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryOrdering" Data.Aeson.Types.ToJSON..=)) (sourcesUserConnectionsAllListParametersQueryOrdering obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage" Data.Aeson.Types.ToJSON..=)) (sourcesUserConnectionsAllListParametersQueryPage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage_size" Data.Aeson.Types.ToJSON..=)) (sourcesUserConnectionsAllListParametersQueryPageSize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySearch" Data.Aeson.Types.ToJSON..=)) (sourcesUserConnectionsAllListParametersQuerySearch obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySource__slug" Data.Aeson.Types.ToJSON..=)) (sourcesUserConnectionsAllListParametersQuerySource_Slug obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryUser" Data.Aeson.Types.ToJSON..=)) (sourcesUserConnectionsAllListParametersQueryUser obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryOrdering" Data.Aeson.Types.ToJSON..=)) (sourcesUserConnectionsAllListParametersQueryOrdering obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage" Data.Aeson.Types.ToJSON..=)) (sourcesUserConnectionsAllListParametersQueryPage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage_size" Data.Aeson.Types.ToJSON..=)) (sourcesUserConnectionsAllListParametersQueryPageSize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySearch" Data.Aeson.Types.ToJSON..=)) (sourcesUserConnectionsAllListParametersQuerySearch obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySource__slug" Data.Aeson.Types.ToJSON..=)) (sourcesUserConnectionsAllListParametersQuerySource_Slug obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryUser" Data.Aeson.Types.ToJSON..=)) (sourcesUserConnectionsAllListParametersQueryUser obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SourcesUserConnectionsAllListParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SourcesUserConnectionsAllListParameters" (\obj -> (((((GHC.Base.pure SourcesUserConnectionsAllListParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryOrdering")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPage_size")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "querySearch")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "querySource__slug")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryUser"))

-- | Create a new 'SourcesUserConnectionsAllListParameters' with all required fields.
mkSourcesUserConnectionsAllListParameters :: SourcesUserConnectionsAllListParameters
mkSourcesUserConnectionsAllListParameters =
  SourcesUserConnectionsAllListParameters
    { sourcesUserConnectionsAllListParametersQueryOrdering = GHC.Maybe.Nothing,
      sourcesUserConnectionsAllListParametersQueryPage = GHC.Maybe.Nothing,
      sourcesUserConnectionsAllListParametersQueryPageSize = GHC.Maybe.Nothing,
      sourcesUserConnectionsAllListParametersQuerySearch = GHC.Maybe.Nothing,
      sourcesUserConnectionsAllListParametersQuerySource_Slug = GHC.Maybe.Nothing,
      sourcesUserConnectionsAllListParametersQueryUser = GHC.Maybe.Nothing
    }

-- | Represents a response of the operation 'sourcesUserConnectionsAllList'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'SourcesUserConnectionsAllListResponseError' is used.
data SourcesUserConnectionsAllListResponse
  = -- | Means either no matching case available or a parse error
    SourcesUserConnectionsAllListResponseError GHC.Base.String
  | SourcesUserConnectionsAllListResponse200 PaginatedUserSourceConnectionList
  | SourcesUserConnectionsAllListResponse400 ValidationError
  | SourcesUserConnectionsAllListResponse403 GenericError
  deriving (GHC.Show.Show, GHC.Classes.Eq)

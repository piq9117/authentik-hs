{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation coreBrandsList
module AuthentikAPI.Operations.CoreBrandsList where

import qualified AuthentikAPI.Common
import AuthentikAPI.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /core/brands/
--
-- Brand Viewset
coreBrandsList ::
  forall m.
  (AuthentikAPI.Common.MonadHTTP m) =>
  -- | Contains all available parameters of this operation (query and path parameters)
  CoreBrandsListParameters ->
  -- | Monadic computation which returns the result of the operation
  AuthentikAPI.Common.ClientT m (Network.HTTP.Client.Types.Response CoreBrandsListResponse)
coreBrandsList parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either CoreBrandsListResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                               | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   CoreBrandsListResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            PaginatedBrandList
                                                      )
                               | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   CoreBrandsListResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            ValidationError
                                                      )
                               | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) ->
                                   CoreBrandsListResponse403
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GenericError
                                                      )
                               | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( AuthentikAPI.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "GET")
        "/core/brands/"
        [ AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "brand_uuid") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> coreBrandsListParametersQueryBrandUuid parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "branding_default_flow_background") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> coreBrandsListParametersQueryBrandingDefaultFlowBackground parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "branding_favicon") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> coreBrandsListParametersQueryBrandingFavicon parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "branding_logo") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> coreBrandsListParametersQueryBrandingLogo parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "branding_title") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> coreBrandsListParametersQueryBrandingTitle parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "default") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> coreBrandsListParametersQueryDefault parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "domain") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> coreBrandsListParametersQueryDomain parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "flow_authentication") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> coreBrandsListParametersQueryFlowAuthentication parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "flow_device_code") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> coreBrandsListParametersQueryFlowDeviceCode parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "flow_invalidation") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> coreBrandsListParametersQueryFlowInvalidation parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "flow_recovery") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> coreBrandsListParametersQueryFlowRecovery parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "flow_unenrollment") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> coreBrandsListParametersQueryFlowUnenrollment parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "flow_user_settings") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> coreBrandsListParametersQueryFlowUserSettings parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "ordering") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> coreBrandsListParametersQueryOrdering parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> coreBrandsListParametersQueryPage parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "page_size") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> coreBrandsListParametersQueryPageSize parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "search") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> coreBrandsListParametersQuerySearch parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "web_certificate") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> coreBrandsListParametersQueryWebCertificate parameters) (Data.Text.Internal.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/core\/brands\/.GET.parameters@ in the specification.
data CoreBrandsListParameters = CoreBrandsListParameters
  { -- | queryBrand_uuid: Represents the parameter named \'brand_uuid\'
    coreBrandsListParametersQueryBrandUuid :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryBranding_default_flow_background: Represents the parameter named \'branding_default_flow_background\'
    coreBrandsListParametersQueryBrandingDefaultFlowBackground :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryBranding_favicon: Represents the parameter named \'branding_favicon\'
    coreBrandsListParametersQueryBrandingFavicon :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryBranding_logo: Represents the parameter named \'branding_logo\'
    coreBrandsListParametersQueryBrandingLogo :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryBranding_title: Represents the parameter named \'branding_title\'
    coreBrandsListParametersQueryBrandingTitle :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryDefault: Represents the parameter named \'default\'
    coreBrandsListParametersQueryDefault :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | queryDomain: Represents the parameter named \'domain\'
    coreBrandsListParametersQueryDomain :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryFlow_authentication: Represents the parameter named \'flow_authentication\'
    coreBrandsListParametersQueryFlowAuthentication :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryFlow_device_code: Represents the parameter named \'flow_device_code\'
    coreBrandsListParametersQueryFlowDeviceCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryFlow_invalidation: Represents the parameter named \'flow_invalidation\'
    coreBrandsListParametersQueryFlowInvalidation :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryFlow_recovery: Represents the parameter named \'flow_recovery\'
    coreBrandsListParametersQueryFlowRecovery :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryFlow_unenrollment: Represents the parameter named \'flow_unenrollment\'
    coreBrandsListParametersQueryFlowUnenrollment :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryFlow_user_settings: Represents the parameter named \'flow_user_settings\'
    coreBrandsListParametersQueryFlowUserSettings :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryOrdering: Represents the parameter named \'ordering\'
    --
    -- Which field to use when ordering the results.
    coreBrandsListParametersQueryOrdering :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryPage: Represents the parameter named \'page\'
    --
    -- A page number within the paginated result set.
    coreBrandsListParametersQueryPage :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | queryPage_size: Represents the parameter named \'page_size\'
    --
    -- Number of results to return per page.
    coreBrandsListParametersQueryPageSize :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | querySearch: Represents the parameter named \'search\'
    --
    -- A search term.
    coreBrandsListParametersQuerySearch :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryWeb_certificate: Represents the parameter named \'web_certificate\'
    coreBrandsListParametersQueryWebCertificate :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON CoreBrandsListParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryBrand_uuid" Data.Aeson.Types.ToJSON..=)) (coreBrandsListParametersQueryBrandUuid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryBranding_default_flow_background" Data.Aeson.Types.ToJSON..=)) (coreBrandsListParametersQueryBrandingDefaultFlowBackground obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryBranding_favicon" Data.Aeson.Types.ToJSON..=)) (coreBrandsListParametersQueryBrandingFavicon obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryBranding_logo" Data.Aeson.Types.ToJSON..=)) (coreBrandsListParametersQueryBrandingLogo obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryBranding_title" Data.Aeson.Types.ToJSON..=)) (coreBrandsListParametersQueryBrandingTitle obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryDefault" Data.Aeson.Types.ToJSON..=)) (coreBrandsListParametersQueryDefault obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryDomain" Data.Aeson.Types.ToJSON..=)) (coreBrandsListParametersQueryDomain obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryFlow_authentication" Data.Aeson.Types.ToJSON..=)) (coreBrandsListParametersQueryFlowAuthentication obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryFlow_device_code" Data.Aeson.Types.ToJSON..=)) (coreBrandsListParametersQueryFlowDeviceCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryFlow_invalidation" Data.Aeson.Types.ToJSON..=)) (coreBrandsListParametersQueryFlowInvalidation obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryFlow_recovery" Data.Aeson.Types.ToJSON..=)) (coreBrandsListParametersQueryFlowRecovery obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryFlow_unenrollment" Data.Aeson.Types.ToJSON..=)) (coreBrandsListParametersQueryFlowUnenrollment obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryFlow_user_settings" Data.Aeson.Types.ToJSON..=)) (coreBrandsListParametersQueryFlowUserSettings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryOrdering" Data.Aeson.Types.ToJSON..=)) (coreBrandsListParametersQueryOrdering obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage" Data.Aeson.Types.ToJSON..=)) (coreBrandsListParametersQueryPage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage_size" Data.Aeson.Types.ToJSON..=)) (coreBrandsListParametersQueryPageSize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySearch" Data.Aeson.Types.ToJSON..=)) (coreBrandsListParametersQuerySearch obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryWeb_certificate" Data.Aeson.Types.ToJSON..=)) (coreBrandsListParametersQueryWebCertificate obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryBrand_uuid" Data.Aeson.Types.ToJSON..=)) (coreBrandsListParametersQueryBrandUuid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryBranding_default_flow_background" Data.Aeson.Types.ToJSON..=)) (coreBrandsListParametersQueryBrandingDefaultFlowBackground obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryBranding_favicon" Data.Aeson.Types.ToJSON..=)) (coreBrandsListParametersQueryBrandingFavicon obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryBranding_logo" Data.Aeson.Types.ToJSON..=)) (coreBrandsListParametersQueryBrandingLogo obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryBranding_title" Data.Aeson.Types.ToJSON..=)) (coreBrandsListParametersQueryBrandingTitle obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryDefault" Data.Aeson.Types.ToJSON..=)) (coreBrandsListParametersQueryDefault obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryDomain" Data.Aeson.Types.ToJSON..=)) (coreBrandsListParametersQueryDomain obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryFlow_authentication" Data.Aeson.Types.ToJSON..=)) (coreBrandsListParametersQueryFlowAuthentication obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryFlow_device_code" Data.Aeson.Types.ToJSON..=)) (coreBrandsListParametersQueryFlowDeviceCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryFlow_invalidation" Data.Aeson.Types.ToJSON..=)) (coreBrandsListParametersQueryFlowInvalidation obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryFlow_recovery" Data.Aeson.Types.ToJSON..=)) (coreBrandsListParametersQueryFlowRecovery obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryFlow_unenrollment" Data.Aeson.Types.ToJSON..=)) (coreBrandsListParametersQueryFlowUnenrollment obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryFlow_user_settings" Data.Aeson.Types.ToJSON..=)) (coreBrandsListParametersQueryFlowUserSettings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryOrdering" Data.Aeson.Types.ToJSON..=)) (coreBrandsListParametersQueryOrdering obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage" Data.Aeson.Types.ToJSON..=)) (coreBrandsListParametersQueryPage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage_size" Data.Aeson.Types.ToJSON..=)) (coreBrandsListParametersQueryPageSize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySearch" Data.Aeson.Types.ToJSON..=)) (coreBrandsListParametersQuerySearch obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryWeb_certificate" Data.Aeson.Types.ToJSON..=)) (coreBrandsListParametersQueryWebCertificate obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON CoreBrandsListParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "CoreBrandsListParameters" (\obj -> (((((((((((((((((GHC.Base.pure CoreBrandsListParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryBrand_uuid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryBranding_default_flow_background")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryBranding_favicon")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryBranding_logo")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryBranding_title")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryDefault")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryDomain")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryFlow_authentication")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryFlow_device_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryFlow_invalidation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryFlow_recovery")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryFlow_unenrollment")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryFlow_user_settings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryOrdering")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPage_size")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "querySearch")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryWeb_certificate"))

-- | Create a new 'CoreBrandsListParameters' with all required fields.
mkCoreBrandsListParameters :: CoreBrandsListParameters
mkCoreBrandsListParameters =
  CoreBrandsListParameters
    { coreBrandsListParametersQueryBrandUuid = GHC.Maybe.Nothing,
      coreBrandsListParametersQueryBrandingDefaultFlowBackground = GHC.Maybe.Nothing,
      coreBrandsListParametersQueryBrandingFavicon = GHC.Maybe.Nothing,
      coreBrandsListParametersQueryBrandingLogo = GHC.Maybe.Nothing,
      coreBrandsListParametersQueryBrandingTitle = GHC.Maybe.Nothing,
      coreBrandsListParametersQueryDefault = GHC.Maybe.Nothing,
      coreBrandsListParametersQueryDomain = GHC.Maybe.Nothing,
      coreBrandsListParametersQueryFlowAuthentication = GHC.Maybe.Nothing,
      coreBrandsListParametersQueryFlowDeviceCode = GHC.Maybe.Nothing,
      coreBrandsListParametersQueryFlowInvalidation = GHC.Maybe.Nothing,
      coreBrandsListParametersQueryFlowRecovery = GHC.Maybe.Nothing,
      coreBrandsListParametersQueryFlowUnenrollment = GHC.Maybe.Nothing,
      coreBrandsListParametersQueryFlowUserSettings = GHC.Maybe.Nothing,
      coreBrandsListParametersQueryOrdering = GHC.Maybe.Nothing,
      coreBrandsListParametersQueryPage = GHC.Maybe.Nothing,
      coreBrandsListParametersQueryPageSize = GHC.Maybe.Nothing,
      coreBrandsListParametersQuerySearch = GHC.Maybe.Nothing,
      coreBrandsListParametersQueryWebCertificate = GHC.Maybe.Nothing
    }

-- | Represents a response of the operation 'coreBrandsList'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'CoreBrandsListResponseError' is used.
data CoreBrandsListResponse
  = -- | Means either no matching case available or a parse error
    CoreBrandsListResponseError GHC.Base.String
  | CoreBrandsListResponse200 PaginatedBrandList
  | CoreBrandsListResponse400 ValidationError
  | CoreBrandsListResponse403 GenericError
  deriving (GHC.Show.Show, GHC.Classes.Eq)

{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation stagesConsentList
module AuthentikAPI.Operations.StagesConsentList where

import qualified AuthentikAPI.Common
import AuthentikAPI.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /stages/consent/
--
-- ConsentStage Viewset
stagesConsentList ::
  forall m.
  (AuthentikAPI.Common.MonadHTTP m) =>
  -- | Contains all available parameters of this operation (query and path parameters)
  StagesConsentListParameters ->
  -- | Monadic computation which returns the result of the operation
  AuthentikAPI.Common.ClientT m (Network.HTTP.Client.Types.Response StagesConsentListResponse)
stagesConsentList parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either StagesConsentListResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                               | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   StagesConsentListResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            PaginatedConsentStageList
                                                      )
                               | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   StagesConsentListResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            ValidationError
                                                      )
                               | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) ->
                                   StagesConsentListResponse403
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GenericError
                                                      )
                               | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( AuthentikAPI.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "GET")
        "/stages/consent/"
        [ AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "consent_expire_in") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> stagesConsentListParametersQueryConsentExpireIn parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "mode") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> stagesConsentListParametersQueryMode parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "name") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> stagesConsentListParametersQueryName parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "ordering") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> stagesConsentListParametersQueryOrdering parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> stagesConsentListParametersQueryPage parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "page_size") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> stagesConsentListParametersQueryPageSize parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "search") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> stagesConsentListParametersQuerySearch parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "stage_uuid") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> stagesConsentListParametersQueryStageUuid parameters) (Data.Text.Internal.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/stages\/consent\/.GET.parameters@ in the specification.
data StagesConsentListParameters = StagesConsentListParameters
  { -- | queryConsent_expire_in: Represents the parameter named \'consent_expire_in\'
    stagesConsentListParametersQueryConsentExpireIn :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryMode: Represents the parameter named \'mode\'
    stagesConsentListParametersQueryMode :: (GHC.Maybe.Maybe StagesConsentListParametersQueryMode'),
    -- | queryName: Represents the parameter named \'name\'
    stagesConsentListParametersQueryName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryOrdering: Represents the parameter named \'ordering\'
    --
    -- Which field to use when ordering the results.
    stagesConsentListParametersQueryOrdering :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryPage: Represents the parameter named \'page\'
    --
    -- A page number within the paginated result set.
    stagesConsentListParametersQueryPage :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | queryPage_size: Represents the parameter named \'page_size\'
    --
    -- Number of results to return per page.
    stagesConsentListParametersQueryPageSize :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | querySearch: Represents the parameter named \'search\'
    --
    -- A search term.
    stagesConsentListParametersQuerySearch :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryStage_uuid: Represents the parameter named \'stage_uuid\'
    stagesConsentListParametersQueryStageUuid :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON StagesConsentListParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryConsent_expire_in" Data.Aeson.Types.ToJSON..=)) (stagesConsentListParametersQueryConsentExpireIn obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryMode" Data.Aeson.Types.ToJSON..=)) (stagesConsentListParametersQueryMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryName" Data.Aeson.Types.ToJSON..=)) (stagesConsentListParametersQueryName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryOrdering" Data.Aeson.Types.ToJSON..=)) (stagesConsentListParametersQueryOrdering obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage" Data.Aeson.Types.ToJSON..=)) (stagesConsentListParametersQueryPage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage_size" Data.Aeson.Types.ToJSON..=)) (stagesConsentListParametersQueryPageSize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySearch" Data.Aeson.Types.ToJSON..=)) (stagesConsentListParametersQuerySearch obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStage_uuid" Data.Aeson.Types.ToJSON..=)) (stagesConsentListParametersQueryStageUuid obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryConsent_expire_in" Data.Aeson.Types.ToJSON..=)) (stagesConsentListParametersQueryConsentExpireIn obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryMode" Data.Aeson.Types.ToJSON..=)) (stagesConsentListParametersQueryMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryName" Data.Aeson.Types.ToJSON..=)) (stagesConsentListParametersQueryName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryOrdering" Data.Aeson.Types.ToJSON..=)) (stagesConsentListParametersQueryOrdering obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage" Data.Aeson.Types.ToJSON..=)) (stagesConsentListParametersQueryPage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage_size" Data.Aeson.Types.ToJSON..=)) (stagesConsentListParametersQueryPageSize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySearch" Data.Aeson.Types.ToJSON..=)) (stagesConsentListParametersQuerySearch obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStage_uuid" Data.Aeson.Types.ToJSON..=)) (stagesConsentListParametersQueryStageUuid obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON StagesConsentListParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "StagesConsentListParameters" (\obj -> (((((((GHC.Base.pure StagesConsentListParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryConsent_expire_in")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryMode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryName")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryOrdering")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPage_size")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "querySearch")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStage_uuid"))

-- | Create a new 'StagesConsentListParameters' with all required fields.
mkStagesConsentListParameters :: StagesConsentListParameters
mkStagesConsentListParameters =
  StagesConsentListParameters
    { stagesConsentListParametersQueryConsentExpireIn = GHC.Maybe.Nothing,
      stagesConsentListParametersQueryMode = GHC.Maybe.Nothing,
      stagesConsentListParametersQueryName = GHC.Maybe.Nothing,
      stagesConsentListParametersQueryOrdering = GHC.Maybe.Nothing,
      stagesConsentListParametersQueryPage = GHC.Maybe.Nothing,
      stagesConsentListParametersQueryPageSize = GHC.Maybe.Nothing,
      stagesConsentListParametersQuerySearch = GHC.Maybe.Nothing,
      stagesConsentListParametersQueryStageUuid = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @paths.\/stages\/consent\/.GET.parameters.properties.queryMode@ in the specification.
--
-- Represents the parameter named \'mode\'
data StagesConsentListParametersQueryMode'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    StagesConsentListParametersQueryMode'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    StagesConsentListParametersQueryMode'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"always_require"@
    StagesConsentListParametersQueryMode'EnumAlwaysRequire
  | -- | Represents the JSON value @"expiring"@
    StagesConsentListParametersQueryMode'EnumExpiring
  | -- | Represents the JSON value @"permanent"@
    StagesConsentListParametersQueryMode'EnumPermanent
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON StagesConsentListParametersQueryMode' where
  toJSON (StagesConsentListParametersQueryMode'Other val) = val
  toJSON (StagesConsentListParametersQueryMode'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (StagesConsentListParametersQueryMode'EnumAlwaysRequire) = "always_require"
  toJSON (StagesConsentListParametersQueryMode'EnumExpiring) = "expiring"
  toJSON (StagesConsentListParametersQueryMode'EnumPermanent) = "permanent"

instance Data.Aeson.Types.FromJSON.FromJSON StagesConsentListParametersQueryMode' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "always_require" -> StagesConsentListParametersQueryMode'EnumAlwaysRequire
          | val GHC.Classes.== "expiring" -> StagesConsentListParametersQueryMode'EnumExpiring
          | val GHC.Classes.== "permanent" -> StagesConsentListParametersQueryMode'EnumPermanent
          | GHC.Base.otherwise -> StagesConsentListParametersQueryMode'Other val
      )

-- | Represents a response of the operation 'stagesConsentList'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'StagesConsentListResponseError' is used.
data StagesConsentListResponse
  = -- | Means either no matching case available or a parse error
    StagesConsentListResponseError GHC.Base.String
  | StagesConsentListResponse200 PaginatedConsentStageList
  | StagesConsentListResponse400 ValidationError
  | StagesConsentListResponse403 GenericError
  deriving (GHC.Show.Show, GHC.Classes.Eq)

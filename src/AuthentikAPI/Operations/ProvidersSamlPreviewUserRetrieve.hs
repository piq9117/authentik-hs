{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation providersSamlPreviewUserRetrieve
module AuthentikAPI.Operations.ProvidersSamlPreviewUserRetrieve where

import qualified AuthentikAPI.Common
import AuthentikAPI.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /providers/saml/{id}/preview_user/
--
-- Preview user data for provider
providersSamlPreviewUserRetrieve ::
  forall m.
  (AuthentikAPI.Common.MonadHTTP m) =>
  -- | Contains all available parameters of this operation (query and path parameters)
  ProvidersSamlPreviewUserRetrieveParameters ->
  -- | Monadic computation which returns the result of the operation
  AuthentikAPI.Common.ClientT m (Network.HTTP.Client.Types.Response ProvidersSamlPreviewUserRetrieveResponse)
providersSamlPreviewUserRetrieve parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either ProvidersSamlPreviewUserRetrieveResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                               | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   ProvidersSamlPreviewUserRetrieveResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            PropertyMappingPreview
                                                      )
                               | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) -> Data.Either.Right ProvidersSamlPreviewUserRetrieveResponse400
                               | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) ->
                                   ProvidersSamlPreviewUserRetrieveResponse403
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GenericError
                                                      )
                               | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    (AuthentikAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "GET") ("/providers/saml/" GHC.Base.<> (AuthentikAPI.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (AuthentikAPI.Common.textToByte GHC.Base.$ AuthentikAPI.Common.stringifyModel (providersSamlPreviewUserRetrieveParametersPathId parameters))) GHC.Base.<> "/preview_user/")) [AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "for_user") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> providersSamlPreviewUserRetrieveParametersQueryForUser parameters) (Data.Text.Internal.pack "form") GHC.Types.False])

-- | Defines the object schema located at @paths.\/providers\/saml\/{id}\/preview_user\/.GET.parameters@ in the specification.
data ProvidersSamlPreviewUserRetrieveParameters = ProvidersSamlPreviewUserRetrieveParameters
  { -- | pathId: Represents the parameter named \'id\'
    --
    -- A unique integer value identifying this SAML Provider.
    providersSamlPreviewUserRetrieveParametersPathId :: GHC.Types.Int,
    -- | queryFor_user: Represents the parameter named \'for_user\'
    providersSamlPreviewUserRetrieveParametersQueryForUser :: (GHC.Maybe.Maybe GHC.Types.Int)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON ProvidersSamlPreviewUserRetrieveParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["pathId" Data.Aeson.Types.ToJSON..= providersSamlPreviewUserRetrieveParametersPathId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryFor_user" Data.Aeson.Types.ToJSON..=)) (providersSamlPreviewUserRetrieveParametersQueryForUser obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["pathId" Data.Aeson.Types.ToJSON..= providersSamlPreviewUserRetrieveParametersPathId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryFor_user" Data.Aeson.Types.ToJSON..=)) (providersSamlPreviewUserRetrieveParametersQueryForUser obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON ProvidersSamlPreviewUserRetrieveParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "ProvidersSamlPreviewUserRetrieveParameters" (\obj -> (GHC.Base.pure ProvidersSamlPreviewUserRetrieveParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryFor_user"))

-- | Create a new 'ProvidersSamlPreviewUserRetrieveParameters' with all required fields.
mkProvidersSamlPreviewUserRetrieveParameters ::
  -- | 'providersSamlPreviewUserRetrieveParametersPathId'
  GHC.Types.Int ->
  ProvidersSamlPreviewUserRetrieveParameters
mkProvidersSamlPreviewUserRetrieveParameters providersSamlPreviewUserRetrieveParametersPathId =
  ProvidersSamlPreviewUserRetrieveParameters
    { providersSamlPreviewUserRetrieveParametersPathId = providersSamlPreviewUserRetrieveParametersPathId,
      providersSamlPreviewUserRetrieveParametersQueryForUser = GHC.Maybe.Nothing
    }

-- | Represents a response of the operation 'providersSamlPreviewUserRetrieve'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'ProvidersSamlPreviewUserRetrieveResponseError' is used.
data ProvidersSamlPreviewUserRetrieveResponse
  = -- | Means either no matching case available or a parse error
    ProvidersSamlPreviewUserRetrieveResponseError GHC.Base.String
  | ProvidersSamlPreviewUserRetrieveResponse200 PropertyMappingPreview
  | -- | Bad request
    ProvidersSamlPreviewUserRetrieveResponse400
  | ProvidersSamlPreviewUserRetrieveResponse403 GenericError
  deriving (GHC.Show.Show, GHC.Classes.Eq)

{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation flowsExecutorSolve
module AuthentikAPI.Operations.FlowsExecutorSolve where

import qualified AuthentikAPI.Common
import AuthentikAPI.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /flows/executor/{flow_slug}/
--
-- Solve the previously retrieved challenge and advanced to the next stage.
flowsExecutorSolve ::
  forall m.
  (AuthentikAPI.Common.MonadHTTP m) =>
  -- | Contains all available parameters of this operation (query and path parameters)
  FlowsExecutorSolveParameters ->
  -- | The request body to send
  GHC.Maybe.Maybe FlowChallengeResponseRequest ->
  -- | Monadic computation which returns the result of the operation
  AuthentikAPI.Common.ClientT m (Network.HTTP.Client.Types.Response FlowsExecutorSolveResponse)
flowsExecutorSolve
  parameters
  body =
    GHC.Base.fmap
      ( \response_0 ->
          GHC.Base.fmap
            ( Data.Either.either FlowsExecutorSolveResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     FlowsExecutorSolveResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              ChallengeTypes
                                                        )
                                 | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                     FlowsExecutorSolveResponse400
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              ValidationError
                                                        )
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) ->
                                     FlowsExecutorSolveResponse403
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              GenericError
                                                        )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_0
            )
            response_0
      )
      (AuthentikAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "POST") ("/flows/executor/" GHC.Base.<> (AuthentikAPI.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (AuthentikAPI.Common.textToByte GHC.Base.$ AuthentikAPI.Common.stringifyModel (flowsExecutorSolveParametersPathFlowSlug parameters))) GHC.Base.<> "/")) [AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "query") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (flowsExecutorSolveParametersQueryQuery parameters)) (Data.Text.Internal.pack "form") GHC.Types.False] body AuthentikAPI.Common.RequestBodyEncodingJSON)

-- | Defines the object schema located at @paths.\/flows\/executor\/{flow_slug}\/.POST.parameters@ in the specification.
data FlowsExecutorSolveParameters = FlowsExecutorSolveParameters
  { -- | pathFlow_slug: Represents the parameter named \'flow_slug\'
    flowsExecutorSolveParametersPathFlowSlug :: Data.Text.Internal.Text,
    -- | queryQuery: Represents the parameter named \'query\'
    --
    -- Querystring as received
    flowsExecutorSolveParametersQueryQuery :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON FlowsExecutorSolveParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["pathFlow_slug" Data.Aeson.Types.ToJSON..= flowsExecutorSolveParametersPathFlowSlug obj] : ["queryQuery" Data.Aeson.Types.ToJSON..= flowsExecutorSolveParametersQueryQuery obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["pathFlow_slug" Data.Aeson.Types.ToJSON..= flowsExecutorSolveParametersPathFlowSlug obj] : ["queryQuery" Data.Aeson.Types.ToJSON..= flowsExecutorSolveParametersQueryQuery obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON FlowsExecutorSolveParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "FlowsExecutorSolveParameters" (\obj -> (GHC.Base.pure FlowsExecutorSolveParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathFlow_slug")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryQuery"))

-- | Create a new 'FlowsExecutorSolveParameters' with all required fields.
mkFlowsExecutorSolveParameters ::
  -- | 'flowsExecutorSolveParametersPathFlowSlug'
  Data.Text.Internal.Text ->
  -- | 'flowsExecutorSolveParametersQueryQuery'
  Data.Text.Internal.Text ->
  FlowsExecutorSolveParameters
mkFlowsExecutorSolveParameters flowsExecutorSolveParametersPathFlowSlug flowsExecutorSolveParametersQueryQuery =
  FlowsExecutorSolveParameters
    { flowsExecutorSolveParametersPathFlowSlug = flowsExecutorSolveParametersPathFlowSlug,
      flowsExecutorSolveParametersQueryQuery = flowsExecutorSolveParametersQueryQuery
    }

-- | Represents a response of the operation 'flowsExecutorSolve'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'FlowsExecutorSolveResponseError' is used.
data FlowsExecutorSolveResponse
  = -- | Means either no matching case available or a parse error
    FlowsExecutorSolveResponseError GHC.Base.String
  | FlowsExecutorSolveResponse200 ChallengeTypes
  | FlowsExecutorSolveResponse400 ValidationError
  | FlowsExecutorSolveResponse403 GenericError
  deriving (GHC.Show.Show, GHC.Classes.Eq)

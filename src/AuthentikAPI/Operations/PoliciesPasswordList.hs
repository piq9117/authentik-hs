{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation policiesPasswordList
module AuthentikAPI.Operations.PoliciesPasswordList where

import qualified AuthentikAPI.Common
import AuthentikAPI.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /policies/password/
--
-- Password Policy Viewset
policiesPasswordList ::
  forall m.
  (AuthentikAPI.Common.MonadHTTP m) =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PoliciesPasswordListParameters ->
  -- | Monadic computation which returns the result of the operation
  AuthentikAPI.Common.ClientT m (Network.HTTP.Client.Types.Response PoliciesPasswordListResponse)
policiesPasswordList parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either PoliciesPasswordListResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                               | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PoliciesPasswordListResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            PaginatedPasswordPolicyList
                                                      )
                               | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PoliciesPasswordListResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            ValidationError
                                                      )
                               | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PoliciesPasswordListResponse403
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GenericError
                                                      )
                               | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( AuthentikAPI.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "GET")
        "/policies/password/"
        [ AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "amount_digits") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> policiesPasswordListParametersQueryAmountDigits parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "amount_lowercase") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> policiesPasswordListParametersQueryAmountLowercase parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "amount_symbols") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> policiesPasswordListParametersQueryAmountSymbols parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "amount_uppercase") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> policiesPasswordListParametersQueryAmountUppercase parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "check_have_i_been_pwned") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> policiesPasswordListParametersQueryCheckHaveIBeenPwned parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "check_static_rules") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> policiesPasswordListParametersQueryCheckStaticRules parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "check_zxcvbn") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> policiesPasswordListParametersQueryCheckZxcvbn parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "created") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> policiesPasswordListParametersQueryCreated parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "error_message") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> policiesPasswordListParametersQueryErrorMessage parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "execution_logging") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> policiesPasswordListParametersQueryExecutionLogging parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "hibp_allowed_count") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> policiesPasswordListParametersQueryHibpAllowedCount parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "last_updated") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> policiesPasswordListParametersQueryLastUpdated parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "length_min") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> policiesPasswordListParametersQueryLengthMin parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "name") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> policiesPasswordListParametersQueryName parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "ordering") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> policiesPasswordListParametersQueryOrdering parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> policiesPasswordListParametersQueryPage parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "page_size") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> policiesPasswordListParametersQueryPageSize parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "password_field") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> policiesPasswordListParametersQueryPasswordField parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "policy_uuid") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> policiesPasswordListParametersQueryPolicyUuid parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "search") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> policiesPasswordListParametersQuerySearch parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "symbol_charset") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> policiesPasswordListParametersQuerySymbolCharset parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "zxcvbn_score_threshold") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> policiesPasswordListParametersQueryZxcvbnScoreThreshold parameters) (Data.Text.Internal.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/policies\/password\/.GET.parameters@ in the specification.
data PoliciesPasswordListParameters = PoliciesPasswordListParameters
  { -- | queryAmount_digits: Represents the parameter named \'amount_digits\'
    policiesPasswordListParametersQueryAmountDigits :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | queryAmount_lowercase: Represents the parameter named \'amount_lowercase\'
    policiesPasswordListParametersQueryAmountLowercase :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | queryAmount_symbols: Represents the parameter named \'amount_symbols\'
    policiesPasswordListParametersQueryAmountSymbols :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | queryAmount_uppercase: Represents the parameter named \'amount_uppercase\'
    policiesPasswordListParametersQueryAmountUppercase :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | queryCheck_have_i_been_pwned: Represents the parameter named \'check_have_i_been_pwned\'
    policiesPasswordListParametersQueryCheckHaveIBeenPwned :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | queryCheck_static_rules: Represents the parameter named \'check_static_rules\'
    policiesPasswordListParametersQueryCheckStaticRules :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | queryCheck_zxcvbn: Represents the parameter named \'check_zxcvbn\'
    policiesPasswordListParametersQueryCheckZxcvbn :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | queryCreated: Represents the parameter named \'created\'
    policiesPasswordListParametersQueryCreated :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryError_message: Represents the parameter named \'error_message\'
    policiesPasswordListParametersQueryErrorMessage :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryExecution_logging: Represents the parameter named \'execution_logging\'
    policiesPasswordListParametersQueryExecutionLogging :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | queryHibp_allowed_count: Represents the parameter named \'hibp_allowed_count\'
    policiesPasswordListParametersQueryHibpAllowedCount :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | queryLast_updated: Represents the parameter named \'last_updated\'
    policiesPasswordListParametersQueryLastUpdated :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryLength_min: Represents the parameter named \'length_min\'
    policiesPasswordListParametersQueryLengthMin :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | queryName: Represents the parameter named \'name\'
    policiesPasswordListParametersQueryName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryOrdering: Represents the parameter named \'ordering\'
    --
    -- Which field to use when ordering the results.
    policiesPasswordListParametersQueryOrdering :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryPage: Represents the parameter named \'page\'
    --
    -- A page number within the paginated result set.
    policiesPasswordListParametersQueryPage :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | queryPage_size: Represents the parameter named \'page_size\'
    --
    -- Number of results to return per page.
    policiesPasswordListParametersQueryPageSize :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | queryPassword_field: Represents the parameter named \'password_field\'
    policiesPasswordListParametersQueryPasswordField :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryPolicy_uuid: Represents the parameter named \'policy_uuid\'
    policiesPasswordListParametersQueryPolicyUuid :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | querySearch: Represents the parameter named \'search\'
    --
    -- A search term.
    policiesPasswordListParametersQuerySearch :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | querySymbol_charset: Represents the parameter named \'symbol_charset\'
    policiesPasswordListParametersQuerySymbolCharset :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryZxcvbn_score_threshold: Represents the parameter named \'zxcvbn_score_threshold\'
    policiesPasswordListParametersQueryZxcvbnScoreThreshold :: (GHC.Maybe.Maybe GHC.Types.Int)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PoliciesPasswordListParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryAmount_digits" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQueryAmountDigits obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryAmount_lowercase" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQueryAmountLowercase obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryAmount_symbols" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQueryAmountSymbols obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryAmount_uppercase" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQueryAmountUppercase obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryCheck_have_i_been_pwned" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQueryCheckHaveIBeenPwned obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryCheck_static_rules" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQueryCheckStaticRules obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryCheck_zxcvbn" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQueryCheckZxcvbn obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryCreated" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQueryCreated obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryError_message" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQueryErrorMessage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExecution_logging" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQueryExecutionLogging obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryHibp_allowed_count" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQueryHibpAllowedCount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLast_updated" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQueryLastUpdated obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLength_min" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQueryLengthMin obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryName" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQueryName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryOrdering" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQueryOrdering obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQueryPage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage_size" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQueryPageSize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPassword_field" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQueryPasswordField obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPolicy_uuid" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQueryPolicyUuid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySearch" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQuerySearch obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySymbol_charset" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQuerySymbolCharset obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryZxcvbn_score_threshold" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQueryZxcvbnScoreThreshold obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryAmount_digits" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQueryAmountDigits obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryAmount_lowercase" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQueryAmountLowercase obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryAmount_symbols" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQueryAmountSymbols obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryAmount_uppercase" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQueryAmountUppercase obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryCheck_have_i_been_pwned" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQueryCheckHaveIBeenPwned obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryCheck_static_rules" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQueryCheckStaticRules obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryCheck_zxcvbn" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQueryCheckZxcvbn obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryCreated" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQueryCreated obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryError_message" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQueryErrorMessage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExecution_logging" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQueryExecutionLogging obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryHibp_allowed_count" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQueryHibpAllowedCount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLast_updated" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQueryLastUpdated obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLength_min" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQueryLengthMin obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryName" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQueryName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryOrdering" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQueryOrdering obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQueryPage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage_size" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQueryPageSize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPassword_field" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQueryPasswordField obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPolicy_uuid" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQueryPolicyUuid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySearch" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQuerySearch obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySymbol_charset" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQuerySymbolCharset obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryZxcvbn_score_threshold" Data.Aeson.Types.ToJSON..=)) (policiesPasswordListParametersQueryZxcvbnScoreThreshold obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PoliciesPasswordListParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PoliciesPasswordListParameters" (\obj -> (((((((((((((((((((((GHC.Base.pure PoliciesPasswordListParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryAmount_digits")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryAmount_lowercase")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryAmount_symbols")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryAmount_uppercase")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryCheck_have_i_been_pwned")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryCheck_static_rules")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryCheck_zxcvbn")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryCreated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryError_message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryExecution_logging")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryHibp_allowed_count")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryLast_updated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryLength_min")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryName")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryOrdering")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPage_size")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPassword_field")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPolicy_uuid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "querySearch")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "querySymbol_charset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryZxcvbn_score_threshold"))

-- | Create a new 'PoliciesPasswordListParameters' with all required fields.
mkPoliciesPasswordListParameters :: PoliciesPasswordListParameters
mkPoliciesPasswordListParameters =
  PoliciesPasswordListParameters
    { policiesPasswordListParametersQueryAmountDigits = GHC.Maybe.Nothing,
      policiesPasswordListParametersQueryAmountLowercase = GHC.Maybe.Nothing,
      policiesPasswordListParametersQueryAmountSymbols = GHC.Maybe.Nothing,
      policiesPasswordListParametersQueryAmountUppercase = GHC.Maybe.Nothing,
      policiesPasswordListParametersQueryCheckHaveIBeenPwned = GHC.Maybe.Nothing,
      policiesPasswordListParametersQueryCheckStaticRules = GHC.Maybe.Nothing,
      policiesPasswordListParametersQueryCheckZxcvbn = GHC.Maybe.Nothing,
      policiesPasswordListParametersQueryCreated = GHC.Maybe.Nothing,
      policiesPasswordListParametersQueryErrorMessage = GHC.Maybe.Nothing,
      policiesPasswordListParametersQueryExecutionLogging = GHC.Maybe.Nothing,
      policiesPasswordListParametersQueryHibpAllowedCount = GHC.Maybe.Nothing,
      policiesPasswordListParametersQueryLastUpdated = GHC.Maybe.Nothing,
      policiesPasswordListParametersQueryLengthMin = GHC.Maybe.Nothing,
      policiesPasswordListParametersQueryName = GHC.Maybe.Nothing,
      policiesPasswordListParametersQueryOrdering = GHC.Maybe.Nothing,
      policiesPasswordListParametersQueryPage = GHC.Maybe.Nothing,
      policiesPasswordListParametersQueryPageSize = GHC.Maybe.Nothing,
      policiesPasswordListParametersQueryPasswordField = GHC.Maybe.Nothing,
      policiesPasswordListParametersQueryPolicyUuid = GHC.Maybe.Nothing,
      policiesPasswordListParametersQuerySearch = GHC.Maybe.Nothing,
      policiesPasswordListParametersQuerySymbolCharset = GHC.Maybe.Nothing,
      policiesPasswordListParametersQueryZxcvbnScoreThreshold = GHC.Maybe.Nothing
    }

-- | Represents a response of the operation 'policiesPasswordList'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PoliciesPasswordListResponseError' is used.
data PoliciesPasswordListResponse
  = -- | Means either no matching case available or a parse error
    PoliciesPasswordListResponseError GHC.Base.String
  | PoliciesPasswordListResponse200 PaginatedPasswordPolicyList
  | PoliciesPasswordListResponse400 ValidationError
  | PoliciesPasswordListResponse403 GenericError
  deriving (GHC.Show.Show, GHC.Classes.Eq)

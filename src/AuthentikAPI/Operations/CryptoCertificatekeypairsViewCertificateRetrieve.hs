{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation cryptoCertificatekeypairsViewCertificateRetrieve
module AuthentikAPI.Operations.CryptoCertificatekeypairsViewCertificateRetrieve where

import qualified AuthentikAPI.Common
import AuthentikAPI.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /crypto/certificatekeypairs/{kp_uuid}/view_certificate/
--
-- Return certificate-key pairs certificate and log access
cryptoCertificatekeypairsViewCertificateRetrieve ::
  forall m.
  (AuthentikAPI.Common.MonadHTTP m) =>
  -- | Contains all available parameters of this operation (query and path parameters)
  CryptoCertificatekeypairsViewCertificateRetrieveParameters ->
  -- | Monadic computation which returns the result of the operation
  AuthentikAPI.Common.ClientT m (Network.HTTP.Client.Types.Response CryptoCertificatekeypairsViewCertificateRetrieveResponse)
cryptoCertificatekeypairsViewCertificateRetrieve parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either CryptoCertificatekeypairsViewCertificateRetrieveResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                               | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   CryptoCertificatekeypairsViewCertificateRetrieveResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            CertificateData
                                                      )
                               | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   CryptoCertificatekeypairsViewCertificateRetrieveResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            ValidationError
                                                      )
                               | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) ->
                                   CryptoCertificatekeypairsViewCertificateRetrieveResponse403
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GenericError
                                                      )
                               | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    (AuthentikAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "GET") ("/crypto/certificatekeypairs/" GHC.Base.<> (AuthentikAPI.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (AuthentikAPI.Common.textToByte GHC.Base.$ AuthentikAPI.Common.stringifyModel (cryptoCertificatekeypairsViewCertificateRetrieveParametersPathKpUuid parameters))) GHC.Base.<> "/view_certificate/")) [AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "download") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> cryptoCertificatekeypairsViewCertificateRetrieveParametersQueryDownload parameters) (Data.Text.Internal.pack "form") GHC.Types.False])

-- | Defines the object schema located at @paths.\/crypto\/certificatekeypairs\/{kp_uuid}\/view_certificate\/.GET.parameters@ in the specification.
data CryptoCertificatekeypairsViewCertificateRetrieveParameters = CryptoCertificatekeypairsViewCertificateRetrieveParameters
  { -- | pathKp_uuid: Represents the parameter named \'kp_uuid\'
    --
    -- A UUID string identifying this Certificate-Key Pair.
    cryptoCertificatekeypairsViewCertificateRetrieveParametersPathKpUuid :: Data.Text.Internal.Text,
    -- | queryDownload: Represents the parameter named \'download\'
    cryptoCertificatekeypairsViewCertificateRetrieveParametersQueryDownload :: (GHC.Maybe.Maybe GHC.Types.Bool)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON CryptoCertificatekeypairsViewCertificateRetrieveParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["pathKp_uuid" Data.Aeson.Types.ToJSON..= cryptoCertificatekeypairsViewCertificateRetrieveParametersPathKpUuid obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryDownload" Data.Aeson.Types.ToJSON..=)) (cryptoCertificatekeypairsViewCertificateRetrieveParametersQueryDownload obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["pathKp_uuid" Data.Aeson.Types.ToJSON..= cryptoCertificatekeypairsViewCertificateRetrieveParametersPathKpUuid obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryDownload" Data.Aeson.Types.ToJSON..=)) (cryptoCertificatekeypairsViewCertificateRetrieveParametersQueryDownload obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON CryptoCertificatekeypairsViewCertificateRetrieveParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "CryptoCertificatekeypairsViewCertificateRetrieveParameters" (\obj -> (GHC.Base.pure CryptoCertificatekeypairsViewCertificateRetrieveParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathKp_uuid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryDownload"))

-- | Create a new 'CryptoCertificatekeypairsViewCertificateRetrieveParameters' with all required fields.
mkCryptoCertificatekeypairsViewCertificateRetrieveParameters ::
  -- | 'cryptoCertificatekeypairsViewCertificateRetrieveParametersPathKpUuid'
  Data.Text.Internal.Text ->
  CryptoCertificatekeypairsViewCertificateRetrieveParameters
mkCryptoCertificatekeypairsViewCertificateRetrieveParameters cryptoCertificatekeypairsViewCertificateRetrieveParametersPathKpUuid =
  CryptoCertificatekeypairsViewCertificateRetrieveParameters
    { cryptoCertificatekeypairsViewCertificateRetrieveParametersPathKpUuid = cryptoCertificatekeypairsViewCertificateRetrieveParametersPathKpUuid,
      cryptoCertificatekeypairsViewCertificateRetrieveParametersQueryDownload = GHC.Maybe.Nothing
    }

-- | Represents a response of the operation 'cryptoCertificatekeypairsViewCertificateRetrieve'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'CryptoCertificatekeypairsViewCertificateRetrieveResponseError' is used.
data CryptoCertificatekeypairsViewCertificateRetrieveResponse
  = -- | Means either no matching case available or a parse error
    CryptoCertificatekeypairsViewCertificateRetrieveResponseError GHC.Base.String
  | CryptoCertificatekeypairsViewCertificateRetrieveResponse200 CertificateData
  | CryptoCertificatekeypairsViewCertificateRetrieveResponse400 ValidationError
  | CryptoCertificatekeypairsViewCertificateRetrieveResponse403 GenericError
  deriving (GHC.Show.Show, GHC.Classes.Eq)

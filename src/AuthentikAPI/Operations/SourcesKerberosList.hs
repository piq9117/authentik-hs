{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation sourcesKerberosList
module AuthentikAPI.Operations.SourcesKerberosList where

import qualified AuthentikAPI.Common
import AuthentikAPI.Types
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /sources/kerberos/
--
-- Kerberos Source Viewset
sourcesKerberosList ::
  forall m.
  (AuthentikAPI.Common.MonadHTTP m) =>
  -- | Contains all available parameters of this operation (query and path parameters)
  SourcesKerberosListParameters ->
  -- | Monadic computation which returns the result of the operation
  AuthentikAPI.Common.ClientT m (Network.HTTP.Client.Types.Response SourcesKerberosListResponse)
sourcesKerberosList parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either SourcesKerberosListResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                               | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   SourcesKerberosListResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            PaginatedKerberosSourceList
                                                      )
                               | (\status_2 -> Network.HTTP.Types.Status.statusCode status_2 GHC.Classes.== 400) (Network.HTTP.Client.Types.responseStatus response) ->
                                   SourcesKerberosListResponse400
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            ValidationError
                                                      )
                               | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 403) (Network.HTTP.Client.Types.responseStatus response) ->
                                   SourcesKerberosListResponse403
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GenericError
                                                      )
                               | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( AuthentikAPI.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "GET")
        "/sources/kerberos/"
        [ AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "enabled") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> sourcesKerberosListParametersQueryEnabled parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "kadmin_type") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> sourcesKerberosListParametersQueryKadminType parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "name") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> sourcesKerberosListParametersQueryName parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "ordering") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> sourcesKerberosListParametersQueryOrdering parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> sourcesKerberosListParametersQueryPage parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "page_size") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> sourcesKerberosListParametersQueryPageSize parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "password_login_update_internal_password") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> sourcesKerberosListParametersQueryPasswordLoginUpdateInternalPassword parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "pbm_uuid") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> sourcesKerberosListParametersQueryPbmUuid parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "realm") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> sourcesKerberosListParametersQueryRealm parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "search") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> sourcesKerberosListParametersQuerySearch parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "slug") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> sourcesKerberosListParametersQuerySlug parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "spnego_server_name") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> sourcesKerberosListParametersQuerySpnegoServerName parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "sync_principal") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> sourcesKerberosListParametersQuerySyncPrincipal parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "sync_users") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> sourcesKerberosListParametersQuerySyncUsers parameters) (Data.Text.Internal.pack "form") GHC.Types.False,
          AuthentikAPI.Common.QueryParameter (Data.Text.Internal.pack "sync_users_password") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> sourcesKerberosListParametersQuerySyncUsersPassword parameters) (Data.Text.Internal.pack "form") GHC.Types.False
        ]
    )

-- | Defines the object schema located at @paths.\/sources\/kerberos\/.GET.parameters@ in the specification.
data SourcesKerberosListParameters = SourcesKerberosListParameters
  { -- | queryEnabled: Represents the parameter named \'enabled\'
    sourcesKerberosListParametersQueryEnabled :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | queryKadmin_type: Represents the parameter named \'kadmin_type\'
    --
    -- KAdmin server type
    sourcesKerberosListParametersQueryKadminType :: (GHC.Maybe.Maybe SourcesKerberosListParametersQueryKadminType'),
    -- | queryName: Represents the parameter named \'name\'
    sourcesKerberosListParametersQueryName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryOrdering: Represents the parameter named \'ordering\'
    --
    -- Which field to use when ordering the results.
    sourcesKerberosListParametersQueryOrdering :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryPage: Represents the parameter named \'page\'
    --
    -- A page number within the paginated result set.
    sourcesKerberosListParametersQueryPage :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | queryPage_size: Represents the parameter named \'page_size\'
    --
    -- Number of results to return per page.
    sourcesKerberosListParametersQueryPageSize :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | queryPassword_login_update_internal_password: Represents the parameter named \'password_login_update_internal_password\'
    sourcesKerberosListParametersQueryPasswordLoginUpdateInternalPassword :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | queryPbm_uuid: Represents the parameter named \'pbm_uuid\'
    sourcesKerberosListParametersQueryPbmUuid :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryRealm: Represents the parameter named \'realm\'
    sourcesKerberosListParametersQueryRealm :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | querySearch: Represents the parameter named \'search\'
    --
    -- A search term.
    sourcesKerberosListParametersQuerySearch :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | querySlug: Represents the parameter named \'slug\'
    sourcesKerberosListParametersQuerySlug :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | querySpnego_server_name: Represents the parameter named \'spnego_server_name\'
    sourcesKerberosListParametersQuerySpnegoServerName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | querySync_principal: Represents the parameter named \'sync_principal\'
    sourcesKerberosListParametersQuerySyncPrincipal :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | querySync_users: Represents the parameter named \'sync_users\'
    sourcesKerberosListParametersQuerySyncUsers :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | querySync_users_password: Represents the parameter named \'sync_users_password\'
    sourcesKerberosListParametersQuerySyncUsersPassword :: (GHC.Maybe.Maybe GHC.Types.Bool)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SourcesKerberosListParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnabled" Data.Aeson.Types.ToJSON..=)) (sourcesKerberosListParametersQueryEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryKadmin_type" Data.Aeson.Types.ToJSON..=)) (sourcesKerberosListParametersQueryKadminType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryName" Data.Aeson.Types.ToJSON..=)) (sourcesKerberosListParametersQueryName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryOrdering" Data.Aeson.Types.ToJSON..=)) (sourcesKerberosListParametersQueryOrdering obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage" Data.Aeson.Types.ToJSON..=)) (sourcesKerberosListParametersQueryPage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage_size" Data.Aeson.Types.ToJSON..=)) (sourcesKerberosListParametersQueryPageSize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPassword_login_update_internal_password" Data.Aeson.Types.ToJSON..=)) (sourcesKerberosListParametersQueryPasswordLoginUpdateInternalPassword obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPbm_uuid" Data.Aeson.Types.ToJSON..=)) (sourcesKerberosListParametersQueryPbmUuid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRealm" Data.Aeson.Types.ToJSON..=)) (sourcesKerberosListParametersQueryRealm obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySearch" Data.Aeson.Types.ToJSON..=)) (sourcesKerberosListParametersQuerySearch obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySlug" Data.Aeson.Types.ToJSON..=)) (sourcesKerberosListParametersQuerySlug obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySpnego_server_name" Data.Aeson.Types.ToJSON..=)) (sourcesKerberosListParametersQuerySpnegoServerName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySync_principal" Data.Aeson.Types.ToJSON..=)) (sourcesKerberosListParametersQuerySyncPrincipal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySync_users" Data.Aeson.Types.ToJSON..=)) (sourcesKerberosListParametersQuerySyncUsers obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySync_users_password" Data.Aeson.Types.ToJSON..=)) (sourcesKerberosListParametersQuerySyncUsersPassword obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnabled" Data.Aeson.Types.ToJSON..=)) (sourcesKerberosListParametersQueryEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryKadmin_type" Data.Aeson.Types.ToJSON..=)) (sourcesKerberosListParametersQueryKadminType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryName" Data.Aeson.Types.ToJSON..=)) (sourcesKerberosListParametersQueryName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryOrdering" Data.Aeson.Types.ToJSON..=)) (sourcesKerberosListParametersQueryOrdering obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage" Data.Aeson.Types.ToJSON..=)) (sourcesKerberosListParametersQueryPage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage_size" Data.Aeson.Types.ToJSON..=)) (sourcesKerberosListParametersQueryPageSize obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPassword_login_update_internal_password" Data.Aeson.Types.ToJSON..=)) (sourcesKerberosListParametersQueryPasswordLoginUpdateInternalPassword obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPbm_uuid" Data.Aeson.Types.ToJSON..=)) (sourcesKerberosListParametersQueryPbmUuid obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRealm" Data.Aeson.Types.ToJSON..=)) (sourcesKerberosListParametersQueryRealm obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySearch" Data.Aeson.Types.ToJSON..=)) (sourcesKerberosListParametersQuerySearch obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySlug" Data.Aeson.Types.ToJSON..=)) (sourcesKerberosListParametersQuerySlug obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySpnego_server_name" Data.Aeson.Types.ToJSON..=)) (sourcesKerberosListParametersQuerySpnegoServerName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySync_principal" Data.Aeson.Types.ToJSON..=)) (sourcesKerberosListParametersQuerySyncPrincipal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySync_users" Data.Aeson.Types.ToJSON..=)) (sourcesKerberosListParametersQuerySyncUsers obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySync_users_password" Data.Aeson.Types.ToJSON..=)) (sourcesKerberosListParametersQuerySyncUsersPassword obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SourcesKerberosListParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SourcesKerberosListParameters" (\obj -> ((((((((((((((GHC.Base.pure SourcesKerberosListParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEnabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryKadmin_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryName")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryOrdering")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPage_size")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPassword_login_update_internal_password")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPbm_uuid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRealm")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "querySearch")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "querySlug")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "querySpnego_server_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "querySync_principal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "querySync_users")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "querySync_users_password"))

-- | Create a new 'SourcesKerberosListParameters' with all required fields.
mkSourcesKerberosListParameters :: SourcesKerberosListParameters
mkSourcesKerberosListParameters =
  SourcesKerberosListParameters
    { sourcesKerberosListParametersQueryEnabled = GHC.Maybe.Nothing,
      sourcesKerberosListParametersQueryKadminType = GHC.Maybe.Nothing,
      sourcesKerberosListParametersQueryName = GHC.Maybe.Nothing,
      sourcesKerberosListParametersQueryOrdering = GHC.Maybe.Nothing,
      sourcesKerberosListParametersQueryPage = GHC.Maybe.Nothing,
      sourcesKerberosListParametersQueryPageSize = GHC.Maybe.Nothing,
      sourcesKerberosListParametersQueryPasswordLoginUpdateInternalPassword = GHC.Maybe.Nothing,
      sourcesKerberosListParametersQueryPbmUuid = GHC.Maybe.Nothing,
      sourcesKerberosListParametersQueryRealm = GHC.Maybe.Nothing,
      sourcesKerberosListParametersQuerySearch = GHC.Maybe.Nothing,
      sourcesKerberosListParametersQuerySlug = GHC.Maybe.Nothing,
      sourcesKerberosListParametersQuerySpnegoServerName = GHC.Maybe.Nothing,
      sourcesKerberosListParametersQuerySyncPrincipal = GHC.Maybe.Nothing,
      sourcesKerberosListParametersQuerySyncUsers = GHC.Maybe.Nothing,
      sourcesKerberosListParametersQuerySyncUsersPassword = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @paths.\/sources\/kerberos\/.GET.parameters.properties.queryKadmin_type@ in the specification.
--
-- Represents the parameter named \'kadmin_type\'
--
-- KAdmin server type
data SourcesKerberosListParametersQueryKadminType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    SourcesKerberosListParametersQueryKadminType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    SourcesKerberosListParametersQueryKadminType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"Heimdal"@
    SourcesKerberosListParametersQueryKadminType'EnumHeimdal
  | -- | Represents the JSON value @"MIT"@
    SourcesKerberosListParametersQueryKadminType'EnumMIT
  | -- | Represents the JSON value @"other"@
    SourcesKerberosListParametersQueryKadminType'EnumOther
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SourcesKerberosListParametersQueryKadminType' where
  toJSON (SourcesKerberosListParametersQueryKadminType'Other val) = val
  toJSON (SourcesKerberosListParametersQueryKadminType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (SourcesKerberosListParametersQueryKadminType'EnumHeimdal) = "Heimdal"
  toJSON (SourcesKerberosListParametersQueryKadminType'EnumMIT) = "MIT"
  toJSON (SourcesKerberosListParametersQueryKadminType'EnumOther) = "other"

instance Data.Aeson.Types.FromJSON.FromJSON SourcesKerberosListParametersQueryKadminType' where
  parseJSON val =
    GHC.Base.pure
      ( if
          | val GHC.Classes.== "Heimdal" -> SourcesKerberosListParametersQueryKadminType'EnumHeimdal
          | val GHC.Classes.== "MIT" -> SourcesKerberosListParametersQueryKadminType'EnumMIT
          | val GHC.Classes.== "other" -> SourcesKerberosListParametersQueryKadminType'EnumOther
          | GHC.Base.otherwise -> SourcesKerberosListParametersQueryKadminType'Other val
      )

-- | Represents a response of the operation 'sourcesKerberosList'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'SourcesKerberosListResponseError' is used.
data SourcesKerberosListResponse
  = -- | Means either no matching case available or a parse error
    SourcesKerberosListResponseError GHC.Base.String
  | SourcesKerberosListResponse200 PaginatedKerberosSourceList
  | SourcesKerberosListResponse400 ValidationError
  | SourcesKerberosListResponse403 GenericError
  deriving (GHC.Show.Show, GHC.Classes.Eq)
